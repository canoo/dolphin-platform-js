{"version":3,"sources":["node_modules/browser-pack/_prelude.js","bower_components/core.js/library/fn/map.js","dolphin.min.js","bower_components/core.js/library/fn/promise.js","bower_components/core.js/library/modules/$.a-function.js","bower_components/core.js/library/modules/$.add-to-unscopables.js","bower_components/core.js/library/modules/$.an-object.js","bower_components/core.js/library/modules/$.classof.js","bower_components/core.js/library/modules/$.cof.js","bower_components/core.js/library/modules/$.collection-strong.js","bower_components/core.js/library/modules/$.collection-to-json.js","bower_components/core.js/library/modules/$.collection.js","bower_components/core.js/library/modules/$.core.js","bower_components/core.js/library/modules/$.ctx.js","bower_components/core.js/library/modules/$.defined.js","bower_components/core.js/library/modules/$.descriptors.js","bower_components/core.js/library/modules/$.dom-create.js","bower_components/core.js/library/modules/$.export.js","bower_components/core.js/library/modules/$.fails.js","bower_components/core.js/library/modules/$.for-of.js","bower_components/core.js/library/modules/$.global.js","bower_components/core.js/library/modules/$.has.js","bower_components/core.js/library/modules/$.hide.js","bower_components/core.js/library/modules/$.html.js","bower_components/core.js/library/modules/$.invoke.js","bower_components/core.js/library/modules/$.iobject.js","bower_components/core.js/library/modules/$.is-array-iter.js","bower_components/core.js/library/modules/$.is-object.js","bower_components/core.js/library/modules/$.iter-call.js","bower_components/core.js/library/modules/$.iter-create.js","bower_components/core.js/library/modules/$.iter-define.js","bower_components/core.js/library/modules/$.iter-detect.js","bower_components/core.js/library/modules/$.iter-step.js","bower_components/core.js/library/modules/$.iterators.js","bower_components/core.js/library/modules/$.js","bower_components/core.js/library/modules/$.library.js","bower_components/core.js/library/modules/$.microtask.js","bower_components/core.js/library/modules/$.property-desc.js","bower_components/core.js/library/modules/$.redefine-all.js","bower_components/core.js/library/modules/$.redefine.js","bower_components/core.js/library/modules/$.same-value.js","bower_components/core.js/library/modules/$.set-proto.js","bower_components/core.js/library/modules/$.set-species.js","bower_components/core.js/library/modules/$.set-to-string-tag.js","bower_components/core.js/library/modules/$.shared.js","bower_components/core.js/library/modules/$.species-constructor.js","bower_components/core.js/library/modules/$.strict-new.js","bower_components/core.js/library/modules/$.string-at.js","bower_components/core.js/library/modules/$.task.js","bower_components/core.js/library/modules/$.to-integer.js","bower_components/core.js/library/modules/$.to-iobject.js","bower_components/core.js/library/modules/$.to-length.js","bower_components/core.js/library/modules/$.uid.js","bower_components/core.js/library/modules/$.wks.js","bower_components/core.js/library/modules/core.get-iterator-method.js","bower_components/core.js/library/modules/es6.array.iterator.js","bower_components/core.js/library/modules/es6.map.js","bower_components/core.js/library/modules/es6.promise.js","bower_components/core.js/library/modules/es6.string.iterator.js","bower_components/core.js/library/modules/es7.map.to-json.js","bower_components/core.js/library/modules/web.dom.iterable.js","libsrc/opendolphin.js","src/beanmanager.js","src/classrepo.js","src/clientcontext.js","src/connector.js","src/controllermanager.js","src/controllerproxy.js","src/dolphin.js","src/polyfills.js","src/utils.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dolphin","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"_dereq_","Map","../modules/$.core","../modules/es6.map","../modules/es6.object.to-string","../modules/es6.string.iterator","../modules/es7.map.to-json","../modules/web.dom.iterable",2,"Promise","../modules/es6.promise",3,"it","TypeError",4,5,"isObject","./$.is-object",6,"cof","TAG","ARG","arguments","O","T","B","undefined","Object","callee","./$.cof","./$.wks",7,"toString","slice",8,"$","hide","redefineAll","ctx","strictNew","defined","forOf","$iterDefine","step","ID","$has","setSpecies","DESCRIPTORS","isExtensible","SIZE","id","fastKey","create","getEntry","that","key","entry","index","_i","_f","k","getConstructor","wrapper","NAME","IS_MAP","ADDER","C","iterable","_l","prototype","clear","data","p","delete","next","prev","forEach","callbackfn","v","has","setDesc","get","def","value","setStrong","iterated","kind","_t","_k","./$","./$.ctx","./$.defined","./$.descriptors","./$.for-of","./$.has","./$.hide","./$.iter-define","./$.iter-step","./$.redefine-all","./$.set-species","./$.strict-new","./$.uid",9,"classof","arr","push","./$.classof",10,"$export","fails","setToStringTag","methods","common","IS_WEAK","Base","proto","entries","target","_c","each","split","KEY","IS_ADDER","b","result","size","G","W","F","./$.export","./$.fails","./$.global","./$.set-to-string-tag",11,"core","version","__e",12,"aFunction","fn","c","apply","./$.a-function",13,14,"defineProperty",15,"document","is","createElement",16,"PROTOTYPE","type","name","source","own","out","IS_FORCED","IS_GLOBAL","IS_STATIC","S","IS_PROTO","P","IS_BIND","IS_WRAP","param","Function","./$.core",17,"exec",18,"isArrayIter","anObject","toLength","getIterFn","iterator","iterFn","done","./$.an-object","./$.is-array-iter","./$.iter-call","./$.to-length","./core.get-iterator-method",19,"Math","__g",20,"hasOwnProperty",21,"createDesc","object","./$.property-desc",22,"documentElement",23,"args","un",24,"propertyIsEnumerable",25,"Iterators","ITERATOR","ArrayProto","Array","./$.iterators",26,27,"ret",28,"descriptor","IteratorPrototype","Constructor",29,"LIBRARY","redefine","$iterCreate","getProto","BUGGY","keys","FF_ITERATOR","KEYS","VALUES","returnThis","DEFAULT","IS_SET","FORCED","getMethod","DEF_VALUES","VALUES_BUG","$native","$default","values","./$.iter-create","./$.library","./$.redefine",30,"SAFE_CLOSING","riter","from","skipClosing","safe","iter",31,32,33,"$Object","getPrototypeOf","isEnum","getDesc","getOwnPropertyDescriptor","setDescs","defineProperties","getKeys","getNames","getOwnPropertyNames","getSymbols","getOwnPropertySymbols",34,35,"head","last","notify","macrotask","set","Observer","MutationObserver","WebKitMutationObserver","process","isNode","flush","parent","domain","exit","enter","nextTick","toggle","node","createTextNode","observe","characterData","resolve","then","task","./$.task",36,"bitmap","enumerable","configurable","writable",37,"src",38,39,"x","y",40,"check","setPrototypeOf","test","buggy","__proto__",41,"SPECIES",42,"tag","stat",43,"SHARED","store",44,"D","constructor",45,46,"toInteger","TO_STRING","pos","String","charCodeAt","charAt","./$.to-integer",47,"defer","channel","port","invoke","html","cel","setTask","setImmediate","clearTask","clearImmediate","MessageChannel","counter","queue","ONREADYSTATECHANGE","run","listner","event","port2","port1","onmessage","postMessage","addEventListener","importScripts","appendChild","removeChild","setTimeout","./$.dom-create","./$.html","./$.invoke",48,"ceil","floor","isNaN",49,"IObject","./$.iobject",50,"min",51,"px","random","concat",52,"uid","Symbol","./$.shared",53,"getIteratorMethod",54,"addToUnscopables","toIObject","Arguments","./$.add-to-unscopables","./$.to-iobject",55,"strong","./$.collection","./$.collection-strong",56,57,"Wrapper","setProto","same","speciesConstructor","asap","PROMISE","testResolve","sub","USE_NATIVE","P2","works","thenableThenGotten","sameConstructor","isThenable","PromiseCapability","reject","promise","$$resolve","$$reject","perform","error","record","isReject","chain","ok","reaction","handler","fail","h","console","isUnhandled","emit","onunhandledrejection","reason","_d","$reject","d","$resolve","executor","err","onFulfilled","onRejected","catch","capability","all","abrupt","remaining","results","alreadyCalled","race","./$.iter-detect","./$.microtask","./$.same-value","./$.set-proto","./$.species-constructor",58,"$at","point","./$.string-at",59,"toJSON","./$.collection-to-json",60,"NodeList","HTMLCollection","./es6.array.iterator",61,"opendolphin","Attribute","QUALIFIER_PROPERTY","DIRTY_PROPERTY","BASE_VALUE","VALUE","Command","Tag","label","tooltip","mandatory","visible","enabled","regex","widgetHint","valueType","__extends","__","AttributeCreatedNotification","_super","pmId","attributeId","propertyName","newValue","qualifier","className","AttributeMetadataChangedCommand","metadataName","BaseValueChangedCommand","CallNamedActionCommand","actionName","ChangeAttributeMetadataCommand","EventBus","eventHandlers","onEvent","eventHandler","trigger","handle","presentationModelInstanceCount","ClientPresentationModel","presentationModelType","attributes","clientSideOnly","dirty","invalidBus","dirtyValueChangeBus","copy","getAttributes","attribute","attributeCopy","addAttribute","addAttributes","_this","attr","indexOf","findAttributeByPropertyNameAndTag","getQualifier","findAttributeByQualifier","setPresentationModel","updateDirty","onValueChange","evt","isDirty","setDirty","updateAttributeDirtyness","oldVal","oldValue","reset","rebase","onDirty","onInvalidated","handleInvalidate","getAt","findAttributeByPropertyName","findAllAttributesByPropertyName","findAttributeById","syncWith","sourcePresentationModel","targetAttribute","sourceAttribute","ClientAttribute","clientAttributeInstanceCount","valueChangeBus","qualifierChangeBus","baseValueChangeBus","setValue","setBaseValue","setQualifier","getValue","getBaseValue","baseValue","presentationModel","alert","getPresentationModel","verifiedValue","checkValue","calculateDirty","newQualifier","oldQualifier","oldBaseValue","Boolean","Number","valueOf","log","SUPPORTED_VALUE_TYPES","Date","onQualifierChange","onBaseValueChange","ValueChangedCommand","NamedCommand","EmptyNotification","NoCommandBatcher","batch","shift","BlindCommandBatcher","folding","maxBatchSize","processNext","candidate","command","found","canCmd","batchCmd","Codec","encode","commands","JSON","stringify","decode","transmitted","parse","SignalCommand","CreatePresentationModelCommand","pmType","attrs","put","containsKey","remove","splice","isEmpty","containsValue","keySet","DeletedAllPresentationModelsOfTypeNotification","DeletedPresentationModelNotification","Type","ClientModelStore","clientDolphin","presentationModels","presentationModelsPerType","attributesPerId","attributesPerQualifier","modelStoreChangeBus","getClientDolphin","registerModel","model","connector","getClientConnector","createPMCommand","send","registerAttribute","addAttributeById","addAttributeByQualifier","valueChangeCommand","findAttributesByFilter","baseValueChangeCommand","changeAttrMetadataCmd","add","added","addPresentationModelByType","eventType","ADDED","clientPresentationModel","removed","removePresentationModelByType","removeAttributeById","removeAttributeByQualifier","REMOVED","filter","matches","listPresentationModelIds","listPresentationModels","findPresentationModelById","findAllPresentationModelByType","deleteAllPresentationModelOfType","pm","deletePresentationModel","containsPresentationModel","findAllAttributesByQualifier","onModelStoreChange","onModelStoreChangeForType","pmStoreEvent","ClientDolphin","setClientConnector","clientConnector","commandName","onFinished","sendEmpty","getClientModelStore","setClientModelStore","clientModelStore","modelToDelete","updatePresentationModelQualifier","updateAttributeQualifier","clientAttribute","addAttributeToModel","startPushListening","pushActionName","releaseActionName","setPushListener","setReleaseCommand","setPushEnabled","listen","stopPushListening","PresentationModelResetedCommand","SavedPresentationModelNotification","InitializeAttributeCommand","SwitchPresentationModelCommand","sourcePmId","DeleteAllPresentationModelsOfTypeCommand","DeletePresentationModelCommand","DataCommand","ClientConnector","transmitter","slackMS","commandQueue","currentlySending","pushEnabled","waiting","codec","commandBatcher","setCommandBatcher","newBatcher","newListener","pushListener","newCommand","releaseCommand","release","doSendNext","enqueuePushCommand","cmdsAndHandlers","callback","map","cah","transmit","response","touchedPMs","touched","handleDataCommand","handleDeletePresentationModelCommand","handleDeleteAllPresentationModelOfTypeCommand","handleCreatePresentationModelCommand","handleValueChangedCommand","handleBaseValueChangedCommand","handleSwitchPresentationModelCommand","handleInitializeAttributeCommand","handleSavedPresentationModelNotification","handlePresentationModelResetedCommand","handleAttributeMetadataChangedCommand","handleCallNamedActionCommand","serverCommand","match","clientPm","switchPm","sourcePm","attributesCopy","me","models","onFinishedData","signal","url","makeDolphin","build","DolphinBuilder","NoTransmitter","onDone","HttpTransmitter","charset","errorHandler","supportCORS","HttpCodes","finished","success","http","XMLHttpRequest","sig","withCredentials","invalidate","onerror","handleError","onreadystatechange","readyState","status","responseText","trim","responseCommands","open","overrideMimeType","message","errorEvent","httpStatus","reset_","slackMS_","maxBatchSize_","supportCORS_","url_","errorHandler_","GetPresentationModelCommand","ResetPresentationModelCommand",62,"BeanManager","classRepository","checkParam","addedHandlers","removedHandlers","updatedHandlers","arrayUpdatedHandlers","allAddedHandlers","allRemovedHandlers","allUpdatedHandlers","allArrayUpdatedHandlers","onBeanAdded","bean","handlerList","exists","warn","onBeanRemoved","onBeanUpdate","onArrayUpdate","count","newElement","utils","notifyBeanChange","notifyArrayChange","removedElements","isManaged","addAll","collection","removeAll","removeIf","predicate","onAdded","unsubscribe","onRemoved","../bower_components/core.js/library/fn/map","./polyfills.js","./utils.js",63,"fromDolphin","DOLPHIN_BEAN","beanFromDolphin","toDolphin","beanToDolphin","sendListAdd","modelId","element","sendListRemove","to","validateList","list","propertyUpdateHandlers","block","blocked","isBlocked","unblock","ClassRepository","classes","classInfos","beanAddedHandlers","beanRemovedHandlers","arrayUpdateHandlers","UNKNOWN","BASIC_TYPE","classInfo","array","isArray","registerClass","search","unregisterClass","load","unload","addListEntry","delListEntry","setListEntry","mapParamToDolphin","mapDolphinToBean","../libsrc/opendolphin.js",64,"ClientContext","beanManager","controllerManager","_controllerManager","_connector","INIT_COMMAND_NAME","DOLPHIN_PLATFORM_PREFIX","DISCONNECT_COMMAND_NAME","createController","disconnect",65,"Connector","config","highlanderPMResolver","highlanderPMPromise","sourceSystem","SOURCE_SYSTEM","SOURCE_SYSTEM_SERVER","onModelAdded","onModelRemoved","serverPush","POLL_COMMAND_NAME","RELEASE_COMMAND_NAME","initializer","req","onload","statusText","ACTION_CALL_BEAN","HIGHLANDER_BEAN","DOLPHIN_LIST_ADD","DOLPHIN_LIST_DEL","DOLPHIN_LIST_SET","SOURCE_SYSTEM_CLIENT","getHighlanderPM","../bower_components/core.js/library/fn/promise",66,"ControllerManager","ControllerProxy","DOLPHIN_BEAN_TYPE","REGISTER_CONTROLLER_COMMAND_NAME","CALL_CONTROLLER_ACTION_COMMAND_NAME","DESTROY_CONTROLLER_COMMAND_NAME","CONTROLLER_NAME","CONTROLLER_ID","MODEL","ACTION_NAME","ERROR_CODE","PARAM_PREFIX","controllerId","highlanderPM","invokeAction","params","prop","isError","destroyController","./classrepo.js","./connector.js","./controllerproxy.js",67,"manager","destroyed","destroy",68,"connect","builder","./beanmanager.js","./clientcontext.js","./controllermanager.js",69,"thisArg","len","kValue","fun","res","val",70],"mappings":"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","file":"dolphin.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.map');\nrequire('../modules/es7.map.to-json');\nmodule.exports = require('../modules/$.core').Map;","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.dolphin = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n_dereq_('../modules/es6.object.to-string');\n_dereq_('../modules/es6.string.iterator');\n_dereq_('../modules/web.dom.iterable');\n_dereq_('../modules/es6.map');\n_dereq_('../modules/es7.map.to-json');\nmodule.exports = _dereq_('../modules/$.core').Map;\n},{\"../modules/$.core\":11,\"../modules/es6.map\":55,\"../modules/es6.object.to-string\":56,\"../modules/es6.string.iterator\":58,\"../modules/es7.map.to-json\":59,\"../modules/web.dom.iterable\":60}],2:[function(_dereq_,module,exports){\n_dereq_('../modules/es6.object.to-string');\n_dereq_('../modules/es6.string.iterator');\n_dereq_('../modules/web.dom.iterable');\n_dereq_('../modules/es6.promise');\nmodule.exports = _dereq_('../modules/$.core').Promise;\n},{\"../modules/$.core\":11,\"../modules/es6.object.to-string\":56,\"../modules/es6.promise\":57,\"../modules/es6.string.iterator\":58,\"../modules/web.dom.iterable\":60}],3:[function(_dereq_,module,exports){\nmodule.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};\n},{}],4:[function(_dereq_,module,exports){\nmodule.exports = function(){ /* empty */ };\n},{}],5:[function(_dereq_,module,exports){\nvar isObject = _dereq_('./$.is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};\n},{\"./$.is-object\":26}],6:[function(_dereq_,module,exports){\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = _dereq_('./$.cof')\n  , TAG = _dereq_('./$.wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n},{\"./$.cof\":7,\"./$.wks\":52}],7:[function(_dereq_,module,exports){\nvar toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};\n},{}],8:[function(_dereq_,module,exports){\n'use strict';\nvar $            = _dereq_('./$')\n  , hide         = _dereq_('./$.hide')\n  , redefineAll  = _dereq_('./$.redefine-all')\n  , ctx          = _dereq_('./$.ctx')\n  , strictNew    = _dereq_('./$.strict-new')\n  , defined      = _dereq_('./$.defined')\n  , forOf        = _dereq_('./$.for-of')\n  , $iterDefine  = _dereq_('./$.iter-define')\n  , step         = _dereq_('./$.iter-step')\n  , ID           = _dereq_('./$.uid')('id')\n  , $has         = _dereq_('./$.has')\n  , isObject     = _dereq_('./$.is-object')\n  , setSpecies   = _dereq_('./$.set-species')\n  , DESCRIPTORS  = _dereq_('./$.descriptors')\n  , isExtensible = Object.isExtensible || isObject\n  , SIZE         = DESCRIPTORS ? '_s' : 'size'\n  , id           = 0;\n\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!$has(it, ID)){\n    // can't set id to frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add id\n    if(!create)return 'E';\n    // add missing object id\n    hide(it, ID, ++id);\n  // return object id with prefix\n  } return 'O' + it[ID];\n};\n\nvar getEntry = function(that, key){\n  // fast case\n  var index = fastKey(key), entry;\n  if(index !== 'F')return that._i[index];\n  // frozen object case\n  for(entry = that._f; entry; entry = entry.n){\n    if(entry.k == key)return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      strictNew(that, C, NAME);\n      that._i = $.create(null); // index\n      that._f = undefined;      // first entry\n      that._l = undefined;      // last entry\n      that[SIZE] = 0;           // size\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear(){\n        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){\n          entry.r = true;\n          if(entry.p)entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function(key){\n        var that  = this\n          , entry = getEntry(that, key);\n        if(entry){\n          var next = entry.n\n            , prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if(prev)prev.n = next;\n          if(next)next.p = prev;\n          if(that._f == entry)that._f = next;\n          if(that._l == entry)that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /*, that = undefined */){\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)\n          , entry;\n        while(entry = entry ? entry.n : this._f){\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while(entry && entry.r)entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key){\n        return !!getEntry(this, key);\n      }\n    });\n    if(DESCRIPTORS)$.setDesc(C.prototype, 'size', {\n      get: function(){\n        return defined(this[SIZE]);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var entry = getEntry(that, key)\n      , prev, index;\n    // change existing entry\n    if(entry){\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if(!that._f)that._f = entry;\n      if(prev)prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if(index !== 'F')that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function(C, NAME, IS_MAP){\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function(iterated, kind){\n      this._t = iterated;  // target\n      this._k = kind;      // kind\n      this._l = undefined; // previous\n    }, function(){\n      var that  = this\n        , kind  = that._k\n        , entry = that._l;\n      // revert to the last existing entry\n      while(entry && entry.r)entry = entry.p;\n      // get next entry\n      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if(kind == 'keys'  )return step(0, entry.k);\n      if(kind == 'values')return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n},{\"./$\":33,\"./$.ctx\":12,\"./$.defined\":13,\"./$.descriptors\":14,\"./$.for-of\":18,\"./$.has\":20,\"./$.hide\":21,\"./$.is-object\":26,\"./$.iter-define\":29,\"./$.iter-step\":31,\"./$.redefine-all\":37,\"./$.set-species\":41,\"./$.strict-new\":45,\"./$.uid\":51}],9:[function(_dereq_,module,exports){\n// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar forOf   = _dereq_('./$.for-of')\n  , classof = _dereq_('./$.classof');\nmodule.exports = function(NAME){\n  return function toJSON(){\n    if(classof(this) != NAME)throw TypeError(NAME + \"#toJSON isn't generic\");\n    var arr = [];\n    forOf(this, false, arr.push, arr);\n    return arr;\n  };\n};\n},{\"./$.classof\":6,\"./$.for-of\":18}],10:[function(_dereq_,module,exports){\n'use strict';\nvar $              = _dereq_('./$')\n  , global         = _dereq_('./$.global')\n  , $export        = _dereq_('./$.export')\n  , fails          = _dereq_('./$.fails')\n  , hide           = _dereq_('./$.hide')\n  , redefineAll    = _dereq_('./$.redefine-all')\n  , forOf          = _dereq_('./$.for-of')\n  , strictNew      = _dereq_('./$.strict-new')\n  , isObject       = _dereq_('./$.is-object')\n  , setToStringTag = _dereq_('./$.set-to-string-tag')\n  , DESCRIPTORS    = _dereq_('./$.descriptors');\n\nmodule.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){\n  var Base  = global[NAME]\n    , C     = Base\n    , ADDER = IS_MAP ? 'set' : 'add'\n    , proto = C && C.prototype\n    , O     = {};\n  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){\n    new C().entries().next();\n  }))){\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n  } else {\n    C = wrapper(function(target, iterable){\n      strictNew(target, C, NAME);\n      target._c = new Base;\n      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    $.each.call('add,clear,delete,forEach,get,has,set,keys,values,entries'.split(','),function(KEY){\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){\n        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    if('size' in proto)$.setDesc(C.prototype, 'size', {\n      get: function(){\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n},{\"./$\":33,\"./$.descriptors\":14,\"./$.export\":16,\"./$.fails\":17,\"./$.for-of\":18,\"./$.global\":19,\"./$.hide\":21,\"./$.is-object\":26,\"./$.redefine-all\":37,\"./$.set-to-string-tag\":42,\"./$.strict-new\":45}],11:[function(_dereq_,module,exports){\nvar core = module.exports = {version: '1.2.6'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef\n},{}],12:[function(_dereq_,module,exports){\n// optional / simple context binding\nvar aFunction = _dereq_('./$.a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};\n},{\"./$.a-function\":3}],13:[function(_dereq_,module,exports){\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n},{}],14:[function(_dereq_,module,exports){\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !_dereq_('./$.fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});\n},{\"./$.fails\":17}],15:[function(_dereq_,module,exports){\nvar isObject = _dereq_('./$.is-object')\n  , document = _dereq_('./$.global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};\n},{\"./$.global\":19,\"./$.is-object\":26}],16:[function(_dereq_,module,exports){\nvar global    = _dereq_('./$.global')\n  , core      = _dereq_('./$.core')\n  , ctx       = _dereq_('./$.ctx')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && key in target;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(param){\n        return this instanceof C ? new C(param) : C(param);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\n  }\n};\n// type bitmap\n$export.F = 1;  // forced\n$export.G = 2;  // global\n$export.S = 4;  // static\n$export.P = 8;  // proto\n$export.B = 16; // bind\n$export.W = 32; // wrap\nmodule.exports = $export;\n},{\"./$.core\":11,\"./$.ctx\":12,\"./$.global\":19}],17:[function(_dereq_,module,exports){\nmodule.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};\n},{}],18:[function(_dereq_,module,exports){\nvar ctx         = _dereq_('./$.ctx')\n  , call        = _dereq_('./$.iter-call')\n  , isArrayIter = _dereq_('./$.is-array-iter')\n  , anObject    = _dereq_('./$.an-object')\n  , toLength    = _dereq_('./$.to-length')\n  , getIterFn   = _dereq_('./core.get-iterator-method');\nmodule.exports = function(iterable, entries, fn, that){\n  var iterFn = getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    call(iterator, f, step.value, entries);\n  }\n};\n},{\"./$.an-object\":5,\"./$.ctx\":12,\"./$.is-array-iter\":25,\"./$.iter-call\":27,\"./$.to-length\":50,\"./core.get-iterator-method\":53}],19:[function(_dereq_,module,exports){\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef\n},{}],20:[function(_dereq_,module,exports){\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};\n},{}],21:[function(_dereq_,module,exports){\nvar $          = _dereq_('./$')\n  , createDesc = _dereq_('./$.property-desc');\nmodule.exports = _dereq_('./$.descriptors') ? function(object, key, value){\n  return $.setDesc(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};\n},{\"./$\":33,\"./$.descriptors\":14,\"./$.property-desc\":36}],22:[function(_dereq_,module,exports){\nmodule.exports = _dereq_('./$.global').document && document.documentElement;\n},{\"./$.global\":19}],23:[function(_dereq_,module,exports){\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};\n},{}],24:[function(_dereq_,module,exports){\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = _dereq_('./$.cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n},{\"./$.cof\":7}],25:[function(_dereq_,module,exports){\n// check on default Array iterator\nvar Iterators  = _dereq_('./$.iterators')\n  , ITERATOR   = _dereq_('./$.wks')('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n},{\"./$.iterators\":32,\"./$.wks\":52}],26:[function(_dereq_,module,exports){\nmodule.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n},{}],27:[function(_dereq_,module,exports){\n// call something on iterator step with safe closing on error\nvar anObject = _dereq_('./$.an-object');\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};\n},{\"./$.an-object\":5}],28:[function(_dereq_,module,exports){\n'use strict';\nvar $              = _dereq_('./$')\n  , descriptor     = _dereq_('./$.property-desc')\n  , setToStringTag = _dereq_('./$.set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_dereq_('./$.hide')(IteratorPrototype, _dereq_('./$.wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n},{\"./$\":33,\"./$.hide\":21,\"./$.property-desc\":36,\"./$.set-to-string-tag\":42,\"./$.wks\":52}],29:[function(_dereq_,module,exports){\n'use strict';\nvar LIBRARY        = _dereq_('./$.library')\n  , $export        = _dereq_('./$.export')\n  , redefine       = _dereq_('./$.redefine')\n  , hide           = _dereq_('./$.hide')\n  , has            = _dereq_('./$.has')\n  , Iterators      = _dereq_('./$.iterators')\n  , $iterCreate    = _dereq_('./$.iter-create')\n  , setToStringTag = _dereq_('./$.set-to-string-tag')\n  , getProto       = _dereq_('./$').getProto\n  , ITERATOR       = _dereq_('./$.wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , methods, key;\n  // Fix native\n  if($native){\n    var IteratorPrototype = getProto($default.call(new Base));\n    // Set @@toStringTag to native iterators\n    setToStringTag(IteratorPrototype, TAG, true);\n    // FF fix\n    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    // fix Array#{values, @@iterator}.name in V8 / FF\n    if(DEF_VALUES && $native.name !== VALUES){\n      VALUES_BUG = true;\n      $default = function values(){ return $native.call(this); };\n    }\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES  ? $default : getMethod(VALUES),\n      keys:    IS_SET      ? $default : getMethod(KEYS),\n      entries: !DEF_VALUES ? $default : getMethod('entries')\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n},{\"./$\":33,\"./$.export\":16,\"./$.has\":20,\"./$.hide\":21,\"./$.iter-create\":28,\"./$.iterators\":32,\"./$.library\":34,\"./$.redefine\":38,\"./$.set-to-string-tag\":42,\"./$.wks\":52}],30:[function(_dereq_,module,exports){\nvar ITERATOR     = _dereq_('./$.wks')('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ safe = true; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};\n},{\"./$.wks\":52}],31:[function(_dereq_,module,exports){\nmodule.exports = function(done, value){\n  return {value: value, done: !!done};\n};\n},{}],32:[function(_dereq_,module,exports){\nmodule.exports = {};\n},{}],33:[function(_dereq_,module,exports){\nvar $Object = Object;\nmodule.exports = {\n  create:     $Object.create,\n  getProto:   $Object.getPrototypeOf,\n  isEnum:     {}.propertyIsEnumerable,\n  getDesc:    $Object.getOwnPropertyDescriptor,\n  setDesc:    $Object.defineProperty,\n  setDescs:   $Object.defineProperties,\n  getKeys:    $Object.keys,\n  getNames:   $Object.getOwnPropertyNames,\n  getSymbols: $Object.getOwnPropertySymbols,\n  each:       [].forEach\n};\n},{}],34:[function(_dereq_,module,exports){\nmodule.exports = true;\n},{}],35:[function(_dereq_,module,exports){\nvar global    = _dereq_('./$.global')\n  , macrotask = _dereq_('./$.task').set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = _dereq_('./$.cof')(process) == 'process'\n  , head, last, notify;\n\nvar flush = function(){\n  var parent, domain, fn;\n  if(isNode && (parent = process.domain)){\n    process.domain = null;\n    parent.exit();\n  }\n  while(head){\n    domain = head.domain;\n    fn     = head.fn;\n    if(domain)domain.enter();\n    fn(); // <- currently we use it only for Promise - try / catch not required\n    if(domain)domain.exit();\n    head = head.next;\n  } last = undefined;\n  if(parent)parent.enter();\n};\n\n// Node.js\nif(isNode){\n  notify = function(){\n    process.nextTick(flush);\n  };\n// browsers with MutationObserver\n} else if(Observer){\n  var toggle = 1\n    , node   = document.createTextNode('');\n  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n  notify = function(){\n    node.data = toggle = -toggle;\n  };\n// environments with maybe non-completely correct, but existent Promise\n} else if(Promise && Promise.resolve){\n  notify = function(){\n    Promise.resolve().then(flush);\n  };\n// for other environments - macrotask based on:\n// - setImmediate\n// - MessageChannel\n// - window.postMessag\n// - onreadystatechange\n// - setTimeout\n} else {\n  notify = function(){\n    // strange IE + webpack dev server bug - use .call(global)\n    macrotask.call(global, flush);\n  };\n}\n\nmodule.exports = function asap(fn){\n  var task = {fn: fn, next: undefined, domain: isNode && process.domain};\n  if(last)last.next = task;\n  if(!head){\n    head = task;\n    notify();\n  } last = task;\n};\n},{\"./$.cof\":7,\"./$.global\":19,\"./$.task\":47}],36:[function(_dereq_,module,exports){\nmodule.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};\n},{}],37:[function(_dereq_,module,exports){\nvar redefine = _dereq_('./$.redefine');\nmodule.exports = function(target, src){\n  for(var key in src)redefine(target, key, src[key]);\n  return target;\n};\n},{\"./$.redefine\":38}],38:[function(_dereq_,module,exports){\nmodule.exports = _dereq_('./$.hide');\n},{\"./$.hide\":21}],39:[function(_dereq_,module,exports){\n// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y){\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n},{}],40:[function(_dereq_,module,exports){\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar getDesc  = _dereq_('./$').getDesc\n  , isObject = _dereq_('./$.is-object')\n  , anObject = _dereq_('./$.an-object');\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = _dereq_('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n},{\"./$\":33,\"./$.an-object\":5,\"./$.ctx\":12,\"./$.is-object\":26}],41:[function(_dereq_,module,exports){\n'use strict';\nvar core        = _dereq_('./$.core')\n  , $           = _dereq_('./$')\n  , DESCRIPTORS = _dereq_('./$.descriptors')\n  , SPECIES     = _dereq_('./$.wks')('species');\n\nmodule.exports = function(KEY){\n  var C = core[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};\n},{\"./$\":33,\"./$.core\":11,\"./$.descriptors\":14,\"./$.wks\":52}],42:[function(_dereq_,module,exports){\nvar def = _dereq_('./$').setDesc\n  , has = _dereq_('./$.has')\n  , TAG = _dereq_('./$.wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};\n},{\"./$\":33,\"./$.has\":20,\"./$.wks\":52}],43:[function(_dereq_,module,exports){\nvar global = _dereq_('./$.global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};\n},{\"./$.global\":19}],44:[function(_dereq_,module,exports){\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = _dereq_('./$.an-object')\n  , aFunction = _dereq_('./$.a-function')\n  , SPECIES   = _dereq_('./$.wks')('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n},{\"./$.a-function\":3,\"./$.an-object\":5,\"./$.wks\":52}],45:[function(_dereq_,module,exports){\nmodule.exports = function(it, Constructor, name){\n  if(!(it instanceof Constructor))throw TypeError(name + \": use the 'new' operator!\");\n  return it;\n};\n},{}],46:[function(_dereq_,module,exports){\nvar toInteger = _dereq_('./$.to-integer')\n  , defined   = _dereq_('./$.defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n},{\"./$.defined\":13,\"./$.to-integer\":48}],47:[function(_dereq_,module,exports){\nvar ctx                = _dereq_('./$.ctx')\n  , invoke             = _dereq_('./$.invoke')\n  , html               = _dereq_('./$.html')\n  , cel                = _dereq_('./$.dom-create')\n  , global             = _dereq_('./$.global')\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listner = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(_dereq_('./$.cof')(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listner;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listner, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};\n},{\"./$.cof\":7,\"./$.ctx\":12,\"./$.dom-create\":15,\"./$.global\":19,\"./$.html\":22,\"./$.invoke\":23}],48:[function(_dereq_,module,exports){\n// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n},{}],49:[function(_dereq_,module,exports){\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = _dereq_('./$.iobject')\n  , defined = _dereq_('./$.defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};\n},{\"./$.defined\":13,\"./$.iobject\":24}],50:[function(_dereq_,module,exports){\n// 7.1.15 ToLength\nvar toInteger = _dereq_('./$.to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n},{\"./$.to-integer\":48}],51:[function(_dereq_,module,exports){\nvar id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n},{}],52:[function(_dereq_,module,exports){\nvar store  = _dereq_('./$.shared')('wks')\n  , uid    = _dereq_('./$.uid')\n  , Symbol = _dereq_('./$.global').Symbol;\nmodule.exports = function(name){\n  return store[name] || (store[name] =\n    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));\n};\n},{\"./$.global\":19,\"./$.shared\":43,\"./$.uid\":51}],53:[function(_dereq_,module,exports){\nvar classof   = _dereq_('./$.classof')\n  , ITERATOR  = _dereq_('./$.wks')('iterator')\n  , Iterators = _dereq_('./$.iterators');\nmodule.exports = _dereq_('./$.core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n},{\"./$.classof\":6,\"./$.core\":11,\"./$.iterators\":32,\"./$.wks\":52}],54:[function(_dereq_,module,exports){\n'use strict';\nvar addToUnscopables = _dereq_('./$.add-to-unscopables')\n  , step             = _dereq_('./$.iter-step')\n  , Iterators        = _dereq_('./$.iterators')\n  , toIObject        = _dereq_('./$.to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = _dereq_('./$.iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n},{\"./$.add-to-unscopables\":4,\"./$.iter-define\":29,\"./$.iter-step\":31,\"./$.iterators\":32,\"./$.to-iobject\":49}],55:[function(_dereq_,module,exports){\n'use strict';\nvar strong = _dereq_('./$.collection-strong');\n\n// 23.1 Map Objects\n_dereq_('./$.collection')('Map', function(get){\n  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key){\n    var entry = strong.getEntry(this, key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value){\n    return strong.def(this, key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n},{\"./$.collection\":10,\"./$.collection-strong\":8}],56:[function(_dereq_,module,exports){\n\n},{}],57:[function(_dereq_,module,exports){\n'use strict';\nvar $          = _dereq_('./$')\n  , LIBRARY    = _dereq_('./$.library')\n  , global     = _dereq_('./$.global')\n  , ctx        = _dereq_('./$.ctx')\n  , classof    = _dereq_('./$.classof')\n  , $export    = _dereq_('./$.export')\n  , isObject   = _dereq_('./$.is-object')\n  , anObject   = _dereq_('./$.an-object')\n  , aFunction  = _dereq_('./$.a-function')\n  , strictNew  = _dereq_('./$.strict-new')\n  , forOf      = _dereq_('./$.for-of')\n  , setProto   = _dereq_('./$.set-proto').set\n  , same       = _dereq_('./$.same-value')\n  , SPECIES    = _dereq_('./$.wks')('species')\n  , speciesConstructor = _dereq_('./$.species-constructor')\n  , asap       = _dereq_('./$.microtask')\n  , PROMISE    = 'Promise'\n  , process    = global.process\n  , isNode     = classof(process) == 'process'\n  , P          = global[PROMISE]\n  , Wrapper;\n\nvar testResolve = function(sub){\n  var test = new P(function(){});\n  if(sub)test.constructor = Object;\n  return P.resolve(test) === test;\n};\n\nvar USE_NATIVE = function(){\n  var works = false;\n  function P2(x){\n    var self = new P(x);\n    setProto(self, P2.prototype);\n    return self;\n  }\n  try {\n    works = P && P.resolve && testResolve();\n    setProto(P2, P);\n    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});\n    // actual Firefox has broken subclass support, test that\n    if(!(P2.resolve(5).then(function(){}) instanceof P2)){\n      works = false;\n    }\n    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162\n    if(works && _dereq_('./$.descriptors')){\n      var thenableThenGotten = false;\n      P.resolve($.setDesc({}, 'then', {\n        get: function(){ thenableThenGotten = true; }\n      }));\n      works = thenableThenGotten;\n    }\n  } catch(e){ works = false; }\n  return works;\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // library wrapper special case\n  if(LIBRARY && a === P && b === Wrapper)return true;\n  return same(a, b);\n};\nvar getConstructor = function(C){\n  var S = anObject(C)[SPECIES];\n  return S != undefined ? S : C;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar PromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve),\n  this.reject  = aFunction(reject)\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(record, isReject){\n  if(record.n)return;\n  record.n = true;\n  var chain = record.c;\n  asap(function(){\n    var value = record.v\n      , ok    = record.s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , result, then;\n      try {\n        if(handler){\n          if(!ok)record.h = true;\n          result = handler === true ? value : handler(value);\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    chain.length = 0;\n    record.n = false;\n    if(isReject)setTimeout(function(){\n      var promise = record.p\n        , handler, console;\n      if(isUnhandled(promise)){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      } record.a = undefined;\n    }, 1);\n  });\n};\nvar isUnhandled = function(promise){\n  var record = promise._d\n    , chain  = record.a || record.c\n    , i      = 0\n    , reaction;\n  if(record.h)return false;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar $reject = function(value){\n  var record = this;\n  if(record.d)return;\n  record.d = true;\n  record = record.r || record; // unwrap\n  record.v = value;\n  record.s = 2;\n  record.a = record.c.slice();\n  notify(record, true);\n};\nvar $resolve = function(value){\n  var record = this\n    , then;\n  if(record.d)return;\n  record.d = true;\n  record = record.r || record; // unwrap\n  try {\n    if(record.p === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      asap(function(){\n        var wrapper = {r: record, d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      record.v = value;\n      record.s = 1;\n      notify(record, false);\n    }\n  } catch(e){\n    $reject.call({r: record, d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  P = function Promise(executor){\n    aFunction(executor);\n    var record = this._d = {\n      p: strictNew(this, P, PROMISE),         // <- promise\n      c: [],                                  // <- awaiting reactions\n      a: undefined,                           // <- checked in isUnhandled reactions\n      s: 0,                                   // <- state\n      d: false,                               // <- done\n      v: undefined,                           // <- value\n      h: false,                               // <- handled rejection\n      n: false                                // <- notify\n    };\n    try {\n      executor(ctx($resolve, record, 1), ctx($reject, record, 1));\n    } catch(err){\n      $reject.call(record, err);\n    }\n  };\n  _dereq_('./$.redefine-all')(P.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction = new PromiseCapability(speciesConstructor(this, P))\n        , promise  = reaction.promise\n        , record   = this._d;\n      reaction.ok   = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      record.c.push(reaction);\n      if(record.a)record.a.push(reaction);\n      if(record.s)notify(record, false);\n      return promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: P});\n_dereq_('./$.set-to-string-tag')(P, PROMISE);\n_dereq_('./$.set-species')(PROMISE);\nWrapper = _dereq_('./$.core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = new PromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof P && sameConstructor(x.constructor, this))return x;\n    var capability = new PromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && _dereq_('./$.iter-detect')(function(iter){\n  P.all(iter)['catch'](function(){});\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = getConstructor(this)\n      , capability = new PromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject\n      , values     = [];\n    var abrupt = perform(function(){\n      forOf(iterable, false, values.push, values);\n      var remaining = values.length\n        , results   = Array(remaining);\n      if(remaining)$.each.call(values, function(promise, index){\n        var alreadyCalled = false;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled = true;\n          results[index] = value;\n          --remaining || resolve(results);\n        }, reject);\n      });\n      else resolve(results);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = getConstructor(this)\n      , capability = new PromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});\n},{\"./$\":33,\"./$.a-function\":3,\"./$.an-object\":5,\"./$.classof\":6,\"./$.core\":11,\"./$.ctx\":12,\"./$.descriptors\":14,\"./$.export\":16,\"./$.for-of\":18,\"./$.global\":19,\"./$.is-object\":26,\"./$.iter-detect\":30,\"./$.library\":34,\"./$.microtask\":35,\"./$.redefine-all\":37,\"./$.same-value\":39,\"./$.set-proto\":40,\"./$.set-species\":41,\"./$.set-to-string-tag\":42,\"./$.species-constructor\":44,\"./$.strict-new\":45,\"./$.wks\":52}],58:[function(_dereq_,module,exports){\n'use strict';\nvar $at  = _dereq_('./$.string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_dereq_('./$.iter-define')(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});\n},{\"./$.iter-define\":29,\"./$.string-at\":46}],59:[function(_dereq_,module,exports){\n// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export  = _dereq_('./$.export');\n\n$export($export.P, 'Map', {toJSON: _dereq_('./$.collection-to-json')('Map')});\n},{\"./$.collection-to-json\":9,\"./$.export\":16}],60:[function(_dereq_,module,exports){\n_dereq_('./es6.array.iterator');\nvar Iterators = _dereq_('./$.iterators');\nIterators.NodeList = Iterators.HTMLCollection = Iterators.Array;\n},{\"./$.iterators\":32,\"./es6.array.iterator\":54}],61:[function(_dereq_,module,exports){\nvar opendolphin;\n(function (opendolphin) {\n    var Attribute = (function () {\n        function Attribute() {\n        }\n        Attribute.QUALIFIER_PROPERTY = \"qualifier\";\n        Attribute.DIRTY_PROPERTY = \"dirty\";\n        Attribute.BASE_VALUE = \"baseValue\";\n        Attribute.VALUE = \"value\";\n        Attribute.TAG = \"tag\";\n        return Attribute;\n    })();\n    opendolphin.Attribute = Attribute;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Command = (function () {\n        function Command() {\n            this.id = \"dolphin-core-command\";\n        }\n        return Command;\n    })();\n    opendolphin.Command = Command;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Tag = (function () {\n        function Tag() {\n        }\n        //Implemented as function so that it will never be changed from outside\n        /** The actual value of the attribute. This is the default if no tag is given.*/\n        Tag.value = function () {\n            return \"VALUE\";\n        };\n        /** the to-be-displayed String, not the key. I18N happens on the server. */\n        Tag.label = function () {\n            return \"LABEL\";\n        };\n        /** If the attribute represent tooltip**/\n        Tag.tooltip = function () {\n            return \"TOOLTIP\";\n        };\n        /** \"true\" or \"false\", maps to Grails constraint nullable:false */\n        Tag.mandatory = function () {\n            return \"MANDATORY\";\n        };\n        /** \"true\" or \"false\", maps to Grails constraint display:true */\n        Tag.visible = function () {\n            return \"VISIBLE\";\n        };\n        /** \"true\" or \"false\" */\n        Tag.enabled = function () {\n            return \"ENABLED\";\n        };\n        /** regular expression for local, syntactical constraints like in \"rejectField\" */\n        Tag.regex = function () {\n            return \"REGEX\";\n        };\n        /** a single text; e.g. \"textArea\" if the String value should be displayed in a text area instead of a textField */\n        Tag.widgetHint = function () {\n            return \"WIDGET_HINT\";\n        };\n        /** a single text; e.g. \"java.util.Date\" if the value String represents a date */\n        Tag.valueType = function () {\n            return \"VALUE_TYPE\";\n        };\n        return Tag;\n    })();\n    opendolphin.Tag = Tag;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar opendolphin;\n(function (opendolphin) {\n    var AttributeCreatedNotification = (function (_super) {\n        __extends(AttributeCreatedNotification, _super);\n        function AttributeCreatedNotification(pmId, attributeId, propertyName, newValue, qualifier, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            _super.call(this);\n            this.pmId = pmId;\n            this.attributeId = attributeId;\n            this.propertyName = propertyName;\n            this.newValue = newValue;\n            this.qualifier = qualifier;\n            this.tag = tag;\n            this.id = 'AttributeCreated';\n            this.className = \"org.opendolphin.core.comm.AttributeCreatedNotification\";\n        }\n        return AttributeCreatedNotification;\n    })(opendolphin.Command);\n    opendolphin.AttributeCreatedNotification = AttributeCreatedNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var AttributeMetadataChangedCommand = (function (_super) {\n        __extends(AttributeMetadataChangedCommand, _super);\n        function AttributeMetadataChangedCommand(attributeId, metadataName, value) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.metadataName = metadataName;\n            this.value = value;\n            this.id = 'AttributeMetadataChanged';\n            this.className = \"org.opendolphin.core.comm.AttributeMetadataChangedCommand\";\n        }\n        return AttributeMetadataChangedCommand;\n    })(opendolphin.Command);\n    opendolphin.AttributeMetadataChangedCommand = AttributeMetadataChangedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var BaseValueChangedCommand = (function (_super) {\n        __extends(BaseValueChangedCommand, _super);\n        function BaseValueChangedCommand(attributeId) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.id = 'BaseValueChanged';\n            this.className = \"org.opendolphin.core.comm.BaseValueChangedCommand\";\n        }\n        return BaseValueChangedCommand;\n    })(opendolphin.Command);\n    opendolphin.BaseValueChangedCommand = BaseValueChangedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var CallNamedActionCommand = (function (_super) {\n        __extends(CallNamedActionCommand, _super);\n        function CallNamedActionCommand(actionName) {\n            _super.call(this);\n            this.actionName = actionName;\n            this.id = 'CallNamedAction';\n            this.className = \"org.opendolphin.core.comm.CallNamedActionCommand\";\n        }\n        return CallNamedActionCommand;\n    })(opendolphin.Command);\n    opendolphin.CallNamedActionCommand = CallNamedActionCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ChangeAttributeMetadataCommand = (function (_super) {\n        __extends(ChangeAttributeMetadataCommand, _super);\n        function ChangeAttributeMetadataCommand(attributeId, metadataName, value) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.metadataName = metadataName;\n            this.value = value;\n            this.id = 'ChangeAttributeMetadata';\n            this.className = \"org.opendolphin.core.comm.ChangeAttributeMetadataCommand\";\n        }\n        return ChangeAttributeMetadataCommand;\n    })(opendolphin.Command);\n    opendolphin.ChangeAttributeMetadataCommand = ChangeAttributeMetadataCommand;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var EventBus = (function () {\n        function EventBus() {\n            this.eventHandlers = [];\n        }\n        EventBus.prototype.onEvent = function (eventHandler) {\n            this.eventHandlers.push(eventHandler);\n        };\n        EventBus.prototype.trigger = function (event) {\n            this.eventHandlers.forEach(function (handle) { return handle(event); });\n        };\n        return EventBus;\n    })();\n    opendolphin.EventBus = EventBus;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"EventBus.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var presentationModelInstanceCount = 0; // todo dk: consider making this static in class\n    var ClientPresentationModel = (function () {\n        function ClientPresentationModel(id, presentationModelType) {\n            this.id = id;\n            this.presentationModelType = presentationModelType;\n            this.attributes = [];\n            this.clientSideOnly = false;\n            this.dirty = false;\n            if (typeof id !== 'undefined' && id != null) {\n                this.id = id;\n            }\n            else {\n                this.id = (presentationModelInstanceCount++).toString();\n            }\n            this.invalidBus = new opendolphin.EventBus();\n            this.dirtyValueChangeBus = new opendolphin.EventBus();\n        }\n        // todo dk: align with Java version: move to ClientDolphin and auto-add to model store\n        /** a copy constructor for anything but IDs. Per default, copies are client side only, no automatic update applies. */\n        ClientPresentationModel.prototype.copy = function () {\n            var result = new ClientPresentationModel(null, this.presentationModelType);\n            result.clientSideOnly = true;\n            this.getAttributes().forEach(function (attribute) {\n                var attributeCopy = attribute.copy();\n                result.addAttribute(attributeCopy);\n            });\n            return result;\n        };\n        //add array of attributes\n        ClientPresentationModel.prototype.addAttributes = function (attributes) {\n            var _this = this;\n            if (!attributes || attributes.length < 1)\n                return;\n            attributes.forEach(function (attr) {\n                _this.addAttribute(attr);\n            });\n        };\n        ClientPresentationModel.prototype.addAttribute = function (attribute) {\n            var _this = this;\n            if (!attribute || (this.attributes.indexOf(attribute) > -1)) {\n                return;\n            }\n            if (this.findAttributeByPropertyNameAndTag(attribute.propertyName, attribute.tag)) {\n                throw new Error(\"There already is an attribute with property name: \" + attribute.propertyName\n                    + \" and tag: \" + attribute.tag + \" in presentation model with id: \" + this.id);\n            }\n            if (attribute.getQualifier() && this.findAttributeByQualifier(attribute.getQualifier())) {\n                throw new Error(\"There already is an attribute with qualifier: \" + attribute.getQualifier()\n                    + \" in presentation model with id: \" + this.id);\n            }\n            attribute.setPresentationModel(this);\n            this.attributes.push(attribute);\n            if (attribute.tag == opendolphin.Tag.value()) {\n                this.updateDirty();\n            }\n            attribute.onValueChange(function (evt) {\n                _this.invalidBus.trigger({ source: _this });\n            });\n        };\n        ClientPresentationModel.prototype.updateDirty = function () {\n            for (var i = 0; i < this.attributes.length; i++) {\n                if (this.attributes[i].isDirty()) {\n                    this.setDirty(true);\n                    return;\n                }\n            }\n            ;\n            this.setDirty(false);\n        };\n        ClientPresentationModel.prototype.updateAttributeDirtyness = function () {\n            for (var i = 0; i < this.attributes.length; i++) {\n                this.attributes[i].updateDirty();\n            }\n        };\n        ClientPresentationModel.prototype.isDirty = function () {\n            return this.dirty;\n        };\n        ClientPresentationModel.prototype.setDirty = function (dirty) {\n            var oldVal = this.dirty;\n            this.dirty = dirty;\n            this.dirtyValueChangeBus.trigger({ 'oldValue': oldVal, 'newValue': this.dirty });\n        };\n        ClientPresentationModel.prototype.reset = function () {\n            this.attributes.forEach(function (attribute) {\n                attribute.reset();\n            });\n        };\n        ClientPresentationModel.prototype.rebase = function () {\n            this.attributes.forEach(function (attribute) {\n                attribute.rebase();\n            });\n        };\n        ClientPresentationModel.prototype.onDirty = function (eventHandler) {\n            this.dirtyValueChangeBus.onEvent(eventHandler);\n        };\n        ClientPresentationModel.prototype.onInvalidated = function (handleInvalidate) {\n            this.invalidBus.onEvent(handleInvalidate);\n        };\n        /** returns a copy of the internal state */\n        ClientPresentationModel.prototype.getAttributes = function () {\n            return this.attributes.slice(0);\n        };\n        ClientPresentationModel.prototype.getAt = function (propertyName, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            return this.findAttributeByPropertyNameAndTag(propertyName, tag);\n        };\n        ClientPresentationModel.prototype.findAttributeByPropertyName = function (propertyName) {\n            return this.findAttributeByPropertyNameAndTag(propertyName, opendolphin.Tag.value());\n        };\n        ClientPresentationModel.prototype.findAllAttributesByPropertyName = function (propertyName) {\n            var result = [];\n            if (!propertyName)\n                return null;\n            this.attributes.forEach(function (attribute) {\n                if (attribute.propertyName == propertyName) {\n                    result.push(attribute);\n                }\n            });\n            return result;\n        };\n        ClientPresentationModel.prototype.findAttributeByPropertyNameAndTag = function (propertyName, tag) {\n            if (!propertyName || !tag)\n                return null;\n            for (var i = 0; i < this.attributes.length; i++) {\n                if ((this.attributes[i].propertyName == propertyName) && (this.attributes[i].tag == tag)) {\n                    return this.attributes[i];\n                }\n            }\n            return null;\n        };\n        ClientPresentationModel.prototype.findAttributeByQualifier = function (qualifier) {\n            if (!qualifier)\n                return null;\n            for (var i = 0; i < this.attributes.length; i++) {\n                if (this.attributes[i].getQualifier() == qualifier) {\n                    return this.attributes[i];\n                }\n            }\n            ;\n            return null;\n        };\n        ClientPresentationModel.prototype.findAttributeById = function (id) {\n            if (!id)\n                return null;\n            for (var i = 0; i < this.attributes.length; i++) {\n                if (this.attributes[i].id == id) {\n                    return this.attributes[i];\n                }\n            }\n            ;\n            return null;\n        };\n        ClientPresentationModel.prototype.syncWith = function (sourcePresentationModel) {\n            this.attributes.forEach(function (targetAttribute) {\n                var sourceAttribute = sourcePresentationModel.getAt(targetAttribute.propertyName, targetAttribute.tag);\n                if (sourceAttribute) {\n                    targetAttribute.syncWith(sourceAttribute);\n                }\n            });\n        };\n        return ClientPresentationModel;\n    })();\n    opendolphin.ClientPresentationModel = ClientPresentationModel;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"EventBus.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ClientAttribute = (function () {\n        function ClientAttribute(propertyName, qualifier, value, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            this.propertyName = propertyName;\n            this.tag = tag;\n            this.dirty = false;\n            this.id = \"\" + (ClientAttribute.clientAttributeInstanceCount++) + \"C\";\n            this.valueChangeBus = new opendolphin.EventBus();\n            this.qualifierChangeBus = new opendolphin.EventBus();\n            this.dirtyValueChangeBus = new opendolphin.EventBus();\n            this.baseValueChangeBus = new opendolphin.EventBus();\n            this.setValue(value);\n            this.setBaseValue(value);\n            this.setQualifier(qualifier);\n        }\n        /** a copy constructor with new id and no presentation model */\n        ClientAttribute.prototype.copy = function () {\n            var result = new ClientAttribute(this.propertyName, this.getQualifier(), this.getValue(), this.tag);\n            result.setBaseValue(this.getBaseValue());\n            return result;\n        };\n        ClientAttribute.prototype.isDirty = function () {\n            return this.dirty;\n        };\n        ClientAttribute.prototype.getBaseValue = function () {\n            return this.baseValue;\n        };\n        ClientAttribute.prototype.setPresentationModel = function (presentationModel) {\n            if (this.presentationModel) {\n                alert(\"You can not set a presentation model for an attribute that is already bound.\");\n            }\n            this.presentationModel = presentationModel;\n        };\n        ClientAttribute.prototype.getPresentationModel = function () {\n            return this.presentationModel;\n        };\n        ClientAttribute.prototype.getValue = function () {\n            return this.value;\n        };\n        ClientAttribute.prototype.setValue = function (newValue) {\n            var verifiedValue = ClientAttribute.checkValue(newValue);\n            if (this.value == verifiedValue)\n                return;\n            var oldValue = this.value;\n            this.value = verifiedValue;\n            this.setDirty(this.calculateDirty(this.baseValue, verifiedValue));\n            this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue });\n        };\n        ClientAttribute.prototype.calculateDirty = function (baseValue, value) {\n            if (baseValue == null) {\n                return value != null;\n            }\n            else {\n                return baseValue != value;\n            }\n        };\n        ClientAttribute.prototype.updateDirty = function () {\n            this.setDirty(this.calculateDirty(this.baseValue, this.value));\n        };\n        ClientAttribute.prototype.setDirty = function (dirty) {\n            var oldVal = this.dirty;\n            this.dirty = dirty;\n            this.dirtyValueChangeBus.trigger({ 'oldValue': oldVal, 'newValue': this.dirty });\n            if (this.presentationModel)\n                this.presentationModel.updateDirty();\n        };\n        ClientAttribute.prototype.setQualifier = function (newQualifier) {\n            if (this.qualifier == newQualifier)\n                return;\n            var oldQualifier = this.qualifier;\n            this.qualifier = newQualifier;\n            this.qualifierChangeBus.trigger({ 'oldValue': oldQualifier, 'newValue': newQualifier });\n        };\n        ClientAttribute.prototype.getQualifier = function () {\n            return this.qualifier;\n        };\n        ClientAttribute.prototype.setBaseValue = function (baseValue) {\n            if (this.baseValue == baseValue)\n                return;\n            var oldBaseValue = this.baseValue;\n            this.baseValue = baseValue;\n            this.setDirty(this.calculateDirty(baseValue, this.value));\n            this.baseValueChangeBus.trigger({ 'oldValue': oldBaseValue, 'newValue': baseValue });\n        };\n        ClientAttribute.prototype.rebase = function () {\n            this.setBaseValue(this.value);\n            this.setDirty(false); // this is not superfluous!\n        };\n        ClientAttribute.prototype.reset = function () {\n            this.setValue(this.baseValue);\n            this.setDirty(false); // this is not superfluous!\n        };\n        ClientAttribute.checkValue = function (value) {\n            if (value == null || value == undefined) {\n                return null;\n            }\n            var result = value;\n            if (result instanceof String || result instanceof Boolean || result instanceof Number) {\n                result = value.valueOf();\n            }\n            if (result instanceof ClientAttribute) {\n                console.log(\"An Attribute may not itself contain an attribute as a value. Assuming you forgot to call value.\");\n                result = this.checkValue(value.value);\n            }\n            var ok = false;\n            if (this.SUPPORTED_VALUE_TYPES.indexOf(typeof result) > -1 || result instanceof Date) {\n                ok = true;\n            }\n            if (!ok) {\n                throw new Error(\"Attribute values of this type are not allowed: \" + typeof value);\n            }\n            return result;\n        };\n        ClientAttribute.prototype.onValueChange = function (eventHandler) {\n            this.valueChangeBus.onEvent(eventHandler);\n            eventHandler({ \"oldValue\": this.value, \"newValue\": this.value });\n        };\n        ClientAttribute.prototype.onQualifierChange = function (eventHandler) {\n            this.qualifierChangeBus.onEvent(eventHandler);\n        };\n        ClientAttribute.prototype.onDirty = function (eventHandler) {\n            this.dirtyValueChangeBus.onEvent(eventHandler);\n        };\n        ClientAttribute.prototype.onBaseValueChange = function (eventHandler) {\n            this.baseValueChangeBus.onEvent(eventHandler);\n        };\n        ClientAttribute.prototype.syncWith = function (sourceAttribute) {\n            if (sourceAttribute) {\n                this.setQualifier(sourceAttribute.getQualifier()); // sequence is important\n                this.setBaseValue(sourceAttribute.getBaseValue());\n                this.setValue(sourceAttribute.value);\n            }\n        };\n        ClientAttribute.SUPPORTED_VALUE_TYPES = [\"string\", \"number\", \"boolean\"];\n        ClientAttribute.clientAttributeInstanceCount = 0;\n        return ClientAttribute;\n    })();\n    opendolphin.ClientAttribute = ClientAttribute;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var ValueChangedCommand = (function (_super) {\n        __extends(ValueChangedCommand, _super);\n        function ValueChangedCommand(attributeId, oldValue, newValue) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.oldValue = oldValue;\n            this.newValue = newValue;\n            this.id = \"ValueChanged\";\n            this.className = \"org.opendolphin.core.comm.ValueChangedCommand\";\n        }\n        return ValueChangedCommand;\n    })(opendolphin.Command);\n    opendolphin.ValueChangedCommand = ValueChangedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var NamedCommand = (function (_super) {\n        __extends(NamedCommand, _super);\n        function NamedCommand(name) {\n            _super.call(this);\n            this.id = name;\n            this.className = \"org.opendolphin.core.comm.NamedCommand\";\n        }\n        return NamedCommand;\n    })(opendolphin.Command);\n    opendolphin.NamedCommand = NamedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var EmptyNotification = (function (_super) {\n        __extends(EmptyNotification, _super);\n        function EmptyNotification() {\n            _super.call(this);\n            this.id = \"Empty\";\n            this.className = \"org.opendolphin.core.comm.EmptyNotification\";\n        }\n        return EmptyNotification;\n    })(opendolphin.Command);\n    opendolphin.EmptyNotification = EmptyNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"ValueChangedCommand.ts\"/>\n/// <reference path=\"NamedCommand.ts\"/>\n/// <reference path=\"EmptyNotification.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    /** A Batcher that does no batching but merely takes the first element of the queue as the single item in the batch */\n    var NoCommandBatcher = (function () {\n        function NoCommandBatcher() {\n        }\n        NoCommandBatcher.prototype.batch = function (queue) {\n            return [queue.shift()];\n        };\n        return NoCommandBatcher;\n    })();\n    opendolphin.NoCommandBatcher = NoCommandBatcher;\n    /** A batcher that batches the blinds (commands with no callback) and optionally also folds value changes */\n    var BlindCommandBatcher = (function () {\n        /** folding: whether we should try folding ValueChangedCommands */\n        function BlindCommandBatcher(folding, maxBatchSize) {\n            if (folding === void 0) { folding = true; }\n            if (maxBatchSize === void 0) { maxBatchSize = 50; }\n            this.folding = folding;\n            this.maxBatchSize = maxBatchSize;\n        }\n        BlindCommandBatcher.prototype.batch = function (queue) {\n            var result = [];\n            this.processNext(this.maxBatchSize, queue, result); // do not batch more than this.maxBatchSize commands to avoid stack overflow on recursion.\n            return result;\n        };\n        // recursive impl method to side-effect both queue and batch\n        BlindCommandBatcher.prototype.processNext = function (maxBatchSize, queue, batch) {\n            if (queue.length < 1 || maxBatchSize < 1)\n                return;\n            var candidate = queue.shift();\n            if (this.folding && candidate.command instanceof opendolphin.ValueChangedCommand && (!candidate.handler)) {\n                var found = null;\n                var canCmd = candidate.command;\n                for (var i = 0; i < batch.length && found == null; i++) {\n                    if (batch[i].command instanceof opendolphin.ValueChangedCommand) {\n                        var batchCmd = batch[i].command;\n                        if (canCmd.attributeId == batchCmd.attributeId && batchCmd.newValue == canCmd.oldValue) {\n                            found = batchCmd;\n                        }\n                    }\n                }\n                if (found) {\n                    found.newValue = canCmd.newValue; // change existing value, do not batch\n                }\n                else {\n                    batch.push(candidate); // we cannot merge, so batch the candidate\n                }\n            }\n            else {\n                batch.push(candidate);\n            }\n            if (!candidate.handler &&\n                !(candidate.command['className'] == \"org.opendolphin.core.comm.NamedCommand\") &&\n                !(candidate.command['className'] == \"org.opendolphin.core.comm.EmptyNotification\") // and no unknown client side effect\n            ) {\n                this.processNext(maxBatchSize - 1, queue, batch); // then we can proceed with batching\n            }\n        };\n        return BlindCommandBatcher;\n    })();\n    opendolphin.BlindCommandBatcher = BlindCommandBatcher;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Codec = (function () {\n        function Codec() {\n        }\n        Codec.prototype.encode = function (commands) {\n            return JSON.stringify(commands); // todo dk: look for possible API support for character encoding\n        };\n        Codec.prototype.decode = function (transmitted) {\n            if (typeof transmitted == 'string') {\n                return JSON.parse(transmitted);\n            }\n            else {\n                return transmitted;\n            }\n        };\n        return Codec;\n    })();\n    opendolphin.Codec = Codec;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var SignalCommand = (function (_super) {\n        __extends(SignalCommand, _super);\n        function SignalCommand(name) {\n            _super.call(this);\n            this.id = name;\n            this.className = \"org.opendolphin.core.comm.SignalCommand\";\n        }\n        return SignalCommand;\n    })(opendolphin.Command);\n    opendolphin.SignalCommand = SignalCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var CreatePresentationModelCommand = (function (_super) {\n        __extends(CreatePresentationModelCommand, _super);\n        function CreatePresentationModelCommand(presentationModel) {\n            _super.call(this);\n            this.attributes = [];\n            this.clientSideOnly = false;\n            this.id = \"CreatePresentationModel\";\n            this.className = \"org.opendolphin.core.comm.CreatePresentationModelCommand\";\n            this.pmId = presentationModel.id;\n            this.pmType = presentationModel.presentationModelType;\n            var attrs = this.attributes;\n            presentationModel.getAttributes().forEach(function (attr) {\n                attrs.push({\n                    propertyName: attr.propertyName,\n                    id: attr.id,\n                    qualifier: attr.getQualifier(),\n                    value: attr.getValue(),\n                    tag: attr.tag\n                });\n            });\n        }\n        return CreatePresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.CreatePresentationModelCommand = CreatePresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Map = (function () {\n        function Map() {\n            this.keys = [];\n            this.data = [];\n        }\n        Map.prototype.put = function (key, value) {\n            if (!this.containsKey(key)) {\n                this.keys.push(key);\n            }\n            this.data[this.keys.indexOf(key)] = value;\n        };\n        Map.prototype.get = function (key) {\n            return this.data[this.keys.indexOf(key)];\n        };\n        Map.prototype.remove = function (key) {\n            if (this.containsKey(key)) {\n                var index = this.keys.indexOf(key);\n                this.keys.splice(index, 1);\n                this.data.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        Map.prototype.isEmpty = function () {\n            return this.keys.length == 0;\n        };\n        Map.prototype.length = function () {\n            return this.keys.length;\n        };\n        Map.prototype.forEach = function (handler) {\n            for (var i = 0; i < this.keys.length; i++) {\n                handler(this.keys[i], this.data[i]);\n            }\n        };\n        Map.prototype.containsKey = function (key) {\n            return this.keys.indexOf(key) > -1;\n        };\n        Map.prototype.containsValue = function (value) {\n            return this.data.indexOf(value) > -1;\n        };\n        Map.prototype.values = function () {\n            return this.data.slice(0);\n        };\n        Map.prototype.keySet = function () {\n            return this.keys.slice(0);\n        };\n        return Map;\n    })();\n    opendolphin.Map = Map;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeletedAllPresentationModelsOfTypeNotification = (function (_super) {\n        __extends(DeletedAllPresentationModelsOfTypeNotification, _super);\n        function DeletedAllPresentationModelsOfTypeNotification(pmType) {\n            _super.call(this);\n            this.pmType = pmType;\n            this.id = 'DeletedAllPresentationModelsOfType';\n            this.className = \"org.opendolphin.core.comm.DeletedAllPresentationModelsOfTypeNotification\";\n        }\n        return DeletedAllPresentationModelsOfTypeNotification;\n    })(opendolphin.Command);\n    opendolphin.DeletedAllPresentationModelsOfTypeNotification = DeletedAllPresentationModelsOfTypeNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeletedPresentationModelNotification = (function (_super) {\n        __extends(DeletedPresentationModelNotification, _super);\n        function DeletedPresentationModelNotification(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'DeletedPresentationModel';\n            this.className = \"org.opendolphin.core.comm.DeletedPresentationModelNotification\";\n        }\n        return DeletedPresentationModelNotification;\n    })(opendolphin.Command);\n    opendolphin.DeletedPresentationModelNotification = DeletedPresentationModelNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\"/>\n/// <reference path=\"ClientDolphin.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"CreatePresentationModelCommand.ts\"/>\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"ValueChangedCommand.ts\"/>\n/// <reference path=\"ChangeAttributeMetadataCommand.ts\"/>\n/// <reference path=\"Attribute.ts\"/>\n/// <reference path=\"Map.ts\"/>\n/// <reference path=\"DeletedAllPresentationModelsOfTypeNotification.ts\"/>\n/// <reference path=\"EventBus.ts\"/>\n/// <reference path=\"ClientPresentationModel.ts\"/>\n/// <reference path=\"DeletedPresentationModelNotification.ts\"/>\n/// <reference path=\"BaseValueChangedCommand.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    (function (Type) {\n        Type[Type[\"ADDED\"] = 'ADDED'] = \"ADDED\";\n        Type[Type[\"REMOVED\"] = 'REMOVED'] = \"REMOVED\";\n    })(opendolphin.Type || (opendolphin.Type = {}));\n    var Type = opendolphin.Type;\n    var ClientModelStore = (function () {\n        function ClientModelStore(clientDolphin) {\n            this.clientDolphin = clientDolphin;\n            this.presentationModels = new opendolphin.Map();\n            this.presentationModelsPerType = new opendolphin.Map();\n            this.attributesPerId = new opendolphin.Map();\n            this.attributesPerQualifier = new opendolphin.Map();\n            this.modelStoreChangeBus = new opendolphin.EventBus();\n        }\n        ClientModelStore.prototype.getClientDolphin = function () {\n            return this.clientDolphin;\n        };\n        ClientModelStore.prototype.registerModel = function (model) {\n            var _this = this;\n            if (model.clientSideOnly) {\n                return;\n            }\n            var connector = this.clientDolphin.getClientConnector();\n            var createPMCommand = new opendolphin.CreatePresentationModelCommand(model);\n            connector.send(createPMCommand, null);\n            model.getAttributes().forEach(function (attribute) {\n                _this.registerAttribute(attribute);\n            });\n        };\n        ClientModelStore.prototype.registerAttribute = function (attribute) {\n            var _this = this;\n            this.addAttributeById(attribute);\n            if (attribute.getQualifier()) {\n                this.addAttributeByQualifier(attribute);\n            }\n            // whenever an attribute changes its value, the server needs to be notified\n            // and all other attributes with the same qualifier are given the same value\n            attribute.onValueChange(function (evt) {\n                var valueChangeCommand = new opendolphin.ValueChangedCommand(attribute.id, evt.oldValue, evt.newValue);\n                _this.clientDolphin.getClientConnector().send(valueChangeCommand, null);\n                if (attribute.getQualifier()) {\n                    var attrs = _this.findAttributesByFilter(function (attr) {\n                        return attr !== attribute && attr.getQualifier() == attribute.getQualifier();\n                    });\n                    attrs.forEach(function (attr) {\n                        attr.setValue(attribute.getValue());\n                    });\n                }\n            });\n            // all attributes with the same qualifier should have the same base value\n            attribute.onBaseValueChange(function (evt) {\n                var baseValueChangeCommand = new opendolphin.BaseValueChangedCommand(attribute.id);\n                _this.clientDolphin.getClientConnector().send(baseValueChangeCommand, null);\n                if (attribute.getQualifier()) {\n                    var attrs = _this.findAttributesByFilter(function (attr) {\n                        return attr !== attribute && attr.getQualifier() == attribute.getQualifier();\n                    });\n                    attrs.forEach(function (attr) {\n                        attr.setBaseValue(attribute.getBaseValue());\n                    });\n                }\n            });\n            attribute.onQualifierChange(function (evt) {\n                var changeAttrMetadataCmd = new opendolphin.ChangeAttributeMetadataCommand(attribute.id, opendolphin.Attribute.QUALIFIER_PROPERTY, evt.newValue);\n                _this.clientDolphin.getClientConnector().send(changeAttrMetadataCmd, null);\n            });\n        };\n        ClientModelStore.prototype.add = function (model) {\n            if (!model) {\n                return false;\n            }\n            if (this.presentationModels.containsKey(model.id)) {\n                console.log(\"There already is a PM with id \" + model.id);\n            }\n            var added = false;\n            if (!this.presentationModels.containsValue(model)) {\n                this.presentationModels.put(model.id, model);\n                this.addPresentationModelByType(model);\n                this.registerModel(model);\n                this.modelStoreChangeBus.trigger({ 'eventType': Type.ADDED, 'clientPresentationModel': model });\n                added = true;\n            }\n            return added;\n        };\n        ClientModelStore.prototype.remove = function (model) {\n            var _this = this;\n            if (!model) {\n                return false;\n            }\n            var removed = false;\n            if (this.presentationModels.containsValue(model)) {\n                this.removePresentationModelByType(model);\n                this.presentationModels.remove(model.id);\n                model.getAttributes().forEach(function (attribute) {\n                    _this.removeAttributeById(attribute);\n                    if (attribute.getQualifier()) {\n                        _this.removeAttributeByQualifier(attribute);\n                    }\n                });\n                this.modelStoreChangeBus.trigger({ 'eventType': Type.REMOVED, 'clientPresentationModel': model });\n                removed = true;\n            }\n            return removed;\n        };\n        ClientModelStore.prototype.findAttributesByFilter = function (filter) {\n            var matches = [];\n            this.presentationModels.forEach(function (key, model) {\n                model.getAttributes().forEach(function (attr) {\n                    if (filter(attr)) {\n                        matches.push(attr);\n                    }\n                });\n            });\n            return matches;\n        };\n        ClientModelStore.prototype.addPresentationModelByType = function (model) {\n            if (!model) {\n                return;\n            }\n            var type = model.presentationModelType;\n            if (!type) {\n                return;\n            }\n            var presentationModels = this.presentationModelsPerType.get(type);\n            if (!presentationModels) {\n                presentationModels = [];\n                this.presentationModelsPerType.put(type, presentationModels);\n            }\n            if (!(presentationModels.indexOf(model) > -1)) {\n                presentationModels.push(model);\n            }\n        };\n        ClientModelStore.prototype.removePresentationModelByType = function (model) {\n            if (!model || !(model.presentationModelType)) {\n                return;\n            }\n            var presentationModels = this.presentationModelsPerType.get(model.presentationModelType);\n            if (!presentationModels) {\n                return;\n            }\n            if (presentationModels.length > -1) {\n                presentationModels.splice(presentationModels.indexOf(model), 1);\n            }\n            if (presentationModels.length === 0) {\n                this.presentationModelsPerType.remove(model.presentationModelType);\n            }\n        };\n        ClientModelStore.prototype.listPresentationModelIds = function () {\n            return this.presentationModels.keySet().slice(0);\n        };\n        ClientModelStore.prototype.listPresentationModels = function () {\n            return this.presentationModels.values();\n        };\n        ClientModelStore.prototype.findPresentationModelById = function (id) {\n            return this.presentationModels.get(id);\n        };\n        ClientModelStore.prototype.findAllPresentationModelByType = function (type) {\n            if (!type || !this.presentationModelsPerType.containsKey(type)) {\n                return [];\n            }\n            return this.presentationModelsPerType.get(type).slice(0); // slice is used to clone the array\n        };\n        ClientModelStore.prototype.deleteAllPresentationModelOfType = function (presentationModelType) {\n            var _this = this;\n            var presentationModels = this.findAllPresentationModelByType(presentationModelType);\n            presentationModels.forEach(function (pm) {\n                _this.deletePresentationModel(pm, false);\n            });\n            this.clientDolphin.getClientConnector().send(new opendolphin.DeletedAllPresentationModelsOfTypeNotification(presentationModelType), undefined);\n        };\n        ClientModelStore.prototype.deletePresentationModel = function (model, notify) {\n            if (!model) {\n                return;\n            }\n            if (this.containsPresentationModel(model.id)) {\n                this.remove(model);\n                if (!notify || model.clientSideOnly) {\n                    return;\n                }\n                this.clientDolphin.getClientConnector().send(new opendolphin.DeletedPresentationModelNotification(model.id), null);\n            }\n        };\n        ClientModelStore.prototype.containsPresentationModel = function (id) {\n            return this.presentationModels.containsKey(id);\n        };\n        ClientModelStore.prototype.addAttributeById = function (attribute) {\n            if (!attribute || this.attributesPerId.containsKey(attribute.id)) {\n                return;\n            }\n            this.attributesPerId.put(attribute.id, attribute);\n        };\n        ClientModelStore.prototype.removeAttributeById = function (attribute) {\n            if (!attribute || !this.attributesPerId.containsKey(attribute.id)) {\n                return;\n            }\n            this.attributesPerId.remove(attribute.id);\n        };\n        ClientModelStore.prototype.findAttributeById = function (id) {\n            return this.attributesPerId.get(id);\n        };\n        ClientModelStore.prototype.addAttributeByQualifier = function (attribute) {\n            if (!attribute || !attribute.getQualifier()) {\n                return;\n            }\n            var attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n            if (!attributes) {\n                attributes = [];\n                this.attributesPerQualifier.put(attribute.getQualifier(), attributes);\n            }\n            if (!(attributes.indexOf(attribute) > -1)) {\n                attributes.push(attribute);\n            }\n        };\n        ClientModelStore.prototype.removeAttributeByQualifier = function (attribute) {\n            if (!attribute || !attribute.getQualifier()) {\n                return;\n            }\n            var attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n            if (!attributes) {\n                return;\n            }\n            if (attributes.length > -1) {\n                attributes.splice(attributes.indexOf(attribute), 1);\n            }\n            if (attributes.length === 0) {\n                this.attributesPerQualifier.remove(attribute.getQualifier());\n            }\n        };\n        ClientModelStore.prototype.findAllAttributesByQualifier = function (qualifier) {\n            if (!qualifier || !this.attributesPerQualifier.containsKey(qualifier)) {\n                return [];\n            }\n            return this.attributesPerQualifier.get(qualifier).slice(0); // slice is used to clone the array\n        };\n        ClientModelStore.prototype.onModelStoreChange = function (eventHandler) {\n            this.modelStoreChangeBus.onEvent(eventHandler);\n        };\n        ClientModelStore.prototype.onModelStoreChangeForType = function (presentationModelType, eventHandler) {\n            this.modelStoreChangeBus.onEvent(function (pmStoreEvent) {\n                if (pmStoreEvent.clientPresentationModel.presentationModelType == presentationModelType) {\n                    eventHandler(pmStoreEvent);\n                }\n            });\n        };\n        return ClientModelStore;\n    })();\n    opendolphin.ClientModelStore = ClientModelStore;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"NamedCommand.ts\" />\n/// <reference path=\"SignalCommand.ts\" />\n/// <reference path=\"EmptyNotification.ts\" />\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"ClientModelStore.ts\" />\n/// <reference path=\"ClientConnector.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"AttributeCreatedNotification.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ClientDolphin = (function () {\n        function ClientDolphin() {\n        }\n        ClientDolphin.prototype.setClientConnector = function (clientConnector) {\n            this.clientConnector = clientConnector;\n        };\n        ClientDolphin.prototype.getClientConnector = function () {\n            return this.clientConnector;\n        };\n        ClientDolphin.prototype.send = function (commandName, onFinished) {\n            this.clientConnector.send(new opendolphin.NamedCommand(commandName), onFinished);\n        };\n        ClientDolphin.prototype.sendEmpty = function (onFinished) {\n            this.clientConnector.send(new opendolphin.EmptyNotification(), onFinished);\n        };\n        // factory method for attributes\n        ClientDolphin.prototype.attribute = function (propertyName, qualifier, value, tag) {\n            return new opendolphin.ClientAttribute(propertyName, qualifier, value, tag);\n        };\n        // factory method for presentation models\n        ClientDolphin.prototype.presentationModel = function (id, type) {\n            var attributes = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                attributes[_i - 2] = arguments[_i];\n            }\n            var model = new opendolphin.ClientPresentationModel(id, type);\n            if (attributes && attributes.length > 0) {\n                attributes.forEach(function (attribute) {\n                    model.addAttribute(attribute);\n                });\n            }\n            this.getClientModelStore().add(model);\n            return model;\n        };\n        ClientDolphin.prototype.setClientModelStore = function (clientModelStore) {\n            this.clientModelStore = clientModelStore;\n        };\n        ClientDolphin.prototype.getClientModelStore = function () {\n            return this.clientModelStore;\n        };\n        ClientDolphin.prototype.listPresentationModelIds = function () {\n            return this.getClientModelStore().listPresentationModelIds();\n        };\n        ClientDolphin.prototype.listPresentationModels = function () {\n            return this.getClientModelStore().listPresentationModels();\n        };\n        ClientDolphin.prototype.findAllPresentationModelByType = function (presentationModelType) {\n            return this.getClientModelStore().findAllPresentationModelByType(presentationModelType);\n        };\n        ClientDolphin.prototype.getAt = function (id) {\n            return this.findPresentationModelById(id);\n        };\n        ClientDolphin.prototype.findPresentationModelById = function (id) {\n            return this.getClientModelStore().findPresentationModelById(id);\n        };\n        ClientDolphin.prototype.deletePresentationModel = function (modelToDelete) {\n            this.getClientModelStore().deletePresentationModel(modelToDelete, true);\n        };\n        ClientDolphin.prototype.deleteAllPresentationModelOfType = function (presentationModelType) {\n            this.getClientModelStore().deleteAllPresentationModelOfType(presentationModelType);\n        };\n        ClientDolphin.prototype.updatePresentationModelQualifier = function (presentationModel) {\n            var _this = this;\n            presentationModel.getAttributes().forEach(function (sourceAttribute) {\n                _this.updateAttributeQualifier(sourceAttribute);\n            });\n        };\n        ClientDolphin.prototype.updateAttributeQualifier = function (sourceAttribute) {\n            if (!sourceAttribute.getQualifier())\n                return;\n            var attributes = this.getClientModelStore().findAllAttributesByQualifier(sourceAttribute.getQualifier());\n            attributes.forEach(function (targetAttribute) {\n                if (targetAttribute.tag != sourceAttribute.tag)\n                    return; // attributes with same qualifier and tag\n                targetAttribute.setValue(sourceAttribute.getValue()); // should always have the same value\n                targetAttribute.setBaseValue(sourceAttribute.getBaseValue()); // and same base value and so dirtyness\n            });\n        };\n        ClientDolphin.prototype.tag = function (presentationModel, propertyName, value, tag) {\n            var clientAttribute = new opendolphin.ClientAttribute(propertyName, null, value, tag);\n            this.addAttributeToModel(presentationModel, clientAttribute);\n            return clientAttribute;\n        };\n        ClientDolphin.prototype.addAttributeToModel = function (presentationModel, clientAttribute) {\n            presentationModel.addAttribute(clientAttribute);\n            this.getClientModelStore().registerAttribute(clientAttribute);\n            if (!presentationModel.clientSideOnly) {\n                this.clientConnector.send(new opendolphin.AttributeCreatedNotification(presentationModel.id, clientAttribute.id, clientAttribute.propertyName, clientAttribute.getValue(), clientAttribute.getQualifier(), clientAttribute.tag), null);\n            }\n        };\n        ////// push support ///////\n        ClientDolphin.prototype.startPushListening = function (pushActionName, releaseActionName) {\n            this.clientConnector.setPushListener(new opendolphin.NamedCommand(pushActionName));\n            this.clientConnector.setReleaseCommand(new opendolphin.SignalCommand(releaseActionName));\n            this.clientConnector.setPushEnabled(true);\n            this.clientConnector.listen();\n        };\n        ClientDolphin.prototype.stopPushListening = function () {\n            this.clientConnector.setPushEnabled(false);\n        };\n        return ClientDolphin;\n    })();\n    opendolphin.ClientDolphin = ClientDolphin;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var PresentationModelResetedCommand = (function (_super) {\n        __extends(PresentationModelResetedCommand, _super);\n        function PresentationModelResetedCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'PresentationModelReseted';\n            this.className = \"org.opendolphin.core.comm.PresentationModelResetedCommand\";\n        }\n        return PresentationModelResetedCommand;\n    })(opendolphin.Command);\n    opendolphin.PresentationModelResetedCommand = PresentationModelResetedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var SavedPresentationModelNotification = (function (_super) {\n        __extends(SavedPresentationModelNotification, _super);\n        function SavedPresentationModelNotification(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'SavedPresentationModel';\n            this.className = \"org.opendolphin.core.comm.SavedPresentationModelNotification\";\n        }\n        return SavedPresentationModelNotification;\n    })(opendolphin.Command);\n    opendolphin.SavedPresentationModelNotification = SavedPresentationModelNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"Command.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var InitializeAttributeCommand = (function (_super) {\n        __extends(InitializeAttributeCommand, _super);\n        function InitializeAttributeCommand(pmId, pmType, propertyName, qualifier, newValue, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            _super.call(this);\n            this.pmId = pmId;\n            this.pmType = pmType;\n            this.propertyName = propertyName;\n            this.qualifier = qualifier;\n            this.newValue = newValue;\n            this.tag = tag;\n            this.id = 'InitializeAttribute';\n            this.className = \"org.opendolphin.core.comm.InitializeAttributeCommand\";\n        }\n        return InitializeAttributeCommand;\n    })(opendolphin.Command);\n    opendolphin.InitializeAttributeCommand = InitializeAttributeCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var SwitchPresentationModelCommand = (function (_super) {\n        __extends(SwitchPresentationModelCommand, _super);\n        function SwitchPresentationModelCommand(pmId, sourcePmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.sourcePmId = sourcePmId;\n            this.id = 'SwitchPresentationModel';\n            this.className = \"org.opendolphin.core.comm.SwitchPresentationModelCommand\";\n        }\n        return SwitchPresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.SwitchPresentationModelCommand = SwitchPresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeleteAllPresentationModelsOfTypeCommand = (function (_super) {\n        __extends(DeleteAllPresentationModelsOfTypeCommand, _super);\n        function DeleteAllPresentationModelsOfTypeCommand(pmType) {\n            _super.call(this);\n            this.pmType = pmType;\n            this.id = 'DeleteAllPresentationModelsOfType';\n            this.className = \"org.opendolphin.core.comm.DeleteAllPresentationModelsOfTypeCommand\";\n        }\n        return DeleteAllPresentationModelsOfTypeCommand;\n    })(opendolphin.Command);\n    opendolphin.DeleteAllPresentationModelsOfTypeCommand = DeleteAllPresentationModelsOfTypeCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeletePresentationModelCommand = (function (_super) {\n        __extends(DeletePresentationModelCommand, _super);\n        function DeletePresentationModelCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'DeletePresentationModel';\n            this.className = \"org.opendolphin.core.comm.DeletePresentationModelCommand\";\n        }\n        return DeletePresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.DeletePresentationModelCommand = DeletePresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DataCommand = (function (_super) {\n        __extends(DataCommand, _super);\n        function DataCommand(data) {\n            _super.call(this);\n            this.data = data;\n            this.id = \"Data\";\n            this.className = \"org.opendolphin.core.comm.DataCommand\";\n        }\n        return DataCommand;\n    })(opendolphin.Command);\n    opendolphin.DataCommand = DataCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"Command.ts\" />\n/// <reference path=\"CommandBatcher.ts\" />\n/// <reference path=\"Codec.ts\" />\n/// <reference path=\"CallNamedActionCommand.ts\" />\n/// <reference path=\"ClientDolphin.ts\" />\n/// <reference path=\"AttributeMetadataChangedCommand.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"PresentationModelResetedCommand.ts\" />\n/// <reference path=\"SavedPresentationModelNotification.ts\" />\n/// <reference path=\"InitializeAttributeCommand.ts\" />\n/// <reference path=\"SwitchPresentationModelCommand.ts\" />\n/// <reference path=\"BaseValueChangedCommand.ts\" />\n/// <reference path=\"ValueChangedCommand.ts\" />\n/// <reference path=\"DeleteAllPresentationModelsOfTypeCommand.ts\" />\n/// <reference path=\"DeleteAllPresentationModelsOfTypeCommand.ts\" />\n/// <reference path=\"DeletePresentationModelCommand.ts\" />\n/// <reference path=\"CreatePresentationModelCommand.ts\" />\n/// <reference path=\"DataCommand.ts\" />\n/// <reference path=\"NamedCommand.ts\" />\n/// <reference path=\"SignalCommand.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ClientConnector = (function () {\n        function ClientConnector(transmitter, clientDolphin, slackMS, maxBatchSize) {\n            if (slackMS === void 0) { slackMS = 0; }\n            if (maxBatchSize === void 0) { maxBatchSize = 50; }\n            this.commandQueue = [];\n            this.currentlySending = false;\n            this.pushEnabled = false;\n            this.waiting = false;\n            this.transmitter = transmitter;\n            this.clientDolphin = clientDolphin;\n            this.slackMS = slackMS;\n            this.codec = new opendolphin.Codec();\n            this.commandBatcher = new opendolphin.BlindCommandBatcher(true, maxBatchSize);\n        }\n        ClientConnector.prototype.setCommandBatcher = function (newBatcher) {\n            this.commandBatcher = newBatcher;\n        };\n        ClientConnector.prototype.setPushEnabled = function (enabled) {\n            this.pushEnabled = enabled;\n        };\n        ClientConnector.prototype.setPushListener = function (newListener) {\n            this.pushListener = newListener;\n        };\n        ClientConnector.prototype.setReleaseCommand = function (newCommand) {\n            this.releaseCommand = newCommand;\n        };\n        ClientConnector.prototype.send = function (command, onFinished) {\n            this.commandQueue.push({ command: command, handler: onFinished });\n            if (this.currentlySending) {\n                this.release(); // there is not point in releasing if we do not send atm\n                return;\n            }\n            this.doSendNext();\n        };\n        ClientConnector.prototype.doSendNext = function () {\n            var _this = this;\n            if (this.commandQueue.length < 1) {\n                if (this.pushEnabled) {\n                    this.enqueuePushCommand();\n                }\n                else {\n                    this.currentlySending = false;\n                    return;\n                }\n            }\n            this.currentlySending = true;\n            var cmdsAndHandlers = this.commandBatcher.batch(this.commandQueue);\n            var callback = cmdsAndHandlers[cmdsAndHandlers.length - 1].handler;\n            var commands = cmdsAndHandlers.map(function (cah) { return cah.command; });\n            this.transmitter.transmit(commands, function (response) {\n                //console.log(\"server response: [\" + response.map(it => it.id).join(\", \") + \"] \");\n                var touchedPMs = [];\n                response.forEach(function (command) {\n                    var touched = _this.handle(command);\n                    if (touched)\n                        touchedPMs.push(touched);\n                });\n                if (callback) {\n                    callback.onFinished(touchedPMs); // todo: make them unique?\n                }\n                // recursive call: fetch the next in line but allow a bit of slack such that\n                // document events can fire, rendering is done and commands can batch up\n                setTimeout(function () { return _this.doSendNext(); }, _this.slackMS);\n            });\n        };\n        ClientConnector.prototype.handle = function (command) {\n            if (command.id == \"Data\") {\n                return this.handleDataCommand(command);\n            }\n            else if (command.id == \"DeletePresentationModel\") {\n                return this.handleDeletePresentationModelCommand(command);\n            }\n            else if (command.id == \"DeleteAllPresentationModelsOfType\") {\n                return this.handleDeleteAllPresentationModelOfTypeCommand(command);\n            }\n            else if (command.id == \"CreatePresentationModel\") {\n                return this.handleCreatePresentationModelCommand(command);\n            }\n            else if (command.id == \"ValueChanged\") {\n                return this.handleValueChangedCommand(command);\n            }\n            else if (command.id == \"BaseValueChanged\") {\n                return this.handleBaseValueChangedCommand(command);\n            }\n            else if (command.id == \"SwitchPresentationModel\") {\n                return this.handleSwitchPresentationModelCommand(command);\n            }\n            else if (command.id == \"InitializeAttribute\") {\n                return this.handleInitializeAttributeCommand(command);\n            }\n            else if (command.id == \"SavedPresentationModel\") {\n                return this.handleSavedPresentationModelNotification(command);\n            }\n            else if (command.id == \"PresentationModelReseted\") {\n                return this.handlePresentationModelResetedCommand(command);\n            }\n            else if (command.id == \"AttributeMetadataChanged\") {\n                return this.handleAttributeMetadataChangedCommand(command);\n            }\n            else if (command.id == \"CallNamedAction\") {\n                return this.handleCallNamedActionCommand(command);\n            }\n            else {\n                console.log(\"Cannot handle, unknown command \" + command);\n            }\n            return null;\n        };\n        ClientConnector.prototype.handleDataCommand = function (serverCommand) {\n            return serverCommand.data;\n        };\n        ClientConnector.prototype.handleDeletePresentationModelCommand = function (serverCommand) {\n            var model = this.clientDolphin.findPresentationModelById(serverCommand.pmId);\n            if (!model)\n                return null;\n            this.clientDolphin.getClientModelStore().deletePresentationModel(model, true);\n            return model;\n        };\n        ClientConnector.prototype.handleDeleteAllPresentationModelOfTypeCommand = function (serverCommand) {\n            this.clientDolphin.deleteAllPresentationModelOfType(serverCommand.pmType);\n            return null;\n        };\n        ClientConnector.prototype.handleCreatePresentationModelCommand = function (serverCommand) {\n            var _this = this;\n            if (this.clientDolphin.getClientModelStore().containsPresentationModel(serverCommand.pmId)) {\n                throw new Error(\"There already is a presentation model with id \" + serverCommand.pmId + \"  known to the client.\");\n            }\n            var attributes = [];\n            serverCommand.attributes.forEach(function (attr) {\n                var clientAttribute = _this.clientDolphin.attribute(attr.propertyName, attr.qualifier, attr.value, attr.tag ? attr.tag : opendolphin.Tag.value());\n                clientAttribute.setBaseValue(attr.baseValue);\n                if (attr.id && attr.id.match(\".*S$\")) {\n                    clientAttribute.id = attr.id;\n                }\n                attributes.push(clientAttribute);\n            });\n            var clientPm = new opendolphin.ClientPresentationModel(serverCommand.pmId, serverCommand.pmType);\n            clientPm.addAttributes(attributes);\n            if (serverCommand.clientSideOnly) {\n                clientPm.clientSideOnly = true;\n            }\n            this.clientDolphin.getClientModelStore().add(clientPm);\n            this.clientDolphin.updatePresentationModelQualifier(clientPm);\n            clientPm.updateAttributeDirtyness();\n            clientPm.updateDirty();\n            return clientPm;\n        };\n        ClientConnector.prototype.handleValueChangedCommand = function (serverCommand) {\n            var clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n            if (!clientAttribute) {\n                console.log(\"attribute with id \" + serverCommand.attributeId + \" not found, cannot update old value \" + serverCommand.oldValue + \" to new value \" + serverCommand.newValue);\n                return null;\n            }\n            if (clientAttribute.getValue() == serverCommand.newValue) {\n                //console.log(\"nothing to do. new value == old value\");\n                return null;\n            }\n            // Below was the code that would enforce that value changes only appear when the proper oldValue is given.\n            // While that seemed appropriate at first, there are actually valid command sequences where the oldValue is not properly set.\n            // We leave the commented code in the codebase to allow for logging/debugging such cases.\n            //            if(clientAttribute.getValue() != serverCommand.oldValue) {\n            //                console.log(\"attribute with id \"+serverCommand.attributeId+\" and value \" + clientAttribute.getValue() +\n            //                            \" was set to value \" + serverCommand.newValue + \" even though the change was based on an outdated old value of \" + serverCommand.oldValue);\n            //            }\n            clientAttribute.setValue(serverCommand.newValue);\n            return null;\n        };\n        ClientConnector.prototype.handleBaseValueChangedCommand = function (serverCommand) {\n            var clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n            if (!clientAttribute) {\n                console.log(\"attribute with id \" + serverCommand.attributeId + \" not found, cannot set base value.\");\n                return null;\n            }\n            clientAttribute.rebase();\n            return null;\n        };\n        ClientConnector.prototype.handleSwitchPresentationModelCommand = function (serverCommand) {\n            var switchPm = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            if (!switchPm) {\n                console.log(\"switch model with id \" + serverCommand.pmId + \" not found, cannot switch.\");\n                return null;\n            }\n            var sourcePm = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.sourcePmId);\n            if (!sourcePm) {\n                console.log(\"source model with id \" + serverCommand.sourcePmId + \" not found, cannot switch.\");\n                return null;\n            }\n            switchPm.syncWith(sourcePm);\n            return switchPm;\n        };\n        ClientConnector.prototype.handleInitializeAttributeCommand = function (serverCommand) {\n            var attribute = new opendolphin.ClientAttribute(serverCommand.propertyName, serverCommand.qualifier, serverCommand.newValue, serverCommand.tag);\n            if (serverCommand.qualifier) {\n                var attributesCopy = this.clientDolphin.getClientModelStore().findAllAttributesByQualifier(serverCommand.qualifier);\n                if (attributesCopy) {\n                    if (!serverCommand.newValue) {\n                        var attr = attributesCopy.shift();\n                        if (attr) {\n                            attribute.setValue(attr.getValue());\n                        }\n                    }\n                    else {\n                        attributesCopy.forEach(function (attr) {\n                            attr.setValue(attribute.getValue());\n                        });\n                    }\n                }\n            }\n            var presentationModel;\n            if (serverCommand.pmId) {\n                presentationModel = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            }\n            if (!presentationModel) {\n                presentationModel = new opendolphin.ClientPresentationModel(serverCommand.pmId, serverCommand.pmType);\n                this.clientDolphin.getClientModelStore().add(presentationModel);\n            }\n            this.clientDolphin.addAttributeToModel(presentationModel, attribute);\n            this.clientDolphin.updatePresentationModelQualifier(presentationModel);\n            return presentationModel;\n        };\n        ClientConnector.prototype.handleSavedPresentationModelNotification = function (serverCommand) {\n            if (!serverCommand.pmId)\n                return null;\n            var model = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            if (!model) {\n                console.log(\"model with id \" + serverCommand.pmId + \" not found, cannot rebase.\");\n                return null;\n            }\n            model.rebase();\n            return model;\n        };\n        ClientConnector.prototype.handlePresentationModelResetedCommand = function (serverCommand) {\n            if (!serverCommand.pmId)\n                return null;\n            var model = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            if (!model) {\n                console.log(\"model with id \" + serverCommand.pmId + \" not found, cannot reset.\");\n                return null;\n            }\n            model.reset();\n            return model;\n        };\n        ClientConnector.prototype.handleAttributeMetadataChangedCommand = function (serverCommand) {\n            var clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n            if (!clientAttribute)\n                return null;\n            clientAttribute[serverCommand.metadataName] = serverCommand.value;\n            return null;\n        };\n        ClientConnector.prototype.handleCallNamedActionCommand = function (serverCommand) {\n            this.clientDolphin.send(serverCommand.actionName, null);\n            return null;\n        };\n        ///////////// push support ///////////////\n        ClientConnector.prototype.listen = function () {\n            if (!this.pushEnabled)\n                return;\n            if (this.waiting)\n                return;\n            // todo: how to issue a warning if no pushListener is set?\n            if (!this.currentlySending) {\n                this.doSendNext();\n            }\n        };\n        ClientConnector.prototype.enqueuePushCommand = function () {\n            var me = this;\n            this.waiting = true;\n            this.commandQueue.push({\n                command: this.pushListener,\n                handler: {\n                    onFinished: function (models) { me.waiting = false; },\n                    onFinishedData: null\n                }\n            });\n        };\n        ClientConnector.prototype.release = function () {\n            if (!this.waiting)\n                return;\n            this.waiting = false;\n            // todo: how to issue a warning if no releaseCommand is set?\n            this.transmitter.signal(this.releaseCommand);\n        };\n        return ClientConnector;\n    })();\n    opendolphin.ClientConnector = ClientConnector;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"DolphinBuilder.ts\"/>\n/**\n * JS-friendly facade to avoid too many dependencies in plain JS code.\n * The name of this file is also used for the initial lookup of the\n * one javascript file that contains all the dolphin code.\n * Changing the name requires the build support and all users\n * to be updated as well.\n * Dierk Koenig\n */\nvar opendolphin;\n(function (opendolphin) {\n    // factory method for the initialized dolphin\n    // Deprecated ! Use 'makeDolphin() instead\n    function dolphin(url, reset, slackMS) {\n        if (slackMS === void 0) { slackMS = 300; }\n        return makeDolphin().url(url).reset(reset).slackMS(slackMS).build();\n    }\n    opendolphin.dolphin = dolphin;\n    // factory method to build an initialized dolphin\n    function makeDolphin() {\n        return new opendolphin.DolphinBuilder();\n    }\n    opendolphin.makeDolphin = makeDolphin;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\n/// <reference path=\"SignalCommand.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    /**\n     * A transmitter that is not transmitting at all.\n     * It may serve as a stand-in when no real transmitter is needed.\n     */\n    var NoTransmitter = (function () {\n        function NoTransmitter() {\n        }\n        NoTransmitter.prototype.transmit = function (commands, onDone) {\n            // do nothing special\n            onDone([]);\n        };\n        NoTransmitter.prototype.signal = function (command) {\n            // do nothing\n        };\n        return NoTransmitter;\n    })();\n    opendolphin.NoTransmitter = NoTransmitter;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\n/// <reference path=\"SignalCommand.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"Codec.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var HttpTransmitter = (function () {\n        function HttpTransmitter(url, reset, charset, errorHandler, supportCORS) {\n            if (reset === void 0) { reset = true; }\n            if (charset === void 0) { charset = \"UTF-8\"; }\n            if (errorHandler === void 0) { errorHandler = null; }\n            if (supportCORS === void 0) { supportCORS = false; }\n            this.url = url;\n            this.charset = charset;\n            this.HttpCodes = {\n                finished: 4,\n                success: 200\n            };\n            this.errorHandler = errorHandler;\n            this.supportCORS = supportCORS;\n            this.http = new XMLHttpRequest();\n            this.sig = new XMLHttpRequest();\n            if (this.supportCORS) {\n                if (\"withCredentials\" in this.http) {\n                    this.http.withCredentials = true; // NOTE: doing this for non CORS requests has no impact\n                    this.sig.withCredentials = true;\n                }\n            }\n            this.codec = new opendolphin.Codec();\n            if (reset) {\n                this.invalidate();\n            }\n        }\n        HttpTransmitter.prototype.transmit = function (commands, onDone) {\n            var _this = this;\n            this.http.onerror = function (evt) {\n                _this.handleError('onerror', \"\");\n                onDone([]);\n            };\n            this.http.onreadystatechange = function (evt) {\n                if (_this.http.readyState == _this.HttpCodes.finished) {\n                    if (_this.http.status == _this.HttpCodes.success) {\n                        var responseText = _this.http.responseText;\n                        if (responseText.trim().length > 0) {\n                            try {\n                                var responseCommands = _this.codec.decode(responseText);\n                                onDone(responseCommands);\n                            }\n                            catch (err) {\n                                console.log(\"Error occurred parsing responseText: \", err);\n                                console.log(\"Incorrect responseText: \", responseText);\n                                _this.handleError('application', \"HttpTransmitter: Incorrect responseText: \" + responseText);\n                                onDone([]);\n                            }\n                        }\n                        else {\n                            _this.handleError('application', \"HttpTransmitter: empty responseText\");\n                            onDone([]);\n                        }\n                    }\n                    else {\n                        _this.handleError('application', \"HttpTransmitter: HTTP Status != 200\");\n                        onDone([]);\n                    }\n                }\n            };\n            this.http.open('POST', this.url, true);\n            if (\"overrideMimeType\" in this.http) {\n                this.http.overrideMimeType(\"application/json; charset=\" + this.charset); // todo make injectable\n            }\n            this.http.send(this.codec.encode(commands));\n        };\n        HttpTransmitter.prototype.handleError = function (kind, message) {\n            var errorEvent = { kind: kind, url: this.url, httpStatus: this.http.status, message: message };\n            if (this.errorHandler) {\n                this.errorHandler(errorEvent);\n            }\n            else {\n                console.log(\"Error occurred: \", errorEvent);\n            }\n        };\n        HttpTransmitter.prototype.signal = function (command) {\n            this.sig.open('POST', this.url, true);\n            this.sig.send(this.codec.encode([command]));\n        };\n        HttpTransmitter.prototype.invalidate = function () {\n            this.http.open('POST', this.url + 'invalidate?', false);\n            this.http.send();\n        };\n        return HttpTransmitter;\n    })();\n    opendolphin.HttpTransmitter = HttpTransmitter;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientDolphin.ts\"/>\n/// <reference path=\"OpenDolphin.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"ClientModelStore.ts\"/>\n/// <reference path=\"NoTransmitter.ts\"/>\n/// <reference path=\"HttpTransmitter.ts\"/>\n/// <reference path=\"ClientAttribute.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var DolphinBuilder = (function () {\n        function DolphinBuilder() {\n            this.reset_ = false;\n            this.slackMS_ = 300;\n            this.maxBatchSize_ = 50;\n            this.supportCORS_ = false;\n        }\n        DolphinBuilder.prototype.url = function (url) {\n            this.url_ = url;\n            return this;\n        };\n        DolphinBuilder.prototype.reset = function (reset) {\n            this.reset_ = reset;\n            return this;\n        };\n        DolphinBuilder.prototype.slackMS = function (slackMS) {\n            this.slackMS_ = slackMS;\n            return this;\n        };\n        DolphinBuilder.prototype.maxBatchSize = function (maxBatchSize) {\n            this.maxBatchSize_ = maxBatchSize;\n            return this;\n        };\n        DolphinBuilder.prototype.supportCORS = function (supportCORS) {\n            this.supportCORS_ = supportCORS;\n            return this;\n        };\n        DolphinBuilder.prototype.errorHandler = function (errorHandler) {\n            this.errorHandler_ = errorHandler;\n            return this;\n        };\n        DolphinBuilder.prototype.build = function () {\n            console.log(\"OpenDolphin js found\");\n            var clientDolphin = new opendolphin.ClientDolphin();\n            var transmitter;\n            if (this.url_ != null && this.url_.length > 0) {\n                transmitter = new opendolphin.HttpTransmitter(this.url_, this.reset_, \"UTF-8\", this.errorHandler_, this.supportCORS_);\n            }\n            else {\n                transmitter = new opendolphin.NoTransmitter();\n            }\n            clientDolphin.setClientConnector(new opendolphin.ClientConnector(transmitter, clientDolphin, this.slackMS_, this.maxBatchSize_));\n            clientDolphin.setClientModelStore(new opendolphin.ClientModelStore(clientDolphin));\n            console.log(\"ClientDolphin initialized\");\n            return clientDolphin;\n        };\n        return DolphinBuilder;\n    })();\n    opendolphin.DolphinBuilder = DolphinBuilder;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var GetPresentationModelCommand = (function (_super) {\n        __extends(GetPresentationModelCommand, _super);\n        function GetPresentationModelCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'GetPresentationModel';\n            this.className = \"org.opendolphin.core.comm.GetPresentationModelCommand\";\n        }\n        return GetPresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.GetPresentationModelCommand = GetPresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ResetPresentationModelCommand = (function (_super) {\n        __extends(ResetPresentationModelCommand, _super);\n        function ResetPresentationModelCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'ResetPresentationModel';\n            this.className = \"org.opendolphin.core.comm.ResetPresentationModelCommand\";\n        }\n        return ResetPresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.ResetPresentationModelCommand = ResetPresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n\nmodule.exports = opendolphin;\n},{}],62:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\n_dereq_('./polyfills.js');\nvar Map = _dereq_('../bower_components/core.js/library/fn/map');\nvar utils = _dereq_('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\n\nfunction BeanManager(classRepository) {\n    checkParam(classRepository, 'classRepository');\n\n    this.classRepository = classRepository;\n    this.addedHandlers = new Map();\n    this.removedHandlers = new Map();\n    this.updatedHandlers = new Map();\n    this.arrayUpdatedHandlers = new Map();\n    this.allAddedHandlers = [];\n    this.allRemovedHandlers = [];\n    this.allUpdatedHandlers = [];\n    this.allArrayUpdatedHandlers = [];\n\n    var self = this;\n    this.classRepository.onBeanAdded(function(type, bean) {\n        var handlerList = self.addedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function (handler) {\n                try {\n                    handler(bean);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onBeanAdded-handler for type', type, e);\n                }\n            });\n        }\n        self.allAddedHandlers.forEach(function (handler) {\n            try {\n                handler(bean);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onBeanAdded-handler', e);\n            }\n        });\n    });\n    this.classRepository.onBeanRemoved(function(type, bean) {\n        var handlerList = self.removedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function(handler) {\n                try {\n                    handler(bean);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onBeanRemoved-handler for type', type, e);\n                }\n            });\n        }\n        self.allRemovedHandlers.forEach(function(handler) {\n            try {\n                handler(bean);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onBeanRemoved-handler', e);\n            }\n        });\n    });\n    this.classRepository.onBeanUpdate(function(type, bean, propertyName, newValue, oldValue) {\n        var handlerList = self.updatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function (handler) {\n                try {\n                    handler(bean, propertyName, newValue, oldValue);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onBeanUpdate-handler for type', type, e);\n                }\n            });\n        }\n        self.allUpdatedHandlers.forEach(function (handler) {\n            try {\n                handler(bean, propertyName, newValue, oldValue);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onBeanUpdate-handler', e);\n            }\n        });\n    });\n    this.classRepository.onArrayUpdate(function(type, bean, propertyName, index, count, newElement) {\n        var handlerList = self.arrayUpdatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function (handler) {\n                try {\n                    handler(bean, propertyName, index, count, newElement);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onArrayUpdate-handler for type', type, e);\n                }\n            });\n        }\n        self.allArrayUpdatedHandlers.forEach(function (handler) {\n            try {\n                handler(bean, propertyName, index, count, newElement);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onArrayUpdate-handler', e);\n            }\n        });\n    });\n\n}\n\n\nBeanManager.prototype.notifyBeanChange = function(bean, propertyName, newValue) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n\n    return this.classRepository.notifyBeanChange(bean, propertyName, newValue);\n};\n\n\nBeanManager.prototype.notifyArrayChange = function(bean, propertyName, index, count, removedElements) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n    checkParam(index, 'index');\n    checkParam(count, 'count');\n    checkParam(removedElements, 'removedElements');\n\n    this.classRepository.notifyArrayChange(bean, propertyName, index, count, removedElements);\n};\n\n\nBeanManager.prototype.isManaged = function(bean) {\n    checkParam(bean, 'bean');\n\n    // TODO: Implement dolphin.isManaged() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.create = function(type) {\n    checkParam(type, 'type');\n\n    // TODO: Implement dolphin.create() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.add = function(type, bean) {\n    checkParam(type, 'type');\n    checkParam(bean, 'bean');\n\n    // TODO: Implement dolphin.add() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.addAll = function(type, collection) {\n    checkParam(type, 'type');\n    checkParam(collection, 'collection');\n\n    // TODO: Implement dolphin.addAll() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.remove = function(bean) {\n    checkParam(bean, 'bean');\n\n    // TODO: Implement dolphin.remove() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.removeAll = function(collection) {\n    checkParam(collection, 'collection');\n\n    // TODO: Implement dolphin.removeAll() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.removeIf = function(predicate) {\n    checkParam(predicate, 'predicate');\n\n    // TODO: Implement dolphin.removeIf() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.onAdded = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allAddedHandlers = self.allAddedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allAddedHandlers = self.allAddedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.addedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.addedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.addedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.addedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\nBeanManager.prototype.onRemoved = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allRemovedHandlers = self.allRemovedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allRemovedHandlers = self.allRemovedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.removedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.removedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.removedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.removedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\nBeanManager.prototype.onBeanUpdate = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allUpdatedHandlers = self.allUpdatedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allUpdatedHandlers = self.allUpdatedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.updatedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.updatedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.updatedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.updatedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\nBeanManager.prototype.onArrayUpdate = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allArrayUpdatedHandlers = self.allArrayUpdatedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allArrayUpdatedHandlers = self.allArrayUpdatedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.arrayUpdatedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.arrayUpdatedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.arrayUpdatedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.arrayUpdatedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\n\nexports.BeanManager = BeanManager;\n},{\"../bower_components/core.js/library/fn/map\":1,\"./polyfills.js\":69,\"./utils.js\":70}],63:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global Platform, console */\n\"use strict\";\n\n_dereq_('./polyfills.js');\nvar Map = _dereq_('../bower_components/core.js/library/fn/map');\nvar opendolphin = _dereq_('../libsrc/opendolphin.js');\n\nvar utils = _dereq_('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\nvar UNKNOWN = 0,\n    BASIC_TYPE = 1,\n    DOLPHIN_BEAN = 2;\n\nvar blocked = null;\n\nfunction fromDolphin(classRepository, type, value) {\n    return ! exists(value)? null\n        : type === DOLPHIN_BEAN? classRepository.beanFromDolphin.get(value) : value;\n}\n\nfunction toDolphin(classRepository, value) {\n    return typeof value === 'object' && value !== null? classRepository.beanToDolphin.get(value) : value;\n}\n\nfunction sendListAdd(dolphin, modelId, propertyName, pos, element) {\n    var attributes = [\n        dolphin.attribute('@@@ SOURCE_SYSTEM @@@', null, 'client'),\n        dolphin.attribute('source', null, modelId),\n        dolphin.attribute('attribute', null, propertyName),\n        dolphin.attribute('pos', null, pos),\n        dolphin.attribute('element', null, element)\n    ];\n    dolphin.presentationModel.apply(dolphin, [null, '@@@ LIST_ADD @@@'].concat(attributes));\n}\n\nfunction sendListRemove(dolphin, modelId, propertyName, from, to) {\n    var attributes = [\n        dolphin.attribute('@@@ SOURCE_SYSTEM @@@', null, 'client'),\n        dolphin.attribute('source', null, modelId),\n        dolphin.attribute('attribute', null, propertyName),\n        dolphin.attribute('from', null, from),\n        dolphin.attribute('to', null, to)\n    ];\n    dolphin.presentationModel.apply(dolphin, [null, '@@@ LIST_DEL @@@'].concat(attributes));\n}\n\nfunction validateList(classRepository, type, bean, propertyName) {\n    var list = bean[propertyName];\n    if (!exists(list)) {\n        classRepository.propertyUpdateHandlers.forEach(function(handler) {\n            try {\n                handler(type, bean, propertyName, [], undefined);\n            } catch(e) {\n                console.warn('An exception occurred while calling an onBeanUpdate-handler', e);\n            }\n        });\n    }\n}\n\nfunction block(bean, propertyName) {\n    if (exists(blocked)) {\n        throw new Error('Trying to create a block while another block exists');\n    }\n    blocked = {\n        bean: bean,\n        propertyName: propertyName\n    };\n}\n\nfunction isBlocked(bean, propertyName) {\n    return exists(blocked) && blocked.bean === bean && blocked.propertyName === propertyName;\n}\n\nfunction unblock() {\n    blocked = null;\n}\n\n\nfunction ClassRepository(dolphin) {\n    checkParam(dolphin, 'dolphin');\n\n    this.dolphin = dolphin;\n    this.classes = new Map();\n    this.beanFromDolphin = new Map();\n    this.beanToDolphin = new Map();\n    this.classInfos = new Map();\n    this.beanAddedHandlers = [];\n    this.beanRemovedHandlers = [];\n    this.propertyUpdateHandlers = [];\n    this.arrayUpdateHandlers = [];\n}\n\n\nClassRepository.prototype.notifyBeanChange = function(bean, propertyName, newValue) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n\n    var modelId = this.beanToDolphin.get(bean);\n    if (exists(modelId)) {\n        var model = this.dolphin.findPresentationModelById(modelId);\n        if (exists(model)) {\n            var classInfo = this.classes.get(model.presentationModelType);\n            var type = classInfo[propertyName];\n            var attribute = model.findAttributeByPropertyName(propertyName);\n            if (exists(type) && exists(attribute)) {\n                var oldValue = attribute.getValue();\n                attribute.setValue(toDolphin(this, newValue));\n                return fromDolphin(this, type, oldValue);\n            }\n        }\n    }\n};\n\n\nClassRepository.prototype.notifyArrayChange = function(bean, propertyName, index, count, removedElements) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n    checkParam(index, 'index');\n    checkParam(count, 'count');\n    checkParam(removedElements, 'removedElements');\n\n    if (isBlocked(bean, propertyName)) {\n        return;\n    }\n    var modelId = this.beanToDolphin.get(bean);\n    var array = bean[propertyName];\n    if (exists(modelId) && exists(array)) {\n        if (Array.isArray(removedElements) && removedElements.length > 0) {\n            sendListRemove(this.dolphin, modelId, propertyName, index, index + removedElements.length);\n        }\n        for (var i = index; i < index + count; i++) {\n            sendListAdd(this.dolphin, modelId, propertyName, i, toDolphin(this, array[i]));\n        }\n    }\n};\n\n\nClassRepository.prototype.onBeanAdded = function(handler) {\n    checkParam(handler, 'handler');\n    this.beanAddedHandlers.push(handler);\n};\n\n\nClassRepository.prototype.onBeanRemoved = function(handler) {\n    checkParam(handler, 'handler');\n    this.beanRemovedHandlers.push(handler);\n};\n\n\nClassRepository.prototype.onBeanUpdate = function(handler) {\n    checkParam(handler, 'handler');\n    this.propertyUpdateHandlers.push(handler);\n};\n\n\nClassRepository.prototype.onArrayUpdate = function(handler) {\n    checkParam(handler, 'handler');\n    this.arrayUpdateHandlers.push(handler);\n};\n\n\nClassRepository.prototype.registerClass = function (model) {\n    checkParam(model, 'model');\n\n    if (this.classes.has(model.id)) {\n        return;\n    }\n\n    var classInfo = {};\n    model.attributes.filter(function(attribute) {\n        return attribute.propertyName.search(/^@@@ /) < 0;\n    }).forEach(function (attribute) {\n        classInfo[attribute.propertyName] = UNKNOWN;\n\n        attribute.onValueChange(function (event) {\n            classInfo[attribute.propertyName] = event.newValue;\n        });\n    });\n    this.classes.set(model.id, classInfo);\n};\n\n\nClassRepository.prototype.unregisterClass = function (model) {\n    checkParam(model, 'model');\n\n    this.classes['delete'](model.id);\n};\n\n\nClassRepository.prototype.load = function (model) {\n    checkParam(model, 'model');\n\n    var self = this;\n    var classInfo = this.classes.get(model.presentationModelType);\n    var bean = {};\n    model.attributes.filter(function (attribute) {\n        return (attribute.tag === opendolphin.Tag.value()) && (attribute.propertyName.search(/^@@@ /) < 0);\n    }).forEach(function (attribute) {\n        bean[attribute.propertyName] = null;\n        attribute.onValueChange(function (event) {\n            if (event.oldValue !== event.newValue) {\n                var oldValue = fromDolphin(self, classInfo[attribute.propertyName], event.oldValue);\n                var newValue = fromDolphin(self, classInfo[attribute.propertyName], event.newValue);\n                self.propertyUpdateHandlers.forEach(function(handler) {\n                    try {\n                        handler(model.presentationModelType, bean, attribute.propertyName, newValue, oldValue);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onBeanUpdate-handler', e);\n                    }\n                });\n            }\n        });\n    });\n    this.beanFromDolphin.set(model.id, bean);\n    this.beanToDolphin.set(bean, model.id);\n    this.classInfos.set(model.id, classInfo);\n    this.beanAddedHandlers.forEach(function(handler) {\n        try {\n            handler(model.presentationModelType, bean);\n        } catch(e) {\n            console.warn('An exception occurred while calling an onBeanAdded-handler', e);\n        }\n    });\n    return bean;\n};\n\n\nClassRepository.prototype.unload = function(model) {\n    checkParam(model, 'model');\n\n    var bean = this.beanFromDolphin.get(model.id);\n    this.beanFromDolphin['delete'](model.id);\n    this.beanToDolphin['delete'](bean);\n    this.classInfos['delete'](model.id);\n    if (exists(bean)) {\n        this.beanRemovedHandlers.forEach(function(handler) {\n            try {\n                handler(model.presentationModelType, bean);\n            } catch(e) {\n                console.warn('An exception occurred while calling an onBeanRemoved-handler', e);\n            }\n        });\n    }\n    return bean;\n};\n\n\nClassRepository.prototype.addListEntry = function(model) {\n    checkParam(model, 'model');\n\n    var source = model.findAttributeByPropertyName('source');\n    var attribute = model.findAttributeByPropertyName('attribute');\n    var pos = model.findAttributeByPropertyName('pos');\n    var element = model.findAttributeByPropertyName('element');\n\n    if (exists(source) && exists(attribute) && exists(pos) && exists(element)) {\n        var classInfo = this.classInfos.get(source.value);\n        var bean = this.beanFromDolphin.get(source.value);\n        if (exists(bean) && exists(classInfo)) {\n            var type = model.presentationModelType;\n            var entry = fromDolphin(this, classInfo[attribute.value], element.value);\n            validateList(this, type, bean, attribute.value);\n            try {\n                block(bean, attribute.value);\n                this.arrayUpdateHandlers.forEach(function (handler) {\n                    try {\n                        handler(type, bean, attribute.value, pos.value, 0, entry);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onArrayUpdate-handler', e);\n                    }\n                });\n            } finally {\n                unblock();\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n        }\n    } else {\n        throw new Error(\"Invalid list modification update received\");\n    }\n};\n\n\nClassRepository.prototype.delListEntry = function(model) {\n    checkParam(model, 'model');\n\n    var source = model.findAttributeByPropertyName('source');\n    var attribute = model.findAttributeByPropertyName('attribute');\n    var from = model.findAttributeByPropertyName('from');\n    var to = model.findAttributeByPropertyName('to');\n\n    if (exists(source) && exists(attribute) && exists(from) && exists(to)) {\n        var bean = this.beanFromDolphin.get(source.value);\n        if (exists(bean)) {\n            var type = model.presentationModelType;\n            validateList(this, type, bean, attribute.value);\n            try {\n                block(bean, attribute.value);\n                this.arrayUpdateHandlers.forEach(function (handler) {\n                    try {\n                        handler(type, bean, attribute.value, from.value, to.value - from.value);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onArrayUpdate-handler', e);\n                    }\n                });\n            } finally {\n                unblock();\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n        }\n    } else {\n        throw new Error(\"Invalid list modification update received\");\n    }\n};\n\n\nClassRepository.prototype.setListEntry = function(model) {\n    checkParam(model, 'model');\n\n    var source = model.findAttributeByPropertyName('source');\n    var attribute = model.findAttributeByPropertyName('attribute');\n    var pos = model.findAttributeByPropertyName('pos');\n    var element = model.findAttributeByPropertyName('element');\n\n    if (exists(source) && exists(attribute) && exists(pos) && exists(element)) {\n        var classInfo = this.classInfos.get(source.value);\n        var bean = this.beanFromDolphin.get(source.value);\n        if (exists(bean) && exists(classInfo)) {\n            var type = model.presentationModelType;\n            var entry = fromDolphin(this, classInfo[attribute.value], element.value);\n            validateList(this, type, bean, attribute.value);\n            try {\n                block(bean, attribute.value);\n                this.arrayUpdateHandlers.forEach(function (handler) {\n                    try {\n                        handler(type, bean, attribute.value, pos.value, 1, entry);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onArrayUpdate-handler', e);\n                    }\n                });\n            } finally {\n                unblock();\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n        }\n    }else {\n        throw new Error(\"Invalid list modification update received\");\n    }\n};\n\n\nClassRepository.prototype.mapParamToDolphin = function(param) {\n    if (!exists(param)) {\n        return {value: param, type: UNKNOWN};\n    }\n    var type = typeof param;\n    if (type === 'object') {\n        var value = this.beanToDolphin.get(param);\n        if (exists(value)) {\n            return {value: value, type: DOLPHIN_BEAN};\n        }\n        throw new TypeError(\"Only managed Dolphin Beans can be used\");\n    }\n    if (type === 'string' || type === 'number' || type === 'boolean') {\n        return {value: param, type: BASIC_TYPE};\n    }\n    throw new TypeError(\"Only managed Dolphin Beans and primitive types can be used\");\n};\n\n\nClassRepository.prototype.mapDolphinToBean = function(value, type) {\n    return fromDolphin(this, type, value);\n};\n\n\n\nexports.ClassRepository = ClassRepository;\nexports.UNKNOWN = UNKNOWN;\nexports.BASIC_TYPE = BASIC_TYPE;\nexports.DOLPHIN_BEAN = DOLPHIN_BEAN;\n\n},{\"../bower_components/core.js/library/fn/map\":1,\"../libsrc/opendolphin.js\":61,\"./polyfills.js\":69,\"./utils.js\":70}],64:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\n_dereq_('./polyfills.js');\nvar checkParam = _dereq_('./utils.js').checkParam;\n\nvar DOLPHIN_PLATFORM_PREFIX = 'dolphin_platform_intern_';\nvar INIT_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'initClientContext';\nvar DISCONNECT_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'disconnectClientContext';\n\nfunction ClientContext(dolphin, beanManager, controllerManager, connector) {\n    checkParam(dolphin, 'dolphin');\n    checkParam(beanManager, 'beanManager');\n    checkParam(controllerManager, 'controllerManager');\n    checkParam(connector, 'connector');\n\n    this.dolphin = dolphin;\n    this.beanManager = beanManager;\n    this._controllerManager = controllerManager;\n    this._connector = connector;\n\n    this._connector.invoke(INIT_COMMAND_NAME);\n}\n\n\nClientContext.prototype.createController = function(name) {\n    checkParam(name, 'name');\n\n    return this._controllerManager.createController(name);\n};\n\n\nClientContext.prototype.disconnect = function() {\n    // TODO: Implement ClientContext.disconnect [DP-46]\n    this.dolphin.stopPushListening();\n    this._connector.invoke(DISCONNECT_COMMAND_NAME);\n    this.dolphin = null;\n    this.beanManager = null;\n    this._controllerManager = null;\n    this._connector = null;\n};\n\n\nexports.ClientContext = ClientContext;\n},{\"./polyfills.js\":69,\"./utils.js\":70}],65:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\n_dereq_('./polyfills.js');\nvar Promise = _dereq_('../bower_components/core.js/library/fn/promise');\nvar opendolphin = _dereq_('../libsrc/opendolphin.js');\nvar utils = _dereq_('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\n\nvar DOLPHIN_PLATFORM_PREFIX = 'dolphin_platform_intern_';\nvar POLL_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'longPoll';\nvar RELEASE_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'release';\n\nvar DOLPHIN_BEAN = '@@@ DOLPHIN_BEAN @@@';\nvar ACTION_CALL_BEAN = '@@@ CONTROLLER_ACTION_CALL_BEAN @@@';\nvar HIGHLANDER_BEAN = '@@@ HIGHLANDER_BEAN @@@';\nvar DOLPHIN_LIST_ADD = '@@@ LIST_ADD @@@';\nvar DOLPHIN_LIST_DEL = '@@@ LIST_DEL @@@';\nvar DOLPHIN_LIST_SET = '@@@ LIST_SET @@@';\nvar SOURCE_SYSTEM = '@@@ SOURCE_SYSTEM @@@';\nvar SOURCE_SYSTEM_CLIENT = 'client';\nvar SOURCE_SYSTEM_SERVER = 'server';\n\n\n\nvar initializer;\n\nfunction Connector(url, dolphin, classRepository, config) {\n    checkParam(url, 'url');\n    checkParam(dolphin, 'dolphin');\n    checkParam(classRepository, 'classRepository');\n\n    var self = this;\n    this.dolphin = dolphin;\n    this.classRepository = classRepository;\n    this.highlanderPMResolver = function() {};\n    this.highlanderPMPromise = new Promise(function(resolve) {\n        self.highlanderPMResolver = resolve;\n    });\n\n    dolphin.getClientModelStore().onModelStoreChange(function (event) {\n        var model = event.clientPresentationModel;\n        var sourceSystem = model.findAttributeByPropertyName(SOURCE_SYSTEM);\n        if (exists(sourceSystem) && sourceSystem.value === SOURCE_SYSTEM_SERVER) {\n            if (event.eventType === opendolphin.Type.ADDED) {\n                self.onModelAdded(model);\n            } else if (event.eventType === opendolphin.Type.REMOVED) {\n                self.onModelRemoved(model);\n            }\n        }\n    });\n\n    if (!exists(config) || !exists(config.serverPush) || config.serverPush === true) {\n        setTimeout(function() {\n            dolphin.startPushListening(POLL_COMMAND_NAME, RELEASE_COMMAND_NAME);\n        }, 500);\n    }\n\n    initializer = new Promise(function(resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.withCredentials = true;\n\n        req.onload = function() {\n            if (req.status === 200) {\n                resolve();\n            }\n            else {\n                reject(Error(req.statusText));\n            }\n        };\n\n        req.onerror = function() {\n            reject(Error(\"Network Error\"));\n        };\n\n        req.open('POST', url + 'invalidate?');\n        req.send();\n    });\n}\n\n\nConnector.prototype.onModelAdded = function(model) {\n    checkParam(model, 'model');\n\n    var type = model.presentationModelType;\n    switch (type) {\n        case ACTION_CALL_BEAN:\n            // ignore\n            break;\n        case DOLPHIN_BEAN:\n            this.classRepository.registerClass(model);\n            break;\n        case HIGHLANDER_BEAN:\n            this.highlanderPMResolver(model);\n            break;\n        case DOLPHIN_LIST_ADD:\n            this.classRepository.addListEntry(model);\n            this.dolphin.deletePresentationModel(model);\n            break;\n        case DOLPHIN_LIST_DEL:\n            this.classRepository.delListEntry(model);\n            this.dolphin.deletePresentationModel(model);\n            break;\n        case DOLPHIN_LIST_SET:\n            this.classRepository.setListEntry(model);\n            this.dolphin.deletePresentationModel(model);\n            break;\n        default:\n            this.classRepository.load(model);\n            break;\n    }\n};\n\n\nConnector.prototype.onModelRemoved = function(model) {\n    checkParam(model, 'model');\n\n    var type = model.presentationModelType;\n    switch (type) {\n        case DOLPHIN_BEAN:\n            this.classRepository.unregisterClass(model);\n            break;\n        case DOLPHIN_LIST_ADD:\n        case DOLPHIN_LIST_DEL:\n        case DOLPHIN_LIST_SET:\n            // do nothing\n            break;\n        default:\n            this.classRepository.unload(model);\n            break;\n    }\n};\n\n\nConnector.prototype.invoke = function(command) {\n    checkParam(command, 'command');\n\n    var dolphin = this.dolphin;\n    return new Promise(function(resolve) {\n        initializer.then(function () {\n            dolphin.send(command, {\n                onFinished: function() {\n                    resolve();\n                }\n            });\n        });\n    });\n};\n\n\nConnector.prototype.getHighlanderPM = function() {\n    return this.highlanderPMPromise;\n};\n\n\n\nexports.Connector = Connector;\nexports.SOURCE_SYSTEM = SOURCE_SYSTEM;\nexports.SOURCE_SYSTEM_CLIENT = SOURCE_SYSTEM_CLIENT;\nexports.SOURCE_SYSTEM_SERVER = SOURCE_SYSTEM_SERVER;\nexports.ACTION_CALL_BEAN = ACTION_CALL_BEAN;\n\n},{\"../bower_components/core.js/library/fn/promise\":2,\"../libsrc/opendolphin.js\":61,\"./polyfills.js\":69,\"./utils.js\":70}],66:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\n_dereq_('./polyfills.js');\nvar Promise = _dereq_('../bower_components/core.js/library/fn/promise');\nvar utils = _dereq_('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\nvar ControllerProxy = _dereq_('./controllerproxy.js').ControllerProxy;\n\nvar DOLPHIN_BEAN_TYPE = _dereq_('./classrepo.js').DOLPHIN_BEAN;\n\nvar SOURCE_SYSTEM = _dereq_('./connector.js').SOURCE_SYSTEM;\nvar SOURCE_SYSTEM_CLIENT = _dereq_('./connector.js').SOURCE_SYSTEM_CLIENT;\nvar ACTION_CALL_BEAN = _dereq_('./connector.js').ACTION_CALL_BEAN;\n\nvar DOLPHIN_PLATFORM_PREFIX = 'dolphin_platform_intern_';\nvar REGISTER_CONTROLLER_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'registerController';\nvar CALL_CONTROLLER_ACTION_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'callControllerAction';\nvar DESTROY_CONTROLLER_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'destroyController';\n\nvar CONTROLLER_NAME = 'controllerName';\nvar CONTROLLER_ID = 'controllerId';\nvar MODEL = 'model';\nvar ACTION_NAME = 'actionName';\nvar ERROR_CODE = 'errorCode';\nvar PARAM_PREFIX = '_';\n\n\nfunction ControllerManager(dolphin, classRepository, connector) {\n    checkParam(dolphin, 'dolphin');\n    checkParam(classRepository, 'classRepository');\n    checkParam(connector, 'connector');\n\n    this.dolphin = dolphin;\n    this.classRepository = classRepository;\n    this.connector = connector;\n}\n\n\nControllerManager.prototype.createController = function(name) {\n    checkParam(name, 'name');\n\n    var self = this;\n    var controllerId, modelId, model;\n    return new Promise(function(resolve) {\n        self.connector.getHighlanderPM().then(function (highlanderPM) {\n            highlanderPM.findAttributeByPropertyName(CONTROLLER_NAME).setValue(name);\n            self.connector.invoke(REGISTER_CONTROLLER_COMMAND_NAME).then(function() {\n                controllerId = highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).getValue();\n                modelId = highlanderPM.findAttributeByPropertyName(MODEL).getValue();\n                model = self.classRepository.mapDolphinToBean(modelId, DOLPHIN_BEAN_TYPE);\n                resolve(new ControllerProxy(controllerId, model, self));\n            });\n        });\n    });\n};\n\n\nControllerManager.prototype.invokeAction = function(controllerId, actionName, params) {\n    checkParam(controllerId, 'controllerId');\n    checkParam(actionName, 'actionName');\n\n    var self = this;\n    return new Promise(function(resolve, reject) {\n\n        var attributes = [\n            self.dolphin.attribute(SOURCE_SYSTEM, null, SOURCE_SYSTEM_CLIENT),\n            self.dolphin.attribute(CONTROLLER_ID, null, controllerId),\n            self.dolphin.attribute(ACTION_NAME, null, actionName),\n            self.dolphin.attribute(ERROR_CODE)\n        ];\n\n        if (exists(params)) {\n            for (var prop in params) {\n                if (params.hasOwnProperty(prop)) {\n                    var param = self.classRepository.mapParamToDolphin(params[prop]);\n                    attributes.push(self.dolphin.attribute(PARAM_PREFIX + prop, null, param.value, 'VALUE'));\n                    attributes.push(self.dolphin.attribute(PARAM_PREFIX + prop, null, param.type, 'VALUE_TYPE'));\n                }\n            }\n        }\n\n        var pm = self.dolphin.presentationModel.apply(self.dolphin, [null, ACTION_CALL_BEAN].concat(attributes));\n\n        self.connector.invoke(CALL_CONTROLLER_ACTION_COMMAND_NAME, params).then(function() {\n            var isError = pm.findAttributeByPropertyName(ERROR_CODE).getValue();\n            if (isError) {\n                reject(new Error(\"ControllerAction caused an error\"));\n            } else {\n                resolve();\n            }\n            self.dolphin.deletePresentationModel(pm);\n        });\n    });\n};\n\n\nControllerManager.prototype.destroyController = function(controllerId) {\n    checkParam(controllerId, 'controllerId');\n\n    var self = this;\n    return new Promise(function(resolve) {\n        self.connector.getHighlanderPM().then(function (highlanderPM) {\n            highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).setValue(controllerId);\n            self.connector.invoke(DESTROY_CONTROLLER_COMMAND_NAME).then(resolve);\n        });\n    });\n};\n\n\n\nexports.ControllerManager = ControllerManager;\n\n},{\"../bower_components/core.js/library/fn/promise\":2,\"./classrepo.js\":63,\"./connector.js\":65,\"./controllerproxy.js\":67,\"./polyfills.js\":69,\"./utils.js\":70}],67:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\n_dereq_('./polyfills.js');\nvar checkParam = _dereq_('./utils.js').checkParam;\n\n\n\nfunction ControllerProxy(controllerId, model, manager) {\n    checkParam(controllerId, 'controllerId');\n    checkParam(model, 'model');\n    checkParam(manager, 'manager');\n\n    this.controllerId = controllerId;\n    this.model = model;\n    this.manager = manager;\n    this.destroyed = false;\n}\n\n\nControllerProxy.prototype.invoke = function(name, params) {\n    checkParam(name, 'name');\n\n    if (this.destroyed) {\n        throw new Error('The controller was already destroyed');\n    }\n    return this.manager.invokeAction(this.controllerId, name, params);\n};\n\n\nControllerProxy.prototype.destroy = function() {\n    if (this.destroyed) {\n        throw new Error('The controller was already destroyed');\n    }\n    this.destroyed = true;\n    return this.manager.destroyController(this);\n};\n\n\n\nexports.ControllerProxy = ControllerProxy;\n\n},{\"./polyfills.js\":69,\"./utils.js\":70}],68:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\n_dereq_('./polyfills.js');\nvar opendolphin = _dereq_('../libsrc/opendolphin.js');\n\nvar utils = _dereq_('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\nvar Connector = _dereq_('./connector.js').Connector;\nvar BeanManager = _dereq_('./beanmanager.js').BeanManager;\nvar ClassRepository = _dereq_('./classrepo.js').ClassRepository;\nvar ControllerManager = _dereq_('./controllermanager.js').ControllerManager;\nvar ClientContext = _dereq_('./clientcontext.js').ClientContext;\n\nexports.connect = function(url, config) {\n    checkParam(url, 'url');\n\n    var builder = opendolphin.makeDolphin().url(url).reset(false).slackMS(4).supportCORS(true);\n    if (exists(config) && exists(config.errorHandler)) {\n        builder.errorHandler(config.errorHandler);\n    }\n    var dolphin = builder.build();\n\n    var classRepository = new ClassRepository(dolphin);\n    var beanManager = new BeanManager(classRepository);\n    var connector = new Connector(url, dolphin, classRepository, config);\n    var controllerManager = new ControllerManager(dolphin, classRepository, connector);\n\n    return new ClientContext(dolphin, beanManager, controllerManager, connector);\n};\n\n},{\"../libsrc/opendolphin.js\":61,\"./beanmanager.js\":62,\"./classrepo.js\":63,\"./clientcontext.js\":64,\"./connector.js\":65,\"./controllermanager.js\":66,\"./polyfills.js\":69,\"./utils.js\":70}],69:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n ////////////////////\n// Array.forEach()\n////////////////////\nif (!Array.prototype.forEach) {\n\n    Array.prototype.forEach = function(callback, thisArg) {\n\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(' this is null or not defined');\n        }\n\n        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If IsCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + ' is not a function');\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n\n            var kValue;\n\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n\n                // i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Call the Call internal method of callback with T as the this value and\n                // argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n}\n\n\n\n////////////////////\n// Array.filter()\n////////////////////\nif (!Array.prototype.filter) {\n    Array.prototype.filter = function(fun/*, thisArg*/) {\n        'use strict';\n\n        if (this === void 0 || this === null) {\n            throw new TypeError();\n        }\n\n        var t = Object(this);\n        var len = t.length >>> 0;\n        if (typeof fun !== 'function') {\n            throw new TypeError();\n        }\n\n        var res = [];\n        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n        for (var i = 0; i < len; i++) {\n            if (i in t) {\n                var val = t[i];\n\n                // NOTE: Technically this should Object.defineProperty at\n                //       the next index, as push can be affected by\n                //       properties on Object.prototype and Array.prototype.\n                //       But that method's new, and collisions should be\n                //       rare, so use the more-compatible alternative.\n                if (fun.call(thisArg, val, i, t)) {\n                    res.push(val);\n                }\n            }\n        }\n\n        return res;\n    };\n}\n},{}],70:[function(_dereq_,module,exports){\n/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n\"use strict\";\n\nvar exists = function(object) {\n    return typeof object !== 'undefined' && object !== null;\n};\n\nmodule.exports.exists = exists;\n\nmodule.exports.checkParam = function(param, name) {\n    if (!exists(param)) {\n        throw new Error('The parameter ' + name + ' is mandatory');\n    }\n};\n\n},{}]},{},[68])(68)\n});\n\n","require('../modules/es6.object.to-string');\nrequire('../modules/es6.string.iterator');\nrequire('../modules/web.dom.iterable');\nrequire('../modules/es6.promise');\nmodule.exports = require('../modules/$.core').Promise;","module.exports = function(it){\n  if(typeof it != 'function')throw TypeError(it + ' is not a function!');\n  return it;\n};","module.exports = function(){ /* empty */ };","var isObject = require('./$.is-object');\nmodule.exports = function(it){\n  if(!isObject(it))throw TypeError(it + ' is not an object!');\n  return it;\n};","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./$.cof')\n  , TAG = require('./$.wks')('toStringTag')\n  // ES3 wrong here\n  , ARG = cof(function(){ return arguments; }()) == 'Arguments';\n\nmodule.exports = function(it){\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};","var toString = {}.toString;\n\nmodule.exports = function(it){\n  return toString.call(it).slice(8, -1);\n};","'use strict';\nvar $            = require('./$')\n  , hide         = require('./$.hide')\n  , redefineAll  = require('./$.redefine-all')\n  , ctx          = require('./$.ctx')\n  , strictNew    = require('./$.strict-new')\n  , defined      = require('./$.defined')\n  , forOf        = require('./$.for-of')\n  , $iterDefine  = require('./$.iter-define')\n  , step         = require('./$.iter-step')\n  , ID           = require('./$.uid')('id')\n  , $has         = require('./$.has')\n  , isObject     = require('./$.is-object')\n  , setSpecies   = require('./$.set-species')\n  , DESCRIPTORS  = require('./$.descriptors')\n  , isExtensible = Object.isExtensible || isObject\n  , SIZE         = DESCRIPTORS ? '_s' : 'size'\n  , id           = 0;\n\nvar fastKey = function(it, create){\n  // return primitive with prefix\n  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if(!$has(it, ID)){\n    // can't set id to frozen object\n    if(!isExtensible(it))return 'F';\n    // not necessary to add id\n    if(!create)return 'E';\n    // add missing object id\n    hide(it, ID, ++id);\n  // return object id with prefix\n  } return 'O' + it[ID];\n};\n\nvar getEntry = function(that, key){\n  // fast case\n  var index = fastKey(key), entry;\n  if(index !== 'F')return that._i[index];\n  // frozen object case\n  for(entry = that._f; entry; entry = entry.n){\n    if(entry.k == key)return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){\n    var C = wrapper(function(that, iterable){\n      strictNew(that, C, NAME);\n      that._i = $.create(null); // index\n      that._f = undefined;      // first entry\n      that._l = undefined;      // last entry\n      that[SIZE] = 0;           // size\n      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear(){\n        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){\n          entry.r = true;\n          if(entry.p)entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function(key){\n        var that  = this\n          , entry = getEntry(that, key);\n        if(entry){\n          var next = entry.n\n            , prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if(prev)prev.n = next;\n          if(next)next.p = prev;\n          if(that._f == entry)that._f = next;\n          if(that._l == entry)that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /*, that = undefined */){\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)\n          , entry;\n        while(entry = entry ? entry.n : this._f){\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while(entry && entry.r)entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key){\n        return !!getEntry(this, key);\n      }\n    });\n    if(DESCRIPTORS)$.setDesc(C.prototype, 'size', {\n      get: function(){\n        return defined(this[SIZE]);\n      }\n    });\n    return C;\n  },\n  def: function(that, key, value){\n    var entry = getEntry(that, key)\n      , prev, index;\n    // change existing entry\n    if(entry){\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if(!that._f)that._f = entry;\n      if(prev)prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if(index !== 'F')that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function(C, NAME, IS_MAP){\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function(iterated, kind){\n      this._t = iterated;  // target\n      this._k = kind;      // kind\n      this._l = undefined; // previous\n    }, function(){\n      var that  = this\n        , kind  = that._k\n        , entry = that._l;\n      // revert to the last existing entry\n      while(entry && entry.r)entry = entry.p;\n      // get next entry\n      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if(kind == 'keys'  )return step(0, entry.k);\n      if(kind == 'values')return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar forOf   = require('./$.for-of')\n  , classof = require('./$.classof');\nmodule.exports = function(NAME){\n  return function toJSON(){\n    if(classof(this) != NAME)throw TypeError(NAME + \"#toJSON isn't generic\");\n    var arr = [];\n    forOf(this, false, arr.push, arr);\n    return arr;\n  };\n};","'use strict';\nvar $              = require('./$')\n  , global         = require('./$.global')\n  , $export        = require('./$.export')\n  , fails          = require('./$.fails')\n  , hide           = require('./$.hide')\n  , redefineAll    = require('./$.redefine-all')\n  , forOf          = require('./$.for-of')\n  , strictNew      = require('./$.strict-new')\n  , isObject       = require('./$.is-object')\n  , setToStringTag = require('./$.set-to-string-tag')\n  , DESCRIPTORS    = require('./$.descriptors');\n\nmodule.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){\n  var Base  = global[NAME]\n    , C     = Base\n    , ADDER = IS_MAP ? 'set' : 'add'\n    , proto = C && C.prototype\n    , O     = {};\n  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){\n    new C().entries().next();\n  }))){\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n  } else {\n    C = wrapper(function(target, iterable){\n      strictNew(target, C, NAME);\n      target._c = new Base;\n      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);\n    });\n    $.each.call('add,clear,delete,forEach,get,has,set,keys,values,entries'.split(','),function(KEY){\n      var IS_ADDER = KEY == 'add' || KEY == 'set';\n      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){\n        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;\n        var result = this._c[KEY](a === 0 ? 0 : a, b);\n        return IS_ADDER ? this : result;\n      });\n    });\n    if('size' in proto)$.setDesc(C.prototype, 'size', {\n      get: function(){\n        return this._c.size;\n      }\n    });\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F, O);\n\n  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};","var core = module.exports = {version: '1.2.6'};\nif(typeof __e == 'number')__e = core; // eslint-disable-line no-undef","// optional / simple context binding\nvar aFunction = require('./$.a-function');\nmodule.exports = function(fn, that, length){\n  aFunction(fn);\n  if(that === undefined)return fn;\n  switch(length){\n    case 1: return function(a){\n      return fn.call(that, a);\n    };\n    case 2: return function(a, b){\n      return fn.call(that, a, b);\n    };\n    case 3: return function(a, b, c){\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function(/* ...args */){\n    return fn.apply(that, arguments);\n  };\n};","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function(it){\n  if(it == undefined)throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./$.fails')(function(){\n  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;\n});","var isObject = require('./$.is-object')\n  , document = require('./$.global').document\n  // in old IE typeof document.createElement is 'object'\n  , is = isObject(document) && isObject(document.createElement);\nmodule.exports = function(it){\n  return is ? document.createElement(it) : {};\n};","var global    = require('./$.global')\n  , core      = require('./$.core')\n  , ctx       = require('./$.ctx')\n  , PROTOTYPE = 'prototype';\n\nvar $export = function(type, name, source){\n  var IS_FORCED = type & $export.F\n    , IS_GLOBAL = type & $export.G\n    , IS_STATIC = type & $export.S\n    , IS_PROTO  = type & $export.P\n    , IS_BIND   = type & $export.B\n    , IS_WRAP   = type & $export.W\n    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})\n    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]\n    , key, own, out;\n  if(IS_GLOBAL)source = name;\n  for(key in source){\n    // contains in native\n    own = !IS_FORCED && target && key in target;\n    if(own && key in exports)continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function(C){\n      var F = function(param){\n        return this instanceof C ? new C(param) : C(param);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;\n  }\n};\n// type bitmap\n$export.F = 1;  // forced\n$export.G = 2;  // global\n$export.S = 4;  // static\n$export.P = 8;  // proto\n$export.B = 16; // bind\n$export.W = 32; // wrap\nmodule.exports = $export;","module.exports = function(exec){\n  try {\n    return !!exec();\n  } catch(e){\n    return true;\n  }\n};","var ctx         = require('./$.ctx')\n  , call        = require('./$.iter-call')\n  , isArrayIter = require('./$.is-array-iter')\n  , anObject    = require('./$.an-object')\n  , toLength    = require('./$.to-length')\n  , getIterFn   = require('./core.get-iterator-method');\nmodule.exports = function(iterable, entries, fn, that){\n  var iterFn = getIterFn(iterable)\n    , f      = ctx(fn, that, entries ? 2 : 1)\n    , index  = 0\n    , length, step, iterator;\n  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){\n    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){\n    call(iterator, f, step.value, entries);\n  }\n};","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();\nif(typeof __g == 'number')__g = global; // eslint-disable-line no-undef","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function(it, key){\n  return hasOwnProperty.call(it, key);\n};","var $          = require('./$')\n  , createDesc = require('./$.property-desc');\nmodule.exports = require('./$.descriptors') ? function(object, key, value){\n  return $.setDesc(object, key, createDesc(1, value));\n} : function(object, key, value){\n  object[key] = value;\n  return object;\n};","module.exports = require('./$.global').document && document.documentElement;","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function(fn, args, that){\n  var un = that === undefined;\n  switch(args.length){\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return              fn.apply(that, args);\n};","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./$.cof');\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};","// check on default Array iterator\nvar Iterators  = require('./$.iterators')\n  , ITERATOR   = require('./$.wks')('iterator')\n  , ArrayProto = Array.prototype;\n\nmodule.exports = function(it){\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};","module.exports = function(it){\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};","// call something on iterator step with safe closing on error\nvar anObject = require('./$.an-object');\nmodule.exports = function(iterator, fn, value, entries){\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch(e){\n    var ret = iterator['return'];\n    if(ret !== undefined)anObject(ret.call(iterator));\n    throw e;\n  }\n};","'use strict';\nvar $              = require('./$')\n  , descriptor     = require('./$.property-desc')\n  , setToStringTag = require('./$.set-to-string-tag')\n  , IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });\n\nmodule.exports = function(Constructor, NAME, next){\n  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});\n  setToStringTag(Constructor, NAME + ' Iterator');\n};","'use strict';\nvar LIBRARY        = require('./$.library')\n  , $export        = require('./$.export')\n  , redefine       = require('./$.redefine')\n  , hide           = require('./$.hide')\n  , has            = require('./$.has')\n  , Iterators      = require('./$.iterators')\n  , $iterCreate    = require('./$.iter-create')\n  , setToStringTag = require('./$.set-to-string-tag')\n  , getProto       = require('./$').getProto\n  , ITERATOR       = require('./$.wks')('iterator')\n  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`\n  , FF_ITERATOR    = '@@iterator'\n  , KEYS           = 'keys'\n  , VALUES         = 'values';\n\nvar returnThis = function(){ return this; };\n\nmodule.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function(kind){\n    if(!BUGGY && kind in proto)return proto[kind];\n    switch(kind){\n      case KEYS: return function keys(){ return new Constructor(this, kind); };\n      case VALUES: return function values(){ return new Constructor(this, kind); };\n    } return function entries(){ return new Constructor(this, kind); };\n  };\n  var TAG        = NAME + ' Iterator'\n    , DEF_VALUES = DEFAULT == VALUES\n    , VALUES_BUG = false\n    , proto      = Base.prototype\n    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]\n    , $default   = $native || getMethod(DEFAULT)\n    , methods, key;\n  // Fix native\n  if($native){\n    var IteratorPrototype = getProto($default.call(new Base));\n    // Set @@toStringTag to native iterators\n    setToStringTag(IteratorPrototype, TAG, true);\n    // FF fix\n    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);\n    // fix Array#{values, @@iterator}.name in V8 / FF\n    if(DEF_VALUES && $native.name !== VALUES){\n      VALUES_BUG = true;\n      $default = function values(){ return $native.call(this); };\n    }\n  }\n  // Define iterator\n  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG]  = returnThis;\n  if(DEFAULT){\n    methods = {\n      values:  DEF_VALUES  ? $default : getMethod(VALUES),\n      keys:    IS_SET      ? $default : getMethod(KEYS),\n      entries: !DEF_VALUES ? $default : getMethod('entries')\n    };\n    if(FORCED)for(key in methods){\n      if(!(key in proto))redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};","var ITERATOR     = require('./$.wks')('iterator')\n  , SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function(){ SAFE_CLOSING = true; };\n  Array.from(riter, function(){ throw 2; });\n} catch(e){ /* empty */ }\n\nmodule.exports = function(exec, skipClosing){\n  if(!skipClosing && !SAFE_CLOSING)return false;\n  var safe = false;\n  try {\n    var arr  = [7]\n      , iter = arr[ITERATOR]();\n    iter.next = function(){ safe = true; };\n    arr[ITERATOR] = function(){ return iter; };\n    exec(arr);\n  } catch(e){ /* empty */ }\n  return safe;\n};","module.exports = function(done, value){\n  return {value: value, done: !!done};\n};","module.exports = {};","var $Object = Object;\nmodule.exports = {\n  create:     $Object.create,\n  getProto:   $Object.getPrototypeOf,\n  isEnum:     {}.propertyIsEnumerable,\n  getDesc:    $Object.getOwnPropertyDescriptor,\n  setDesc:    $Object.defineProperty,\n  setDescs:   $Object.defineProperties,\n  getKeys:    $Object.keys,\n  getNames:   $Object.getOwnPropertyNames,\n  getSymbols: $Object.getOwnPropertySymbols,\n  each:       [].forEach\n};","module.exports = true;","var global    = require('./$.global')\n  , macrotask = require('./$.task').set\n  , Observer  = global.MutationObserver || global.WebKitMutationObserver\n  , process   = global.process\n  , Promise   = global.Promise\n  , isNode    = require('./$.cof')(process) == 'process'\n  , head, last, notify;\n\nvar flush = function(){\n  var parent, domain, fn;\n  if(isNode && (parent = process.domain)){\n    process.domain = null;\n    parent.exit();\n  }\n  while(head){\n    domain = head.domain;\n    fn     = head.fn;\n    if(domain)domain.enter();\n    fn(); // <- currently we use it only for Promise - try / catch not required\n    if(domain)domain.exit();\n    head = head.next;\n  } last = undefined;\n  if(parent)parent.enter();\n};\n\n// Node.js\nif(isNode){\n  notify = function(){\n    process.nextTick(flush);\n  };\n// browsers with MutationObserver\n} else if(Observer){\n  var toggle = 1\n    , node   = document.createTextNode('');\n  new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new\n  notify = function(){\n    node.data = toggle = -toggle;\n  };\n// environments with maybe non-completely correct, but existent Promise\n} else if(Promise && Promise.resolve){\n  notify = function(){\n    Promise.resolve().then(flush);\n  };\n// for other environments - macrotask based on:\n// - setImmediate\n// - MessageChannel\n// - window.postMessag\n// - onreadystatechange\n// - setTimeout\n} else {\n  notify = function(){\n    // strange IE + webpack dev server bug - use .call(global)\n    macrotask.call(global, flush);\n  };\n}\n\nmodule.exports = function asap(fn){\n  var task = {fn: fn, next: undefined, domain: isNode && process.domain};\n  if(last)last.next = task;\n  if(!head){\n    head = task;\n    notify();\n  } last = task;\n};","module.exports = function(bitmap, value){\n  return {\n    enumerable  : !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable    : !(bitmap & 4),\n    value       : value\n  };\n};","var redefine = require('./$.redefine');\nmodule.exports = function(target, src){\n  for(var key in src)redefine(target, key, src[key]);\n  return target;\n};","module.exports = require('./$.hide');","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y){\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar getDesc  = require('./$').getDesc\n  , isObject = require('./$.is-object')\n  , anObject = require('./$.an-object');\nvar check = function(O, proto){\n  anObject(O);\n  if(!isObject(proto) && proto !== null)throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function(test, buggy, set){\n      try {\n        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch(e){ buggy = true; }\n      return function setPrototypeOf(O, proto){\n        check(O, proto);\n        if(buggy)O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};","'use strict';\nvar core        = require('./$.core')\n  , $           = require('./$')\n  , DESCRIPTORS = require('./$.descriptors')\n  , SPECIES     = require('./$.wks')('species');\n\nmodule.exports = function(KEY){\n  var C = core[KEY];\n  if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {\n    configurable: true,\n    get: function(){ return this; }\n  });\n};","var def = require('./$').setDesc\n  , has = require('./$.has')\n  , TAG = require('./$.wks')('toStringTag');\n\nmodule.exports = function(it, tag, stat){\n  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});\n};","var global = require('./$.global')\n  , SHARED = '__core-js_shared__'\n  , store  = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function(key){\n  return store[key] || (store[key] = {});\n};","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject  = require('./$.an-object')\n  , aFunction = require('./$.a-function')\n  , SPECIES   = require('./$.wks')('species');\nmodule.exports = function(O, D){\n  var C = anObject(O).constructor, S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};","module.exports = function(it, Constructor, name){\n  if(!(it instanceof Constructor))throw TypeError(name + \": use the 'new' operator!\");\n  return it;\n};","var toInteger = require('./$.to-integer')\n  , defined   = require('./$.defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function(TO_STRING){\n  return function(that, pos){\n    var s = String(defined(that))\n      , i = toInteger(pos)\n      , l = s.length\n      , a, b;\n    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};","var ctx                = require('./$.ctx')\n  , invoke             = require('./$.invoke')\n  , html               = require('./$.html')\n  , cel                = require('./$.dom-create')\n  , global             = require('./$.global')\n  , process            = global.process\n  , setTask            = global.setImmediate\n  , clearTask          = global.clearImmediate\n  , MessageChannel     = global.MessageChannel\n  , counter            = 0\n  , queue              = {}\n  , ONREADYSTATECHANGE = 'onreadystatechange'\n  , defer, channel, port;\nvar run = function(){\n  var id = +this;\n  if(queue.hasOwnProperty(id)){\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listner = function(event){\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif(!setTask || !clearTask){\n  setTask = function setImmediate(fn){\n    var args = [], i = 1;\n    while(arguments.length > i)args.push(arguments[i++]);\n    queue[++counter] = function(){\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id){\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if(require('./$.cof')(process) == 'process'){\n    defer = function(id){\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if(MessageChannel){\n    channel = new MessageChannel;\n    port    = channel.port2;\n    channel.port1.onmessage = listner;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){\n    defer = function(id){\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listner, false);\n  // IE8-\n  } else if(ONREADYSTATECHANGE in cel('script')){\n    defer = function(id){\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function(id){\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set:   setTask,\n  clear: clearTask\n};","// 7.1.4 ToInteger\nvar ceil  = Math.ceil\n  , floor = Math.floor;\nmodule.exports = function(it){\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./$.iobject')\n  , defined = require('./$.defined');\nmodule.exports = function(it){\n  return IObject(defined(it));\n};","// 7.1.15 ToLength\nvar toInteger = require('./$.to-integer')\n  , min       = Math.min;\nmodule.exports = function(it){\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};","var id = 0\n  , px = Math.random();\nmodule.exports = function(key){\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};","var store  = require('./$.shared')('wks')\n  , uid    = require('./$.uid')\n  , Symbol = require('./$.global').Symbol;\nmodule.exports = function(name){\n  return store[name] || (store[name] =\n    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));\n};","var classof   = require('./$.classof')\n  , ITERATOR  = require('./$.wks')('iterator')\n  , Iterators = require('./$.iterators');\nmodule.exports = require('./$.core').getIteratorMethod = function(it){\n  if(it != undefined)return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};","'use strict';\nvar addToUnscopables = require('./$.add-to-unscopables')\n  , step             = require('./$.iter-step')\n  , Iterators        = require('./$.iterators')\n  , toIObject        = require('./$.to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , kind  = this._k\n    , index = this._i++;\n  if(!O || index >= O.length){\n    this._t = undefined;\n    return step(1);\n  }\n  if(kind == 'keys'  )return step(0, index);\n  if(kind == 'values')return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');","'use strict';\nvar strong = require('./$.collection-strong');\n\n// 23.1 Map Objects\nrequire('./$.collection')('Map', function(get){\n  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key){\n    var entry = strong.getEntry(this, key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value){\n    return strong.def(this, key === 0 ? 0 : key, value);\n  }\n}, strong, true);","'use strict';\nvar $          = require('./$')\n  , LIBRARY    = require('./$.library')\n  , global     = require('./$.global')\n  , ctx        = require('./$.ctx')\n  , classof    = require('./$.classof')\n  , $export    = require('./$.export')\n  , isObject   = require('./$.is-object')\n  , anObject   = require('./$.an-object')\n  , aFunction  = require('./$.a-function')\n  , strictNew  = require('./$.strict-new')\n  , forOf      = require('./$.for-of')\n  , setProto   = require('./$.set-proto').set\n  , same       = require('./$.same-value')\n  , SPECIES    = require('./$.wks')('species')\n  , speciesConstructor = require('./$.species-constructor')\n  , asap       = require('./$.microtask')\n  , PROMISE    = 'Promise'\n  , process    = global.process\n  , isNode     = classof(process) == 'process'\n  , P          = global[PROMISE]\n  , Wrapper;\n\nvar testResolve = function(sub){\n  var test = new P(function(){});\n  if(sub)test.constructor = Object;\n  return P.resolve(test) === test;\n};\n\nvar USE_NATIVE = function(){\n  var works = false;\n  function P2(x){\n    var self = new P(x);\n    setProto(self, P2.prototype);\n    return self;\n  }\n  try {\n    works = P && P.resolve && testResolve();\n    setProto(P2, P);\n    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});\n    // actual Firefox has broken subclass support, test that\n    if(!(P2.resolve(5).then(function(){}) instanceof P2)){\n      works = false;\n    }\n    // actual V8 bug, https://code.google.com/p/v8/issues/detail?id=4162\n    if(works && require('./$.descriptors')){\n      var thenableThenGotten = false;\n      P.resolve($.setDesc({}, 'then', {\n        get: function(){ thenableThenGotten = true; }\n      }));\n      works = thenableThenGotten;\n    }\n  } catch(e){ works = false; }\n  return works;\n}();\n\n// helpers\nvar sameConstructor = function(a, b){\n  // library wrapper special case\n  if(LIBRARY && a === P && b === Wrapper)return true;\n  return same(a, b);\n};\nvar getConstructor = function(C){\n  var S = anObject(C)[SPECIES];\n  return S != undefined ? S : C;\n};\nvar isThenable = function(it){\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar PromiseCapability = function(C){\n  var resolve, reject;\n  this.promise = new C(function($$resolve, $$reject){\n    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject  = $$reject;\n  });\n  this.resolve = aFunction(resolve),\n  this.reject  = aFunction(reject)\n};\nvar perform = function(exec){\n  try {\n    exec();\n  } catch(e){\n    return {error: e};\n  }\n};\nvar notify = function(record, isReject){\n  if(record.n)return;\n  record.n = true;\n  var chain = record.c;\n  asap(function(){\n    var value = record.v\n      , ok    = record.s == 1\n      , i     = 0;\n    var run = function(reaction){\n      var handler = ok ? reaction.ok : reaction.fail\n        , resolve = reaction.resolve\n        , reject  = reaction.reject\n        , result, then;\n      try {\n        if(handler){\n          if(!ok)record.h = true;\n          result = handler === true ? value : handler(value);\n          if(result === reaction.promise){\n            reject(TypeError('Promise-chain cycle'));\n          } else if(then = isThenable(result)){\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch(e){\n        reject(e);\n      }\n    };\n    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach\n    chain.length = 0;\n    record.n = false;\n    if(isReject)setTimeout(function(){\n      var promise = record.p\n        , handler, console;\n      if(isUnhandled(promise)){\n        if(isNode){\n          process.emit('unhandledRejection', value, promise);\n        } else if(handler = global.onunhandledrejection){\n          handler({promise: promise, reason: value});\n        } else if((console = global.console) && console.error){\n          console.error('Unhandled promise rejection', value);\n        }\n      } record.a = undefined;\n    }, 1);\n  });\n};\nvar isUnhandled = function(promise){\n  var record = promise._d\n    , chain  = record.a || record.c\n    , i      = 0\n    , reaction;\n  if(record.h)return false;\n  while(chain.length > i){\n    reaction = chain[i++];\n    if(reaction.fail || !isUnhandled(reaction.promise))return false;\n  } return true;\n};\nvar $reject = function(value){\n  var record = this;\n  if(record.d)return;\n  record.d = true;\n  record = record.r || record; // unwrap\n  record.v = value;\n  record.s = 2;\n  record.a = record.c.slice();\n  notify(record, true);\n};\nvar $resolve = function(value){\n  var record = this\n    , then;\n  if(record.d)return;\n  record.d = true;\n  record = record.r || record; // unwrap\n  try {\n    if(record.p === value)throw TypeError(\"Promise can't be resolved itself\");\n    if(then = isThenable(value)){\n      asap(function(){\n        var wrapper = {r: record, d: false}; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch(e){\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      record.v = value;\n      record.s = 1;\n      notify(record, false);\n    }\n  } catch(e){\n    $reject.call({r: record, d: false}, e); // wrap\n  }\n};\n\n// constructor polyfill\nif(!USE_NATIVE){\n  // 25.4.3.1 Promise(executor)\n  P = function Promise(executor){\n    aFunction(executor);\n    var record = this._d = {\n      p: strictNew(this, P, PROMISE),         // <- promise\n      c: [],                                  // <- awaiting reactions\n      a: undefined,                           // <- checked in isUnhandled reactions\n      s: 0,                                   // <- state\n      d: false,                               // <- done\n      v: undefined,                           // <- value\n      h: false,                               // <- handled rejection\n      n: false                                // <- notify\n    };\n    try {\n      executor(ctx($resolve, record, 1), ctx($reject, record, 1));\n    } catch(err){\n      $reject.call(record, err);\n    }\n  };\n  require('./$.redefine-all')(P.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected){\n      var reaction = new PromiseCapability(speciesConstructor(this, P))\n        , promise  = reaction.promise\n        , record   = this._d;\n      reaction.ok   = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      record.c.push(reaction);\n      if(record.a)record.a.push(reaction);\n      if(record.s)notify(record, false);\n      return promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function(onRejected){\n      return this.then(undefined, onRejected);\n    }\n  });\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: P});\nrequire('./$.set-to-string-tag')(P, PROMISE);\nrequire('./$.set-species')(PROMISE);\nWrapper = require('./$.core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r){\n    var capability = new PromiseCapability(this)\n      , $$reject   = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x){\n    // instanceof instead of internal slot check because we should fix it without replacement native Promise core\n    if(x instanceof P && sameConstructor(x.constructor, this))return x;\n    var capability = new PromiseCapability(this)\n      , $$resolve  = capability.resolve;\n    $$resolve(x);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./$.iter-detect')(function(iter){\n  P.all(iter)['catch'](function(){});\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable){\n    var C          = getConstructor(this)\n      , capability = new PromiseCapability(C)\n      , resolve    = capability.resolve\n      , reject     = capability.reject\n      , values     = [];\n    var abrupt = perform(function(){\n      forOf(iterable, false, values.push, values);\n      var remaining = values.length\n        , results   = Array(remaining);\n      if(remaining)$.each.call(values, function(promise, index){\n        var alreadyCalled = false;\n        C.resolve(promise).then(function(value){\n          if(alreadyCalled)return;\n          alreadyCalled = true;\n          results[index] = value;\n          --remaining || resolve(results);\n        }, reject);\n      });\n      else resolve(results);\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable){\n    var C          = getConstructor(this)\n      , capability = new PromiseCapability(C)\n      , reject     = capability.reject;\n    var abrupt = perform(function(){\n      forOf(iterable, false, function(promise){\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if(abrupt)reject(abrupt.error);\n    return capability.promise;\n  }\n});","'use strict';\nvar $at  = require('./$.string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./$.iter-define')(String, 'String', function(iterated){\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function(){\n  var O     = this._t\n    , index = this._i\n    , point;\n  if(index >= O.length)return {value: undefined, done: true};\n  point = $at(O, index);\n  this._i += point.length;\n  return {value: point, done: false};\n});","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export  = require('./$.export');\n\n$export($export.P, 'Map', {toJSON: require('./$.collection-to-json')('Map')});","require('./es6.array.iterator');\nvar Iterators = require('./$.iterators');\nIterators.NodeList = Iterators.HTMLCollection = Iterators.Array;","var opendolphin;\n(function (opendolphin) {\n    var Attribute = (function () {\n        function Attribute() {\n        }\n        Attribute.QUALIFIER_PROPERTY = \"qualifier\";\n        Attribute.DIRTY_PROPERTY = \"dirty\";\n        Attribute.BASE_VALUE = \"baseValue\";\n        Attribute.VALUE = \"value\";\n        Attribute.TAG = \"tag\";\n        return Attribute;\n    })();\n    opendolphin.Attribute = Attribute;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Command = (function () {\n        function Command() {\n            this.id = \"dolphin-core-command\";\n        }\n        return Command;\n    })();\n    opendolphin.Command = Command;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Tag = (function () {\n        function Tag() {\n        }\n        //Implemented as function so that it will never be changed from outside\n        /** The actual value of the attribute. This is the default if no tag is given.*/\n        Tag.value = function () {\n            return \"VALUE\";\n        };\n        /** the to-be-displayed String, not the key. I18N happens on the server. */\n        Tag.label = function () {\n            return \"LABEL\";\n        };\n        /** If the attribute represent tooltip**/\n        Tag.tooltip = function () {\n            return \"TOOLTIP\";\n        };\n        /** \"true\" or \"false\", maps to Grails constraint nullable:false */\n        Tag.mandatory = function () {\n            return \"MANDATORY\";\n        };\n        /** \"true\" or \"false\", maps to Grails constraint display:true */\n        Tag.visible = function () {\n            return \"VISIBLE\";\n        };\n        /** \"true\" or \"false\" */\n        Tag.enabled = function () {\n            return \"ENABLED\";\n        };\n        /** regular expression for local, syntactical constraints like in \"rejectField\" */\n        Tag.regex = function () {\n            return \"REGEX\";\n        };\n        /** a single text; e.g. \"textArea\" if the String value should be displayed in a text area instead of a textField */\n        Tag.widgetHint = function () {\n            return \"WIDGET_HINT\";\n        };\n        /** a single text; e.g. \"java.util.Date\" if the value String represents a date */\n        Tag.valueType = function () {\n            return \"VALUE_TYPE\";\n        };\n        return Tag;\n    })();\n    opendolphin.Tag = Tag;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    __.prototype = b.prototype;\n    d.prototype = new __();\n};\nvar opendolphin;\n(function (opendolphin) {\n    var AttributeCreatedNotification = (function (_super) {\n        __extends(AttributeCreatedNotification, _super);\n        function AttributeCreatedNotification(pmId, attributeId, propertyName, newValue, qualifier, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            _super.call(this);\n            this.pmId = pmId;\n            this.attributeId = attributeId;\n            this.propertyName = propertyName;\n            this.newValue = newValue;\n            this.qualifier = qualifier;\n            this.tag = tag;\n            this.id = 'AttributeCreated';\n            this.className = \"org.opendolphin.core.comm.AttributeCreatedNotification\";\n        }\n        return AttributeCreatedNotification;\n    })(opendolphin.Command);\n    opendolphin.AttributeCreatedNotification = AttributeCreatedNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var AttributeMetadataChangedCommand = (function (_super) {\n        __extends(AttributeMetadataChangedCommand, _super);\n        function AttributeMetadataChangedCommand(attributeId, metadataName, value) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.metadataName = metadataName;\n            this.value = value;\n            this.id = 'AttributeMetadataChanged';\n            this.className = \"org.opendolphin.core.comm.AttributeMetadataChangedCommand\";\n        }\n        return AttributeMetadataChangedCommand;\n    })(opendolphin.Command);\n    opendolphin.AttributeMetadataChangedCommand = AttributeMetadataChangedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var BaseValueChangedCommand = (function (_super) {\n        __extends(BaseValueChangedCommand, _super);\n        function BaseValueChangedCommand(attributeId) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.id = 'BaseValueChanged';\n            this.className = \"org.opendolphin.core.comm.BaseValueChangedCommand\";\n        }\n        return BaseValueChangedCommand;\n    })(opendolphin.Command);\n    opendolphin.BaseValueChangedCommand = BaseValueChangedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var CallNamedActionCommand = (function (_super) {\n        __extends(CallNamedActionCommand, _super);\n        function CallNamedActionCommand(actionName) {\n            _super.call(this);\n            this.actionName = actionName;\n            this.id = 'CallNamedAction';\n            this.className = \"org.opendolphin.core.comm.CallNamedActionCommand\";\n        }\n        return CallNamedActionCommand;\n    })(opendolphin.Command);\n    opendolphin.CallNamedActionCommand = CallNamedActionCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ChangeAttributeMetadataCommand = (function (_super) {\n        __extends(ChangeAttributeMetadataCommand, _super);\n        function ChangeAttributeMetadataCommand(attributeId, metadataName, value) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.metadataName = metadataName;\n            this.value = value;\n            this.id = 'ChangeAttributeMetadata';\n            this.className = \"org.opendolphin.core.comm.ChangeAttributeMetadataCommand\";\n        }\n        return ChangeAttributeMetadataCommand;\n    })(opendolphin.Command);\n    opendolphin.ChangeAttributeMetadataCommand = ChangeAttributeMetadataCommand;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var EventBus = (function () {\n        function EventBus() {\n            this.eventHandlers = [];\n        }\n        EventBus.prototype.onEvent = function (eventHandler) {\n            this.eventHandlers.push(eventHandler);\n        };\n        EventBus.prototype.trigger = function (event) {\n            this.eventHandlers.forEach(function (handle) { return handle(event); });\n        };\n        return EventBus;\n    })();\n    opendolphin.EventBus = EventBus;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"EventBus.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var presentationModelInstanceCount = 0; // todo dk: consider making this static in class\n    var ClientPresentationModel = (function () {\n        function ClientPresentationModel(id, presentationModelType) {\n            this.id = id;\n            this.presentationModelType = presentationModelType;\n            this.attributes = [];\n            this.clientSideOnly = false;\n            this.dirty = false;\n            if (typeof id !== 'undefined' && id != null) {\n                this.id = id;\n            }\n            else {\n                this.id = (presentationModelInstanceCount++).toString();\n            }\n            this.invalidBus = new opendolphin.EventBus();\n            this.dirtyValueChangeBus = new opendolphin.EventBus();\n        }\n        // todo dk: align with Java version: move to ClientDolphin and auto-add to model store\n        /** a copy constructor for anything but IDs. Per default, copies are client side only, no automatic update applies. */\n        ClientPresentationModel.prototype.copy = function () {\n            var result = new ClientPresentationModel(null, this.presentationModelType);\n            result.clientSideOnly = true;\n            this.getAttributes().forEach(function (attribute) {\n                var attributeCopy = attribute.copy();\n                result.addAttribute(attributeCopy);\n            });\n            return result;\n        };\n        //add array of attributes\n        ClientPresentationModel.prototype.addAttributes = function (attributes) {\n            var _this = this;\n            if (!attributes || attributes.length < 1)\n                return;\n            attributes.forEach(function (attr) {\n                _this.addAttribute(attr);\n            });\n        };\n        ClientPresentationModel.prototype.addAttribute = function (attribute) {\n            var _this = this;\n            if (!attribute || (this.attributes.indexOf(attribute) > -1)) {\n                return;\n            }\n            if (this.findAttributeByPropertyNameAndTag(attribute.propertyName, attribute.tag)) {\n                throw new Error(\"There already is an attribute with property name: \" + attribute.propertyName\n                    + \" and tag: \" + attribute.tag + \" in presentation model with id: \" + this.id);\n            }\n            if (attribute.getQualifier() && this.findAttributeByQualifier(attribute.getQualifier())) {\n                throw new Error(\"There already is an attribute with qualifier: \" + attribute.getQualifier()\n                    + \" in presentation model with id: \" + this.id);\n            }\n            attribute.setPresentationModel(this);\n            this.attributes.push(attribute);\n            if (attribute.tag == opendolphin.Tag.value()) {\n                this.updateDirty();\n            }\n            attribute.onValueChange(function (evt) {\n                _this.invalidBus.trigger({ source: _this });\n            });\n        };\n        ClientPresentationModel.prototype.updateDirty = function () {\n            for (var i = 0; i < this.attributes.length; i++) {\n                if (this.attributes[i].isDirty()) {\n                    this.setDirty(true);\n                    return;\n                }\n            }\n            ;\n            this.setDirty(false);\n        };\n        ClientPresentationModel.prototype.updateAttributeDirtyness = function () {\n            for (var i = 0; i < this.attributes.length; i++) {\n                this.attributes[i].updateDirty();\n            }\n        };\n        ClientPresentationModel.prototype.isDirty = function () {\n            return this.dirty;\n        };\n        ClientPresentationModel.prototype.setDirty = function (dirty) {\n            var oldVal = this.dirty;\n            this.dirty = dirty;\n            this.dirtyValueChangeBus.trigger({ 'oldValue': oldVal, 'newValue': this.dirty });\n        };\n        ClientPresentationModel.prototype.reset = function () {\n            this.attributes.forEach(function (attribute) {\n                attribute.reset();\n            });\n        };\n        ClientPresentationModel.prototype.rebase = function () {\n            this.attributes.forEach(function (attribute) {\n                attribute.rebase();\n            });\n        };\n        ClientPresentationModel.prototype.onDirty = function (eventHandler) {\n            this.dirtyValueChangeBus.onEvent(eventHandler);\n        };\n        ClientPresentationModel.prototype.onInvalidated = function (handleInvalidate) {\n            this.invalidBus.onEvent(handleInvalidate);\n        };\n        /** returns a copy of the internal state */\n        ClientPresentationModel.prototype.getAttributes = function () {\n            return this.attributes.slice(0);\n        };\n        ClientPresentationModel.prototype.getAt = function (propertyName, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            return this.findAttributeByPropertyNameAndTag(propertyName, tag);\n        };\n        ClientPresentationModel.prototype.findAttributeByPropertyName = function (propertyName) {\n            return this.findAttributeByPropertyNameAndTag(propertyName, opendolphin.Tag.value());\n        };\n        ClientPresentationModel.prototype.findAllAttributesByPropertyName = function (propertyName) {\n            var result = [];\n            if (!propertyName)\n                return null;\n            this.attributes.forEach(function (attribute) {\n                if (attribute.propertyName == propertyName) {\n                    result.push(attribute);\n                }\n            });\n            return result;\n        };\n        ClientPresentationModel.prototype.findAttributeByPropertyNameAndTag = function (propertyName, tag) {\n            if (!propertyName || !tag)\n                return null;\n            for (var i = 0; i < this.attributes.length; i++) {\n                if ((this.attributes[i].propertyName == propertyName) && (this.attributes[i].tag == tag)) {\n                    return this.attributes[i];\n                }\n            }\n            return null;\n        };\n        ClientPresentationModel.prototype.findAttributeByQualifier = function (qualifier) {\n            if (!qualifier)\n                return null;\n            for (var i = 0; i < this.attributes.length; i++) {\n                if (this.attributes[i].getQualifier() == qualifier) {\n                    return this.attributes[i];\n                }\n            }\n            ;\n            return null;\n        };\n        ClientPresentationModel.prototype.findAttributeById = function (id) {\n            if (!id)\n                return null;\n            for (var i = 0; i < this.attributes.length; i++) {\n                if (this.attributes[i].id == id) {\n                    return this.attributes[i];\n                }\n            }\n            ;\n            return null;\n        };\n        ClientPresentationModel.prototype.syncWith = function (sourcePresentationModel) {\n            this.attributes.forEach(function (targetAttribute) {\n                var sourceAttribute = sourcePresentationModel.getAt(targetAttribute.propertyName, targetAttribute.tag);\n                if (sourceAttribute) {\n                    targetAttribute.syncWith(sourceAttribute);\n                }\n            });\n        };\n        return ClientPresentationModel;\n    })();\n    opendolphin.ClientPresentationModel = ClientPresentationModel;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"EventBus.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ClientAttribute = (function () {\n        function ClientAttribute(propertyName, qualifier, value, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            this.propertyName = propertyName;\n            this.tag = tag;\n            this.dirty = false;\n            this.id = \"\" + (ClientAttribute.clientAttributeInstanceCount++) + \"C\";\n            this.valueChangeBus = new opendolphin.EventBus();\n            this.qualifierChangeBus = new opendolphin.EventBus();\n            this.dirtyValueChangeBus = new opendolphin.EventBus();\n            this.baseValueChangeBus = new opendolphin.EventBus();\n            this.setValue(value);\n            this.setBaseValue(value);\n            this.setQualifier(qualifier);\n        }\n        /** a copy constructor with new id and no presentation model */\n        ClientAttribute.prototype.copy = function () {\n            var result = new ClientAttribute(this.propertyName, this.getQualifier(), this.getValue(), this.tag);\n            result.setBaseValue(this.getBaseValue());\n            return result;\n        };\n        ClientAttribute.prototype.isDirty = function () {\n            return this.dirty;\n        };\n        ClientAttribute.prototype.getBaseValue = function () {\n            return this.baseValue;\n        };\n        ClientAttribute.prototype.setPresentationModel = function (presentationModel) {\n            if (this.presentationModel) {\n                alert(\"You can not set a presentation model for an attribute that is already bound.\");\n            }\n            this.presentationModel = presentationModel;\n        };\n        ClientAttribute.prototype.getPresentationModel = function () {\n            return this.presentationModel;\n        };\n        ClientAttribute.prototype.getValue = function () {\n            return this.value;\n        };\n        ClientAttribute.prototype.setValue = function (newValue) {\n            var verifiedValue = ClientAttribute.checkValue(newValue);\n            if (this.value == verifiedValue)\n                return;\n            var oldValue = this.value;\n            this.value = verifiedValue;\n            this.setDirty(this.calculateDirty(this.baseValue, verifiedValue));\n            this.valueChangeBus.trigger({ 'oldValue': oldValue, 'newValue': verifiedValue });\n        };\n        ClientAttribute.prototype.calculateDirty = function (baseValue, value) {\n            if (baseValue == null) {\n                return value != null;\n            }\n            else {\n                return baseValue != value;\n            }\n        };\n        ClientAttribute.prototype.updateDirty = function () {\n            this.setDirty(this.calculateDirty(this.baseValue, this.value));\n        };\n        ClientAttribute.prototype.setDirty = function (dirty) {\n            var oldVal = this.dirty;\n            this.dirty = dirty;\n            this.dirtyValueChangeBus.trigger({ 'oldValue': oldVal, 'newValue': this.dirty });\n            if (this.presentationModel)\n                this.presentationModel.updateDirty();\n        };\n        ClientAttribute.prototype.setQualifier = function (newQualifier) {\n            if (this.qualifier == newQualifier)\n                return;\n            var oldQualifier = this.qualifier;\n            this.qualifier = newQualifier;\n            this.qualifierChangeBus.trigger({ 'oldValue': oldQualifier, 'newValue': newQualifier });\n        };\n        ClientAttribute.prototype.getQualifier = function () {\n            return this.qualifier;\n        };\n        ClientAttribute.prototype.setBaseValue = function (baseValue) {\n            if (this.baseValue == baseValue)\n                return;\n            var oldBaseValue = this.baseValue;\n            this.baseValue = baseValue;\n            this.setDirty(this.calculateDirty(baseValue, this.value));\n            this.baseValueChangeBus.trigger({ 'oldValue': oldBaseValue, 'newValue': baseValue });\n        };\n        ClientAttribute.prototype.rebase = function () {\n            this.setBaseValue(this.value);\n            this.setDirty(false); // this is not superfluous!\n        };\n        ClientAttribute.prototype.reset = function () {\n            this.setValue(this.baseValue);\n            this.setDirty(false); // this is not superfluous!\n        };\n        ClientAttribute.checkValue = function (value) {\n            if (value == null || value == undefined) {\n                return null;\n            }\n            var result = value;\n            if (result instanceof String || result instanceof Boolean || result instanceof Number) {\n                result = value.valueOf();\n            }\n            if (result instanceof ClientAttribute) {\n                console.log(\"An Attribute may not itself contain an attribute as a value. Assuming you forgot to call value.\");\n                result = this.checkValue(value.value);\n            }\n            var ok = false;\n            if (this.SUPPORTED_VALUE_TYPES.indexOf(typeof result) > -1 || result instanceof Date) {\n                ok = true;\n            }\n            if (!ok) {\n                throw new Error(\"Attribute values of this type are not allowed: \" + typeof value);\n            }\n            return result;\n        };\n        ClientAttribute.prototype.onValueChange = function (eventHandler) {\n            this.valueChangeBus.onEvent(eventHandler);\n            eventHandler({ \"oldValue\": this.value, \"newValue\": this.value });\n        };\n        ClientAttribute.prototype.onQualifierChange = function (eventHandler) {\n            this.qualifierChangeBus.onEvent(eventHandler);\n        };\n        ClientAttribute.prototype.onDirty = function (eventHandler) {\n            this.dirtyValueChangeBus.onEvent(eventHandler);\n        };\n        ClientAttribute.prototype.onBaseValueChange = function (eventHandler) {\n            this.baseValueChangeBus.onEvent(eventHandler);\n        };\n        ClientAttribute.prototype.syncWith = function (sourceAttribute) {\n            if (sourceAttribute) {\n                this.setQualifier(sourceAttribute.getQualifier()); // sequence is important\n                this.setBaseValue(sourceAttribute.getBaseValue());\n                this.setValue(sourceAttribute.value);\n            }\n        };\n        ClientAttribute.SUPPORTED_VALUE_TYPES = [\"string\", \"number\", \"boolean\"];\n        ClientAttribute.clientAttributeInstanceCount = 0;\n        return ClientAttribute;\n    })();\n    opendolphin.ClientAttribute = ClientAttribute;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var ValueChangedCommand = (function (_super) {\n        __extends(ValueChangedCommand, _super);\n        function ValueChangedCommand(attributeId, oldValue, newValue) {\n            _super.call(this);\n            this.attributeId = attributeId;\n            this.oldValue = oldValue;\n            this.newValue = newValue;\n            this.id = \"ValueChanged\";\n            this.className = \"org.opendolphin.core.comm.ValueChangedCommand\";\n        }\n        return ValueChangedCommand;\n    })(opendolphin.Command);\n    opendolphin.ValueChangedCommand = ValueChangedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var NamedCommand = (function (_super) {\n        __extends(NamedCommand, _super);\n        function NamedCommand(name) {\n            _super.call(this);\n            this.id = name;\n            this.className = \"org.opendolphin.core.comm.NamedCommand\";\n        }\n        return NamedCommand;\n    })(opendolphin.Command);\n    opendolphin.NamedCommand = NamedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var EmptyNotification = (function (_super) {\n        __extends(EmptyNotification, _super);\n        function EmptyNotification() {\n            _super.call(this);\n            this.id = \"Empty\";\n            this.className = \"org.opendolphin.core.comm.EmptyNotification\";\n        }\n        return EmptyNotification;\n    })(opendolphin.Command);\n    opendolphin.EmptyNotification = EmptyNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"ValueChangedCommand.ts\"/>\n/// <reference path=\"NamedCommand.ts\"/>\n/// <reference path=\"EmptyNotification.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    /** A Batcher that does no batching but merely takes the first element of the queue as the single item in the batch */\n    var NoCommandBatcher = (function () {\n        function NoCommandBatcher() {\n        }\n        NoCommandBatcher.prototype.batch = function (queue) {\n            return [queue.shift()];\n        };\n        return NoCommandBatcher;\n    })();\n    opendolphin.NoCommandBatcher = NoCommandBatcher;\n    /** A batcher that batches the blinds (commands with no callback) and optionally also folds value changes */\n    var BlindCommandBatcher = (function () {\n        /** folding: whether we should try folding ValueChangedCommands */\n        function BlindCommandBatcher(folding, maxBatchSize) {\n            if (folding === void 0) { folding = true; }\n            if (maxBatchSize === void 0) { maxBatchSize = 50; }\n            this.folding = folding;\n            this.maxBatchSize = maxBatchSize;\n        }\n        BlindCommandBatcher.prototype.batch = function (queue) {\n            var result = [];\n            this.processNext(this.maxBatchSize, queue, result); // do not batch more than this.maxBatchSize commands to avoid stack overflow on recursion.\n            return result;\n        };\n        // recursive impl method to side-effect both queue and batch\n        BlindCommandBatcher.prototype.processNext = function (maxBatchSize, queue, batch) {\n            if (queue.length < 1 || maxBatchSize < 1)\n                return;\n            var candidate = queue.shift();\n            if (this.folding && candidate.command instanceof opendolphin.ValueChangedCommand && (!candidate.handler)) {\n                var found = null;\n                var canCmd = candidate.command;\n                for (var i = 0; i < batch.length && found == null; i++) {\n                    if (batch[i].command instanceof opendolphin.ValueChangedCommand) {\n                        var batchCmd = batch[i].command;\n                        if (canCmd.attributeId == batchCmd.attributeId && batchCmd.newValue == canCmd.oldValue) {\n                            found = batchCmd;\n                        }\n                    }\n                }\n                if (found) {\n                    found.newValue = canCmd.newValue; // change existing value, do not batch\n                }\n                else {\n                    batch.push(candidate); // we cannot merge, so batch the candidate\n                }\n            }\n            else {\n                batch.push(candidate);\n            }\n            if (!candidate.handler &&\n                !(candidate.command['className'] == \"org.opendolphin.core.comm.NamedCommand\") &&\n                !(candidate.command['className'] == \"org.opendolphin.core.comm.EmptyNotification\") // and no unknown client side effect\n            ) {\n                this.processNext(maxBatchSize - 1, queue, batch); // then we can proceed with batching\n            }\n        };\n        return BlindCommandBatcher;\n    })();\n    opendolphin.BlindCommandBatcher = BlindCommandBatcher;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Codec = (function () {\n        function Codec() {\n        }\n        Codec.prototype.encode = function (commands) {\n            return JSON.stringify(commands); // todo dk: look for possible API support for character encoding\n        };\n        Codec.prototype.decode = function (transmitted) {\n            if (typeof transmitted == 'string') {\n                return JSON.parse(transmitted);\n            }\n            else {\n                return transmitted;\n            }\n        };\n        return Codec;\n    })();\n    opendolphin.Codec = Codec;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var SignalCommand = (function (_super) {\n        __extends(SignalCommand, _super);\n        function SignalCommand(name) {\n            _super.call(this);\n            this.id = name;\n            this.className = \"org.opendolphin.core.comm.SignalCommand\";\n        }\n        return SignalCommand;\n    })(opendolphin.Command);\n    opendolphin.SignalCommand = SignalCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var CreatePresentationModelCommand = (function (_super) {\n        __extends(CreatePresentationModelCommand, _super);\n        function CreatePresentationModelCommand(presentationModel) {\n            _super.call(this);\n            this.attributes = [];\n            this.clientSideOnly = false;\n            this.id = \"CreatePresentationModel\";\n            this.className = \"org.opendolphin.core.comm.CreatePresentationModelCommand\";\n            this.pmId = presentationModel.id;\n            this.pmType = presentationModel.presentationModelType;\n            var attrs = this.attributes;\n            presentationModel.getAttributes().forEach(function (attr) {\n                attrs.push({\n                    propertyName: attr.propertyName,\n                    id: attr.id,\n                    qualifier: attr.getQualifier(),\n                    value: attr.getValue(),\n                    tag: attr.tag\n                });\n            });\n        }\n        return CreatePresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.CreatePresentationModelCommand = CreatePresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\nvar opendolphin;\n(function (opendolphin) {\n    var Map = (function () {\n        function Map() {\n            this.keys = [];\n            this.data = [];\n        }\n        Map.prototype.put = function (key, value) {\n            if (!this.containsKey(key)) {\n                this.keys.push(key);\n            }\n            this.data[this.keys.indexOf(key)] = value;\n        };\n        Map.prototype.get = function (key) {\n            return this.data[this.keys.indexOf(key)];\n        };\n        Map.prototype.remove = function (key) {\n            if (this.containsKey(key)) {\n                var index = this.keys.indexOf(key);\n                this.keys.splice(index, 1);\n                this.data.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        Map.prototype.isEmpty = function () {\n            return this.keys.length == 0;\n        };\n        Map.prototype.length = function () {\n            return this.keys.length;\n        };\n        Map.prototype.forEach = function (handler) {\n            for (var i = 0; i < this.keys.length; i++) {\n                handler(this.keys[i], this.data[i]);\n            }\n        };\n        Map.prototype.containsKey = function (key) {\n            return this.keys.indexOf(key) > -1;\n        };\n        Map.prototype.containsValue = function (value) {\n            return this.data.indexOf(value) > -1;\n        };\n        Map.prototype.values = function () {\n            return this.data.slice(0);\n        };\n        Map.prototype.keySet = function () {\n            return this.keys.slice(0);\n        };\n        return Map;\n    })();\n    opendolphin.Map = Map;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeletedAllPresentationModelsOfTypeNotification = (function (_super) {\n        __extends(DeletedAllPresentationModelsOfTypeNotification, _super);\n        function DeletedAllPresentationModelsOfTypeNotification(pmType) {\n            _super.call(this);\n            this.pmType = pmType;\n            this.id = 'DeletedAllPresentationModelsOfType';\n            this.className = \"org.opendolphin.core.comm.DeletedAllPresentationModelsOfTypeNotification\";\n        }\n        return DeletedAllPresentationModelsOfTypeNotification;\n    })(opendolphin.Command);\n    opendolphin.DeletedAllPresentationModelsOfTypeNotification = DeletedAllPresentationModelsOfTypeNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeletedPresentationModelNotification = (function (_super) {\n        __extends(DeletedPresentationModelNotification, _super);\n        function DeletedPresentationModelNotification(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'DeletedPresentationModel';\n            this.className = \"org.opendolphin.core.comm.DeletedPresentationModelNotification\";\n        }\n        return DeletedPresentationModelNotification;\n    })(opendolphin.Command);\n    opendolphin.DeletedPresentationModelNotification = DeletedPresentationModelNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\"/>\n/// <reference path=\"ClientDolphin.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"CreatePresentationModelCommand.ts\"/>\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"ValueChangedCommand.ts\"/>\n/// <reference path=\"ChangeAttributeMetadataCommand.ts\"/>\n/// <reference path=\"Attribute.ts\"/>\n/// <reference path=\"Map.ts\"/>\n/// <reference path=\"DeletedAllPresentationModelsOfTypeNotification.ts\"/>\n/// <reference path=\"EventBus.ts\"/>\n/// <reference path=\"ClientPresentationModel.ts\"/>\n/// <reference path=\"DeletedPresentationModelNotification.ts\"/>\n/// <reference path=\"BaseValueChangedCommand.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    (function (Type) {\n        Type[Type[\"ADDED\"] = 'ADDED'] = \"ADDED\";\n        Type[Type[\"REMOVED\"] = 'REMOVED'] = \"REMOVED\";\n    })(opendolphin.Type || (opendolphin.Type = {}));\n    var Type = opendolphin.Type;\n    var ClientModelStore = (function () {\n        function ClientModelStore(clientDolphin) {\n            this.clientDolphin = clientDolphin;\n            this.presentationModels = new opendolphin.Map();\n            this.presentationModelsPerType = new opendolphin.Map();\n            this.attributesPerId = new opendolphin.Map();\n            this.attributesPerQualifier = new opendolphin.Map();\n            this.modelStoreChangeBus = new opendolphin.EventBus();\n        }\n        ClientModelStore.prototype.getClientDolphin = function () {\n            return this.clientDolphin;\n        };\n        ClientModelStore.prototype.registerModel = function (model) {\n            var _this = this;\n            if (model.clientSideOnly) {\n                return;\n            }\n            var connector = this.clientDolphin.getClientConnector();\n            var createPMCommand = new opendolphin.CreatePresentationModelCommand(model);\n            connector.send(createPMCommand, null);\n            model.getAttributes().forEach(function (attribute) {\n                _this.registerAttribute(attribute);\n            });\n        };\n        ClientModelStore.prototype.registerAttribute = function (attribute) {\n            var _this = this;\n            this.addAttributeById(attribute);\n            if (attribute.getQualifier()) {\n                this.addAttributeByQualifier(attribute);\n            }\n            // whenever an attribute changes its value, the server needs to be notified\n            // and all other attributes with the same qualifier are given the same value\n            attribute.onValueChange(function (evt) {\n                var valueChangeCommand = new opendolphin.ValueChangedCommand(attribute.id, evt.oldValue, evt.newValue);\n                _this.clientDolphin.getClientConnector().send(valueChangeCommand, null);\n                if (attribute.getQualifier()) {\n                    var attrs = _this.findAttributesByFilter(function (attr) {\n                        return attr !== attribute && attr.getQualifier() == attribute.getQualifier();\n                    });\n                    attrs.forEach(function (attr) {\n                        attr.setValue(attribute.getValue());\n                    });\n                }\n            });\n            // all attributes with the same qualifier should have the same base value\n            attribute.onBaseValueChange(function (evt) {\n                var baseValueChangeCommand = new opendolphin.BaseValueChangedCommand(attribute.id);\n                _this.clientDolphin.getClientConnector().send(baseValueChangeCommand, null);\n                if (attribute.getQualifier()) {\n                    var attrs = _this.findAttributesByFilter(function (attr) {\n                        return attr !== attribute && attr.getQualifier() == attribute.getQualifier();\n                    });\n                    attrs.forEach(function (attr) {\n                        attr.setBaseValue(attribute.getBaseValue());\n                    });\n                }\n            });\n            attribute.onQualifierChange(function (evt) {\n                var changeAttrMetadataCmd = new opendolphin.ChangeAttributeMetadataCommand(attribute.id, opendolphin.Attribute.QUALIFIER_PROPERTY, evt.newValue);\n                _this.clientDolphin.getClientConnector().send(changeAttrMetadataCmd, null);\n            });\n        };\n        ClientModelStore.prototype.add = function (model) {\n            if (!model) {\n                return false;\n            }\n            if (this.presentationModels.containsKey(model.id)) {\n                console.log(\"There already is a PM with id \" + model.id);\n            }\n            var added = false;\n            if (!this.presentationModels.containsValue(model)) {\n                this.presentationModels.put(model.id, model);\n                this.addPresentationModelByType(model);\n                this.registerModel(model);\n                this.modelStoreChangeBus.trigger({ 'eventType': Type.ADDED, 'clientPresentationModel': model });\n                added = true;\n            }\n            return added;\n        };\n        ClientModelStore.prototype.remove = function (model) {\n            var _this = this;\n            if (!model) {\n                return false;\n            }\n            var removed = false;\n            if (this.presentationModels.containsValue(model)) {\n                this.removePresentationModelByType(model);\n                this.presentationModels.remove(model.id);\n                model.getAttributes().forEach(function (attribute) {\n                    _this.removeAttributeById(attribute);\n                    if (attribute.getQualifier()) {\n                        _this.removeAttributeByQualifier(attribute);\n                    }\n                });\n                this.modelStoreChangeBus.trigger({ 'eventType': Type.REMOVED, 'clientPresentationModel': model });\n                removed = true;\n            }\n            return removed;\n        };\n        ClientModelStore.prototype.findAttributesByFilter = function (filter) {\n            var matches = [];\n            this.presentationModels.forEach(function (key, model) {\n                model.getAttributes().forEach(function (attr) {\n                    if (filter(attr)) {\n                        matches.push(attr);\n                    }\n                });\n            });\n            return matches;\n        };\n        ClientModelStore.prototype.addPresentationModelByType = function (model) {\n            if (!model) {\n                return;\n            }\n            var type = model.presentationModelType;\n            if (!type) {\n                return;\n            }\n            var presentationModels = this.presentationModelsPerType.get(type);\n            if (!presentationModels) {\n                presentationModels = [];\n                this.presentationModelsPerType.put(type, presentationModels);\n            }\n            if (!(presentationModels.indexOf(model) > -1)) {\n                presentationModels.push(model);\n            }\n        };\n        ClientModelStore.prototype.removePresentationModelByType = function (model) {\n            if (!model || !(model.presentationModelType)) {\n                return;\n            }\n            var presentationModels = this.presentationModelsPerType.get(model.presentationModelType);\n            if (!presentationModels) {\n                return;\n            }\n            if (presentationModels.length > -1) {\n                presentationModels.splice(presentationModels.indexOf(model), 1);\n            }\n            if (presentationModels.length === 0) {\n                this.presentationModelsPerType.remove(model.presentationModelType);\n            }\n        };\n        ClientModelStore.prototype.listPresentationModelIds = function () {\n            return this.presentationModels.keySet().slice(0);\n        };\n        ClientModelStore.prototype.listPresentationModels = function () {\n            return this.presentationModels.values();\n        };\n        ClientModelStore.prototype.findPresentationModelById = function (id) {\n            return this.presentationModels.get(id);\n        };\n        ClientModelStore.prototype.findAllPresentationModelByType = function (type) {\n            if (!type || !this.presentationModelsPerType.containsKey(type)) {\n                return [];\n            }\n            return this.presentationModelsPerType.get(type).slice(0); // slice is used to clone the array\n        };\n        ClientModelStore.prototype.deleteAllPresentationModelOfType = function (presentationModelType) {\n            var _this = this;\n            var presentationModels = this.findAllPresentationModelByType(presentationModelType);\n            presentationModels.forEach(function (pm) {\n                _this.deletePresentationModel(pm, false);\n            });\n            this.clientDolphin.getClientConnector().send(new opendolphin.DeletedAllPresentationModelsOfTypeNotification(presentationModelType), undefined);\n        };\n        ClientModelStore.prototype.deletePresentationModel = function (model, notify) {\n            if (!model) {\n                return;\n            }\n            if (this.containsPresentationModel(model.id)) {\n                this.remove(model);\n                if (!notify || model.clientSideOnly) {\n                    return;\n                }\n                this.clientDolphin.getClientConnector().send(new opendolphin.DeletedPresentationModelNotification(model.id), null);\n            }\n        };\n        ClientModelStore.prototype.containsPresentationModel = function (id) {\n            return this.presentationModels.containsKey(id);\n        };\n        ClientModelStore.prototype.addAttributeById = function (attribute) {\n            if (!attribute || this.attributesPerId.containsKey(attribute.id)) {\n                return;\n            }\n            this.attributesPerId.put(attribute.id, attribute);\n        };\n        ClientModelStore.prototype.removeAttributeById = function (attribute) {\n            if (!attribute || !this.attributesPerId.containsKey(attribute.id)) {\n                return;\n            }\n            this.attributesPerId.remove(attribute.id);\n        };\n        ClientModelStore.prototype.findAttributeById = function (id) {\n            return this.attributesPerId.get(id);\n        };\n        ClientModelStore.prototype.addAttributeByQualifier = function (attribute) {\n            if (!attribute || !attribute.getQualifier()) {\n                return;\n            }\n            var attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n            if (!attributes) {\n                attributes = [];\n                this.attributesPerQualifier.put(attribute.getQualifier(), attributes);\n            }\n            if (!(attributes.indexOf(attribute) > -1)) {\n                attributes.push(attribute);\n            }\n        };\n        ClientModelStore.prototype.removeAttributeByQualifier = function (attribute) {\n            if (!attribute || !attribute.getQualifier()) {\n                return;\n            }\n            var attributes = this.attributesPerQualifier.get(attribute.getQualifier());\n            if (!attributes) {\n                return;\n            }\n            if (attributes.length > -1) {\n                attributes.splice(attributes.indexOf(attribute), 1);\n            }\n            if (attributes.length === 0) {\n                this.attributesPerQualifier.remove(attribute.getQualifier());\n            }\n        };\n        ClientModelStore.prototype.findAllAttributesByQualifier = function (qualifier) {\n            if (!qualifier || !this.attributesPerQualifier.containsKey(qualifier)) {\n                return [];\n            }\n            return this.attributesPerQualifier.get(qualifier).slice(0); // slice is used to clone the array\n        };\n        ClientModelStore.prototype.onModelStoreChange = function (eventHandler) {\n            this.modelStoreChangeBus.onEvent(eventHandler);\n        };\n        ClientModelStore.prototype.onModelStoreChangeForType = function (presentationModelType, eventHandler) {\n            this.modelStoreChangeBus.onEvent(function (pmStoreEvent) {\n                if (pmStoreEvent.clientPresentationModel.presentationModelType == presentationModelType) {\n                    eventHandler(pmStoreEvent);\n                }\n            });\n        };\n        return ClientModelStore;\n    })();\n    opendolphin.ClientModelStore = ClientModelStore;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"NamedCommand.ts\" />\n/// <reference path=\"SignalCommand.ts\" />\n/// <reference path=\"EmptyNotification.ts\" />\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"ClientModelStore.ts\" />\n/// <reference path=\"ClientConnector.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"AttributeCreatedNotification.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ClientDolphin = (function () {\n        function ClientDolphin() {\n        }\n        ClientDolphin.prototype.setClientConnector = function (clientConnector) {\n            this.clientConnector = clientConnector;\n        };\n        ClientDolphin.prototype.getClientConnector = function () {\n            return this.clientConnector;\n        };\n        ClientDolphin.prototype.send = function (commandName, onFinished) {\n            this.clientConnector.send(new opendolphin.NamedCommand(commandName), onFinished);\n        };\n        ClientDolphin.prototype.sendEmpty = function (onFinished) {\n            this.clientConnector.send(new opendolphin.EmptyNotification(), onFinished);\n        };\n        // factory method for attributes\n        ClientDolphin.prototype.attribute = function (propertyName, qualifier, value, tag) {\n            return new opendolphin.ClientAttribute(propertyName, qualifier, value, tag);\n        };\n        // factory method for presentation models\n        ClientDolphin.prototype.presentationModel = function (id, type) {\n            var attributes = [];\n            for (var _i = 2; _i < arguments.length; _i++) {\n                attributes[_i - 2] = arguments[_i];\n            }\n            var model = new opendolphin.ClientPresentationModel(id, type);\n            if (attributes && attributes.length > 0) {\n                attributes.forEach(function (attribute) {\n                    model.addAttribute(attribute);\n                });\n            }\n            this.getClientModelStore().add(model);\n            return model;\n        };\n        ClientDolphin.prototype.setClientModelStore = function (clientModelStore) {\n            this.clientModelStore = clientModelStore;\n        };\n        ClientDolphin.prototype.getClientModelStore = function () {\n            return this.clientModelStore;\n        };\n        ClientDolphin.prototype.listPresentationModelIds = function () {\n            return this.getClientModelStore().listPresentationModelIds();\n        };\n        ClientDolphin.prototype.listPresentationModels = function () {\n            return this.getClientModelStore().listPresentationModels();\n        };\n        ClientDolphin.prototype.findAllPresentationModelByType = function (presentationModelType) {\n            return this.getClientModelStore().findAllPresentationModelByType(presentationModelType);\n        };\n        ClientDolphin.prototype.getAt = function (id) {\n            return this.findPresentationModelById(id);\n        };\n        ClientDolphin.prototype.findPresentationModelById = function (id) {\n            return this.getClientModelStore().findPresentationModelById(id);\n        };\n        ClientDolphin.prototype.deletePresentationModel = function (modelToDelete) {\n            this.getClientModelStore().deletePresentationModel(modelToDelete, true);\n        };\n        ClientDolphin.prototype.deleteAllPresentationModelOfType = function (presentationModelType) {\n            this.getClientModelStore().deleteAllPresentationModelOfType(presentationModelType);\n        };\n        ClientDolphin.prototype.updatePresentationModelQualifier = function (presentationModel) {\n            var _this = this;\n            presentationModel.getAttributes().forEach(function (sourceAttribute) {\n                _this.updateAttributeQualifier(sourceAttribute);\n            });\n        };\n        ClientDolphin.prototype.updateAttributeQualifier = function (sourceAttribute) {\n            if (!sourceAttribute.getQualifier())\n                return;\n            var attributes = this.getClientModelStore().findAllAttributesByQualifier(sourceAttribute.getQualifier());\n            attributes.forEach(function (targetAttribute) {\n                if (targetAttribute.tag != sourceAttribute.tag)\n                    return; // attributes with same qualifier and tag\n                targetAttribute.setValue(sourceAttribute.getValue()); // should always have the same value\n                targetAttribute.setBaseValue(sourceAttribute.getBaseValue()); // and same base value and so dirtyness\n            });\n        };\n        ClientDolphin.prototype.tag = function (presentationModel, propertyName, value, tag) {\n            var clientAttribute = new opendolphin.ClientAttribute(propertyName, null, value, tag);\n            this.addAttributeToModel(presentationModel, clientAttribute);\n            return clientAttribute;\n        };\n        ClientDolphin.prototype.addAttributeToModel = function (presentationModel, clientAttribute) {\n            presentationModel.addAttribute(clientAttribute);\n            this.getClientModelStore().registerAttribute(clientAttribute);\n            if (!presentationModel.clientSideOnly) {\n                this.clientConnector.send(new opendolphin.AttributeCreatedNotification(presentationModel.id, clientAttribute.id, clientAttribute.propertyName, clientAttribute.getValue(), clientAttribute.getQualifier(), clientAttribute.tag), null);\n            }\n        };\n        ////// push support ///////\n        ClientDolphin.prototype.startPushListening = function (pushActionName, releaseActionName) {\n            this.clientConnector.setPushListener(new opendolphin.NamedCommand(pushActionName));\n            this.clientConnector.setReleaseCommand(new opendolphin.SignalCommand(releaseActionName));\n            this.clientConnector.setPushEnabled(true);\n            this.clientConnector.listen();\n        };\n        ClientDolphin.prototype.stopPushListening = function () {\n            this.clientConnector.setPushEnabled(false);\n        };\n        return ClientDolphin;\n    })();\n    opendolphin.ClientDolphin = ClientDolphin;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var PresentationModelResetedCommand = (function (_super) {\n        __extends(PresentationModelResetedCommand, _super);\n        function PresentationModelResetedCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'PresentationModelReseted';\n            this.className = \"org.opendolphin.core.comm.PresentationModelResetedCommand\";\n        }\n        return PresentationModelResetedCommand;\n    })(opendolphin.Command);\n    opendolphin.PresentationModelResetedCommand = PresentationModelResetedCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var SavedPresentationModelNotification = (function (_super) {\n        __extends(SavedPresentationModelNotification, _super);\n        function SavedPresentationModelNotification(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'SavedPresentationModel';\n            this.className = \"org.opendolphin.core.comm.SavedPresentationModelNotification\";\n        }\n        return SavedPresentationModelNotification;\n    })(opendolphin.Command);\n    opendolphin.SavedPresentationModelNotification = SavedPresentationModelNotification;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"Command.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var InitializeAttributeCommand = (function (_super) {\n        __extends(InitializeAttributeCommand, _super);\n        function InitializeAttributeCommand(pmId, pmType, propertyName, qualifier, newValue, tag) {\n            if (tag === void 0) { tag = opendolphin.Tag.value(); }\n            _super.call(this);\n            this.pmId = pmId;\n            this.pmType = pmType;\n            this.propertyName = propertyName;\n            this.qualifier = qualifier;\n            this.newValue = newValue;\n            this.tag = tag;\n            this.id = 'InitializeAttribute';\n            this.className = \"org.opendolphin.core.comm.InitializeAttributeCommand\";\n        }\n        return InitializeAttributeCommand;\n    })(opendolphin.Command);\n    opendolphin.InitializeAttributeCommand = InitializeAttributeCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var SwitchPresentationModelCommand = (function (_super) {\n        __extends(SwitchPresentationModelCommand, _super);\n        function SwitchPresentationModelCommand(pmId, sourcePmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.sourcePmId = sourcePmId;\n            this.id = 'SwitchPresentationModel';\n            this.className = \"org.opendolphin.core.comm.SwitchPresentationModelCommand\";\n        }\n        return SwitchPresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.SwitchPresentationModelCommand = SwitchPresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeleteAllPresentationModelsOfTypeCommand = (function (_super) {\n        __extends(DeleteAllPresentationModelsOfTypeCommand, _super);\n        function DeleteAllPresentationModelsOfTypeCommand(pmType) {\n            _super.call(this);\n            this.pmType = pmType;\n            this.id = 'DeleteAllPresentationModelsOfType';\n            this.className = \"org.opendolphin.core.comm.DeleteAllPresentationModelsOfTypeCommand\";\n        }\n        return DeleteAllPresentationModelsOfTypeCommand;\n    })(opendolphin.Command);\n    opendolphin.DeleteAllPresentationModelsOfTypeCommand = DeleteAllPresentationModelsOfTypeCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DeletePresentationModelCommand = (function (_super) {\n        __extends(DeletePresentationModelCommand, _super);\n        function DeletePresentationModelCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'DeletePresentationModel';\n            this.className = \"org.opendolphin.core.comm.DeletePresentationModelCommand\";\n        }\n        return DeletePresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.DeletePresentationModelCommand = DeletePresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var DataCommand = (function (_super) {\n        __extends(DataCommand, _super);\n        function DataCommand(data) {\n            _super.call(this);\n            this.data = data;\n            this.id = \"Data\";\n            this.className = \"org.opendolphin.core.comm.DataCommand\";\n        }\n        return DataCommand;\n    })(opendolphin.Command);\n    opendolphin.DataCommand = DataCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientPresentationModel.ts\" />\n/// <reference path=\"Command.ts\" />\n/// <reference path=\"CommandBatcher.ts\" />\n/// <reference path=\"Codec.ts\" />\n/// <reference path=\"CallNamedActionCommand.ts\" />\n/// <reference path=\"ClientDolphin.ts\" />\n/// <reference path=\"AttributeMetadataChangedCommand.ts\" />\n/// <reference path=\"ClientAttribute.ts\" />\n/// <reference path=\"PresentationModelResetedCommand.ts\" />\n/// <reference path=\"SavedPresentationModelNotification.ts\" />\n/// <reference path=\"InitializeAttributeCommand.ts\" />\n/// <reference path=\"SwitchPresentationModelCommand.ts\" />\n/// <reference path=\"BaseValueChangedCommand.ts\" />\n/// <reference path=\"ValueChangedCommand.ts\" />\n/// <reference path=\"DeleteAllPresentationModelsOfTypeCommand.ts\" />\n/// <reference path=\"DeleteAllPresentationModelsOfTypeCommand.ts\" />\n/// <reference path=\"DeletePresentationModelCommand.ts\" />\n/// <reference path=\"CreatePresentationModelCommand.ts\" />\n/// <reference path=\"DataCommand.ts\" />\n/// <reference path=\"NamedCommand.ts\" />\n/// <reference path=\"SignalCommand.ts\" />\n/// <reference path=\"Tag.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ClientConnector = (function () {\n        function ClientConnector(transmitter, clientDolphin, slackMS, maxBatchSize) {\n            if (slackMS === void 0) { slackMS = 0; }\n            if (maxBatchSize === void 0) { maxBatchSize = 50; }\n            this.commandQueue = [];\n            this.currentlySending = false;\n            this.pushEnabled = false;\n            this.waiting = false;\n            this.transmitter = transmitter;\n            this.clientDolphin = clientDolphin;\n            this.slackMS = slackMS;\n            this.codec = new opendolphin.Codec();\n            this.commandBatcher = new opendolphin.BlindCommandBatcher(true, maxBatchSize);\n        }\n        ClientConnector.prototype.setCommandBatcher = function (newBatcher) {\n            this.commandBatcher = newBatcher;\n        };\n        ClientConnector.prototype.setPushEnabled = function (enabled) {\n            this.pushEnabled = enabled;\n        };\n        ClientConnector.prototype.setPushListener = function (newListener) {\n            this.pushListener = newListener;\n        };\n        ClientConnector.prototype.setReleaseCommand = function (newCommand) {\n            this.releaseCommand = newCommand;\n        };\n        ClientConnector.prototype.send = function (command, onFinished) {\n            this.commandQueue.push({ command: command, handler: onFinished });\n            if (this.currentlySending) {\n                this.release(); // there is not point in releasing if we do not send atm\n                return;\n            }\n            this.doSendNext();\n        };\n        ClientConnector.prototype.doSendNext = function () {\n            var _this = this;\n            if (this.commandQueue.length < 1) {\n                if (this.pushEnabled) {\n                    this.enqueuePushCommand();\n                }\n                else {\n                    this.currentlySending = false;\n                    return;\n                }\n            }\n            this.currentlySending = true;\n            var cmdsAndHandlers = this.commandBatcher.batch(this.commandQueue);\n            var callback = cmdsAndHandlers[cmdsAndHandlers.length - 1].handler;\n            var commands = cmdsAndHandlers.map(function (cah) { return cah.command; });\n            this.transmitter.transmit(commands, function (response) {\n                //console.log(\"server response: [\" + response.map(it => it.id).join(\", \") + \"] \");\n                var touchedPMs = [];\n                response.forEach(function (command) {\n                    var touched = _this.handle(command);\n                    if (touched)\n                        touchedPMs.push(touched);\n                });\n                if (callback) {\n                    callback.onFinished(touchedPMs); // todo: make them unique?\n                }\n                // recursive call: fetch the next in line but allow a bit of slack such that\n                // document events can fire, rendering is done and commands can batch up\n                setTimeout(function () { return _this.doSendNext(); }, _this.slackMS);\n            });\n        };\n        ClientConnector.prototype.handle = function (command) {\n            if (command.id == \"Data\") {\n                return this.handleDataCommand(command);\n            }\n            else if (command.id == \"DeletePresentationModel\") {\n                return this.handleDeletePresentationModelCommand(command);\n            }\n            else if (command.id == \"DeleteAllPresentationModelsOfType\") {\n                return this.handleDeleteAllPresentationModelOfTypeCommand(command);\n            }\n            else if (command.id == \"CreatePresentationModel\") {\n                return this.handleCreatePresentationModelCommand(command);\n            }\n            else if (command.id == \"ValueChanged\") {\n                return this.handleValueChangedCommand(command);\n            }\n            else if (command.id == \"BaseValueChanged\") {\n                return this.handleBaseValueChangedCommand(command);\n            }\n            else if (command.id == \"SwitchPresentationModel\") {\n                return this.handleSwitchPresentationModelCommand(command);\n            }\n            else if (command.id == \"InitializeAttribute\") {\n                return this.handleInitializeAttributeCommand(command);\n            }\n            else if (command.id == \"SavedPresentationModel\") {\n                return this.handleSavedPresentationModelNotification(command);\n            }\n            else if (command.id == \"PresentationModelReseted\") {\n                return this.handlePresentationModelResetedCommand(command);\n            }\n            else if (command.id == \"AttributeMetadataChanged\") {\n                return this.handleAttributeMetadataChangedCommand(command);\n            }\n            else if (command.id == \"CallNamedAction\") {\n                return this.handleCallNamedActionCommand(command);\n            }\n            else {\n                console.log(\"Cannot handle, unknown command \" + command);\n            }\n            return null;\n        };\n        ClientConnector.prototype.handleDataCommand = function (serverCommand) {\n            return serverCommand.data;\n        };\n        ClientConnector.prototype.handleDeletePresentationModelCommand = function (serverCommand) {\n            var model = this.clientDolphin.findPresentationModelById(serverCommand.pmId);\n            if (!model)\n                return null;\n            this.clientDolphin.getClientModelStore().deletePresentationModel(model, true);\n            return model;\n        };\n        ClientConnector.prototype.handleDeleteAllPresentationModelOfTypeCommand = function (serverCommand) {\n            this.clientDolphin.deleteAllPresentationModelOfType(serverCommand.pmType);\n            return null;\n        };\n        ClientConnector.prototype.handleCreatePresentationModelCommand = function (serverCommand) {\n            var _this = this;\n            if (this.clientDolphin.getClientModelStore().containsPresentationModel(serverCommand.pmId)) {\n                throw new Error(\"There already is a presentation model with id \" + serverCommand.pmId + \"  known to the client.\");\n            }\n            var attributes = [];\n            serverCommand.attributes.forEach(function (attr) {\n                var clientAttribute = _this.clientDolphin.attribute(attr.propertyName, attr.qualifier, attr.value, attr.tag ? attr.tag : opendolphin.Tag.value());\n                clientAttribute.setBaseValue(attr.baseValue);\n                if (attr.id && attr.id.match(\".*S$\")) {\n                    clientAttribute.id = attr.id;\n                }\n                attributes.push(clientAttribute);\n            });\n            var clientPm = new opendolphin.ClientPresentationModel(serverCommand.pmId, serverCommand.pmType);\n            clientPm.addAttributes(attributes);\n            if (serverCommand.clientSideOnly) {\n                clientPm.clientSideOnly = true;\n            }\n            this.clientDolphin.getClientModelStore().add(clientPm);\n            this.clientDolphin.updatePresentationModelQualifier(clientPm);\n            clientPm.updateAttributeDirtyness();\n            clientPm.updateDirty();\n            return clientPm;\n        };\n        ClientConnector.prototype.handleValueChangedCommand = function (serverCommand) {\n            var clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n            if (!clientAttribute) {\n                console.log(\"attribute with id \" + serverCommand.attributeId + \" not found, cannot update old value \" + serverCommand.oldValue + \" to new value \" + serverCommand.newValue);\n                return null;\n            }\n            if (clientAttribute.getValue() == serverCommand.newValue) {\n                //console.log(\"nothing to do. new value == old value\");\n                return null;\n            }\n            // Below was the code that would enforce that value changes only appear when the proper oldValue is given.\n            // While that seemed appropriate at first, there are actually valid command sequences where the oldValue is not properly set.\n            // We leave the commented code in the codebase to allow for logging/debugging such cases.\n            //            if(clientAttribute.getValue() != serverCommand.oldValue) {\n            //                console.log(\"attribute with id \"+serverCommand.attributeId+\" and value \" + clientAttribute.getValue() +\n            //                            \" was set to value \" + serverCommand.newValue + \" even though the change was based on an outdated old value of \" + serverCommand.oldValue);\n            //            }\n            clientAttribute.setValue(serverCommand.newValue);\n            return null;\n        };\n        ClientConnector.prototype.handleBaseValueChangedCommand = function (serverCommand) {\n            var clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n            if (!clientAttribute) {\n                console.log(\"attribute with id \" + serverCommand.attributeId + \" not found, cannot set base value.\");\n                return null;\n            }\n            clientAttribute.rebase();\n            return null;\n        };\n        ClientConnector.prototype.handleSwitchPresentationModelCommand = function (serverCommand) {\n            var switchPm = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            if (!switchPm) {\n                console.log(\"switch model with id \" + serverCommand.pmId + \" not found, cannot switch.\");\n                return null;\n            }\n            var sourcePm = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.sourcePmId);\n            if (!sourcePm) {\n                console.log(\"source model with id \" + serverCommand.sourcePmId + \" not found, cannot switch.\");\n                return null;\n            }\n            switchPm.syncWith(sourcePm);\n            return switchPm;\n        };\n        ClientConnector.prototype.handleInitializeAttributeCommand = function (serverCommand) {\n            var attribute = new opendolphin.ClientAttribute(serverCommand.propertyName, serverCommand.qualifier, serverCommand.newValue, serverCommand.tag);\n            if (serverCommand.qualifier) {\n                var attributesCopy = this.clientDolphin.getClientModelStore().findAllAttributesByQualifier(serverCommand.qualifier);\n                if (attributesCopy) {\n                    if (!serverCommand.newValue) {\n                        var attr = attributesCopy.shift();\n                        if (attr) {\n                            attribute.setValue(attr.getValue());\n                        }\n                    }\n                    else {\n                        attributesCopy.forEach(function (attr) {\n                            attr.setValue(attribute.getValue());\n                        });\n                    }\n                }\n            }\n            var presentationModel;\n            if (serverCommand.pmId) {\n                presentationModel = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            }\n            if (!presentationModel) {\n                presentationModel = new opendolphin.ClientPresentationModel(serverCommand.pmId, serverCommand.pmType);\n                this.clientDolphin.getClientModelStore().add(presentationModel);\n            }\n            this.clientDolphin.addAttributeToModel(presentationModel, attribute);\n            this.clientDolphin.updatePresentationModelQualifier(presentationModel);\n            return presentationModel;\n        };\n        ClientConnector.prototype.handleSavedPresentationModelNotification = function (serverCommand) {\n            if (!serverCommand.pmId)\n                return null;\n            var model = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            if (!model) {\n                console.log(\"model with id \" + serverCommand.pmId + \" not found, cannot rebase.\");\n                return null;\n            }\n            model.rebase();\n            return model;\n        };\n        ClientConnector.prototype.handlePresentationModelResetedCommand = function (serverCommand) {\n            if (!serverCommand.pmId)\n                return null;\n            var model = this.clientDolphin.getClientModelStore().findPresentationModelById(serverCommand.pmId);\n            if (!model) {\n                console.log(\"model with id \" + serverCommand.pmId + \" not found, cannot reset.\");\n                return null;\n            }\n            model.reset();\n            return model;\n        };\n        ClientConnector.prototype.handleAttributeMetadataChangedCommand = function (serverCommand) {\n            var clientAttribute = this.clientDolphin.getClientModelStore().findAttributeById(serverCommand.attributeId);\n            if (!clientAttribute)\n                return null;\n            clientAttribute[serverCommand.metadataName] = serverCommand.value;\n            return null;\n        };\n        ClientConnector.prototype.handleCallNamedActionCommand = function (serverCommand) {\n            this.clientDolphin.send(serverCommand.actionName, null);\n            return null;\n        };\n        ///////////// push support ///////////////\n        ClientConnector.prototype.listen = function () {\n            if (!this.pushEnabled)\n                return;\n            if (this.waiting)\n                return;\n            // todo: how to issue a warning if no pushListener is set?\n            if (!this.currentlySending) {\n                this.doSendNext();\n            }\n        };\n        ClientConnector.prototype.enqueuePushCommand = function () {\n            var me = this;\n            this.waiting = true;\n            this.commandQueue.push({\n                command: this.pushListener,\n                handler: {\n                    onFinished: function (models) { me.waiting = false; },\n                    onFinishedData: null\n                }\n            });\n        };\n        ClientConnector.prototype.release = function () {\n            if (!this.waiting)\n                return;\n            this.waiting = false;\n            // todo: how to issue a warning if no releaseCommand is set?\n            this.transmitter.signal(this.releaseCommand);\n        };\n        return ClientConnector;\n    })();\n    opendolphin.ClientConnector = ClientConnector;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"DolphinBuilder.ts\"/>\n/**\n * JS-friendly facade to avoid too many dependencies in plain JS code.\n * The name of this file is also used for the initial lookup of the\n * one javascript file that contains all the dolphin code.\n * Changing the name requires the build support and all users\n * to be updated as well.\n * Dierk Koenig\n */\nvar opendolphin;\n(function (opendolphin) {\n    // factory method for the initialized dolphin\n    // Deprecated ! Use 'makeDolphin() instead\n    function dolphin(url, reset, slackMS) {\n        if (slackMS === void 0) { slackMS = 300; }\n        return makeDolphin().url(url).reset(reset).slackMS(slackMS).build();\n    }\n    opendolphin.dolphin = dolphin;\n    // factory method to build an initialized dolphin\n    function makeDolphin() {\n        return new opendolphin.DolphinBuilder();\n    }\n    opendolphin.makeDolphin = makeDolphin;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\n/// <reference path=\"SignalCommand.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    /**\n     * A transmitter that is not transmitting at all.\n     * It may serve as a stand-in when no real transmitter is needed.\n     */\n    var NoTransmitter = (function () {\n        function NoTransmitter() {\n        }\n        NoTransmitter.prototype.transmit = function (commands, onDone) {\n            // do nothing special\n            onDone([]);\n        };\n        NoTransmitter.prototype.signal = function (command) {\n            // do nothing\n        };\n        return NoTransmitter;\n    })();\n    opendolphin.NoTransmitter = NoTransmitter;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\"/>\n/// <reference path=\"SignalCommand.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"Codec.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var HttpTransmitter = (function () {\n        function HttpTransmitter(url, reset, charset, errorHandler, supportCORS) {\n            if (reset === void 0) { reset = true; }\n            if (charset === void 0) { charset = \"UTF-8\"; }\n            if (errorHandler === void 0) { errorHandler = null; }\n            if (supportCORS === void 0) { supportCORS = false; }\n            this.url = url;\n            this.charset = charset;\n            this.HttpCodes = {\n                finished: 4,\n                success: 200\n            };\n            this.errorHandler = errorHandler;\n            this.supportCORS = supportCORS;\n            this.http = new XMLHttpRequest();\n            this.sig = new XMLHttpRequest();\n            if (this.supportCORS) {\n                if (\"withCredentials\" in this.http) {\n                    this.http.withCredentials = true; // NOTE: doing this for non CORS requests has no impact\n                    this.sig.withCredentials = true;\n                }\n            }\n            this.codec = new opendolphin.Codec();\n            if (reset) {\n                this.invalidate();\n            }\n        }\n        HttpTransmitter.prototype.transmit = function (commands, onDone) {\n            var _this = this;\n            this.http.onerror = function (evt) {\n                _this.handleError('onerror', \"\");\n                onDone([]);\n            };\n            this.http.onreadystatechange = function (evt) {\n                if (_this.http.readyState == _this.HttpCodes.finished) {\n                    if (_this.http.status == _this.HttpCodes.success) {\n                        var responseText = _this.http.responseText;\n                        if (responseText.trim().length > 0) {\n                            try {\n                                var responseCommands = _this.codec.decode(responseText);\n                                onDone(responseCommands);\n                            }\n                            catch (err) {\n                                console.log(\"Error occurred parsing responseText: \", err);\n                                console.log(\"Incorrect responseText: \", responseText);\n                                _this.handleError('application', \"HttpTransmitter: Incorrect responseText: \" + responseText);\n                                onDone([]);\n                            }\n                        }\n                        else {\n                            _this.handleError('application', \"HttpTransmitter: empty responseText\");\n                            onDone([]);\n                        }\n                    }\n                    else {\n                        _this.handleError('application', \"HttpTransmitter: HTTP Status != 200\");\n                        onDone([]);\n                    }\n                }\n            };\n            this.http.open('POST', this.url, true);\n            if (\"overrideMimeType\" in this.http) {\n                this.http.overrideMimeType(\"application/json; charset=\" + this.charset); // todo make injectable\n            }\n            this.http.send(this.codec.encode(commands));\n        };\n        HttpTransmitter.prototype.handleError = function (kind, message) {\n            var errorEvent = { kind: kind, url: this.url, httpStatus: this.http.status, message: message };\n            if (this.errorHandler) {\n                this.errorHandler(errorEvent);\n            }\n            else {\n                console.log(\"Error occurred: \", errorEvent);\n            }\n        };\n        HttpTransmitter.prototype.signal = function (command) {\n            this.sig.open('POST', this.url, true);\n            this.sig.send(this.codec.encode([command]));\n        };\n        HttpTransmitter.prototype.invalidate = function () {\n            this.http.open('POST', this.url + 'invalidate?', false);\n            this.http.send();\n        };\n        return HttpTransmitter;\n    })();\n    opendolphin.HttpTransmitter = HttpTransmitter;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"ClientDolphin.ts\"/>\n/// <reference path=\"OpenDolphin.ts\"/>\n/// <reference path=\"ClientConnector.ts\"/>\n/// <reference path=\"ClientModelStore.ts\"/>\n/// <reference path=\"NoTransmitter.ts\"/>\n/// <reference path=\"HttpTransmitter.ts\"/>\n/// <reference path=\"ClientAttribute.ts\"/>\nvar opendolphin;\n(function (opendolphin) {\n    var DolphinBuilder = (function () {\n        function DolphinBuilder() {\n            this.reset_ = false;\n            this.slackMS_ = 300;\n            this.maxBatchSize_ = 50;\n            this.supportCORS_ = false;\n        }\n        DolphinBuilder.prototype.url = function (url) {\n            this.url_ = url;\n            return this;\n        };\n        DolphinBuilder.prototype.reset = function (reset) {\n            this.reset_ = reset;\n            return this;\n        };\n        DolphinBuilder.prototype.slackMS = function (slackMS) {\n            this.slackMS_ = slackMS;\n            return this;\n        };\n        DolphinBuilder.prototype.maxBatchSize = function (maxBatchSize) {\n            this.maxBatchSize_ = maxBatchSize;\n            return this;\n        };\n        DolphinBuilder.prototype.supportCORS = function (supportCORS) {\n            this.supportCORS_ = supportCORS;\n            return this;\n        };\n        DolphinBuilder.prototype.errorHandler = function (errorHandler) {\n            this.errorHandler_ = errorHandler;\n            return this;\n        };\n        DolphinBuilder.prototype.build = function () {\n            console.log(\"OpenDolphin js found\");\n            var clientDolphin = new opendolphin.ClientDolphin();\n            var transmitter;\n            if (this.url_ != null && this.url_.length > 0) {\n                transmitter = new opendolphin.HttpTransmitter(this.url_, this.reset_, \"UTF-8\", this.errorHandler_, this.supportCORS_);\n            }\n            else {\n                transmitter = new opendolphin.NoTransmitter();\n            }\n            clientDolphin.setClientConnector(new opendolphin.ClientConnector(transmitter, clientDolphin, this.slackMS_, this.maxBatchSize_));\n            clientDolphin.setClientModelStore(new opendolphin.ClientModelStore(clientDolphin));\n            console.log(\"ClientDolphin initialized\");\n            return clientDolphin;\n        };\n        return DolphinBuilder;\n    })();\n    opendolphin.DolphinBuilder = DolphinBuilder;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var GetPresentationModelCommand = (function (_super) {\n        __extends(GetPresentationModelCommand, _super);\n        function GetPresentationModelCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'GetPresentationModel';\n            this.className = \"org.opendolphin.core.comm.GetPresentationModelCommand\";\n        }\n        return GetPresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.GetPresentationModelCommand = GetPresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n/// <reference path=\"Command.ts\" />\nvar opendolphin;\n(function (opendolphin) {\n    var ResetPresentationModelCommand = (function (_super) {\n        __extends(ResetPresentationModelCommand, _super);\n        function ResetPresentationModelCommand(pmId) {\n            _super.call(this);\n            this.pmId = pmId;\n            this.id = 'ResetPresentationModel';\n            this.className = \"org.opendolphin.core.comm.ResetPresentationModelCommand\";\n        }\n        return ResetPresentationModelCommand;\n    })(opendolphin.Command);\n    opendolphin.ResetPresentationModelCommand = ResetPresentationModelCommand;\n})(opendolphin || (opendolphin = {}));\n\nmodule.exports = opendolphin;","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\nrequire('./polyfills.js');\nvar Map = require('../bower_components/core.js/library/fn/map');\nvar utils = require('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\n\nfunction BeanManager(classRepository) {\n    checkParam(classRepository, 'classRepository');\n\n    this.classRepository = classRepository;\n    this.addedHandlers = new Map();\n    this.removedHandlers = new Map();\n    this.updatedHandlers = new Map();\n    this.arrayUpdatedHandlers = new Map();\n    this.allAddedHandlers = [];\n    this.allRemovedHandlers = [];\n    this.allUpdatedHandlers = [];\n    this.allArrayUpdatedHandlers = [];\n\n    var self = this;\n    this.classRepository.onBeanAdded(function(type, bean) {\n        var handlerList = self.addedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function (handler) {\n                try {\n                    handler(bean);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onBeanAdded-handler for type', type, e);\n                }\n            });\n        }\n        self.allAddedHandlers.forEach(function (handler) {\n            try {\n                handler(bean);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onBeanAdded-handler', e);\n            }\n        });\n    });\n    this.classRepository.onBeanRemoved(function(type, bean) {\n        var handlerList = self.removedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function(handler) {\n                try {\n                    handler(bean);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onBeanRemoved-handler for type', type, e);\n                }\n            });\n        }\n        self.allRemovedHandlers.forEach(function(handler) {\n            try {\n                handler(bean);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onBeanRemoved-handler', e);\n            }\n        });\n    });\n    this.classRepository.onBeanUpdate(function(type, bean, propertyName, newValue, oldValue) {\n        var handlerList = self.updatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function (handler) {\n                try {\n                    handler(bean, propertyName, newValue, oldValue);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onBeanUpdate-handler for type', type, e);\n                }\n            });\n        }\n        self.allUpdatedHandlers.forEach(function (handler) {\n            try {\n                handler(bean, propertyName, newValue, oldValue);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onBeanUpdate-handler', e);\n            }\n        });\n    });\n    this.classRepository.onArrayUpdate(function(type, bean, propertyName, index, count, newElement) {\n        var handlerList = self.arrayUpdatedHandlers.get(type);\n        if (exists(handlerList)) {\n            handlerList.forEach(function (handler) {\n                try {\n                    handler(bean, propertyName, index, count, newElement);\n                } catch(e) {\n                    console.warn('An exception occurred while calling an onArrayUpdate-handler for type', type, e);\n                }\n            });\n        }\n        self.allArrayUpdatedHandlers.forEach(function (handler) {\n            try {\n                handler(bean, propertyName, index, count, newElement);\n            } catch(e) {\n                console.warn('An exception occurred while calling a general onArrayUpdate-handler', e);\n            }\n        });\n    });\n\n}\n\n\nBeanManager.prototype.notifyBeanChange = function(bean, propertyName, newValue) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n\n    return this.classRepository.notifyBeanChange(bean, propertyName, newValue);\n};\n\n\nBeanManager.prototype.notifyArrayChange = function(bean, propertyName, index, count, removedElements) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n    checkParam(index, 'index');\n    checkParam(count, 'count');\n    checkParam(removedElements, 'removedElements');\n\n    this.classRepository.notifyArrayChange(bean, propertyName, index, count, removedElements);\n};\n\n\nBeanManager.prototype.isManaged = function(bean) {\n    checkParam(bean, 'bean');\n\n    // TODO: Implement dolphin.isManaged() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.create = function(type) {\n    checkParam(type, 'type');\n\n    // TODO: Implement dolphin.create() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.add = function(type, bean) {\n    checkParam(type, 'type');\n    checkParam(bean, 'bean');\n\n    // TODO: Implement dolphin.add() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.addAll = function(type, collection) {\n    checkParam(type, 'type');\n    checkParam(collection, 'collection');\n\n    // TODO: Implement dolphin.addAll() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.remove = function(bean) {\n    checkParam(bean, 'bean');\n\n    // TODO: Implement dolphin.remove() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.removeAll = function(collection) {\n    checkParam(collection, 'collection');\n\n    // TODO: Implement dolphin.removeAll() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.removeIf = function(predicate) {\n    checkParam(predicate, 'predicate');\n\n    // TODO: Implement dolphin.removeIf() [DP-7]\n    throw new Error(\"Not implemented yet\");\n};\n\n\nBeanManager.prototype.onAdded = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allAddedHandlers = self.allAddedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allAddedHandlers = self.allAddedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.addedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.addedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.addedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.addedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\nBeanManager.prototype.onRemoved = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allRemovedHandlers = self.allRemovedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allRemovedHandlers = self.allRemovedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.removedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.removedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.removedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.removedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\nBeanManager.prototype.onBeanUpdate = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allUpdatedHandlers = self.allUpdatedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allUpdatedHandlers = self.allUpdatedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.updatedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.updatedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.updatedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.updatedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\nBeanManager.prototype.onArrayUpdate = function(type, eventHandler) {\n    var self = this;\n    if (!exists(eventHandler)) {\n        eventHandler = type;\n        checkParam(eventHandler, 'eventHandler');\n\n        self.allArrayUpdatedHandlers = self.allArrayUpdatedHandlers.concat(eventHandler);\n        return {\n            unsubscribe: function() {\n                self.allArrayUpdatedHandlers = self.allArrayUpdatedHandlers.filter(function(value) {\n                    return value !== eventHandler;\n                });\n            }\n        };\n    } else {\n        checkParam(type, 'type');\n        checkParam(eventHandler, 'eventHandler');\n\n        var handlerList = self.arrayUpdatedHandlers.get(type);\n        if (!exists(handlerList)) {\n            handlerList = [];\n        }\n        self.arrayUpdatedHandlers.set(type, handlerList.concat(eventHandler));\n        return {\n            unsubscribe: function() {\n                var handlerList = self.arrayUpdatedHandlers.get(type);\n                if (exists(handlerList)) {\n                    self.arrayUpdatedHandlers.set(type, handlerList.filter(function(value) {\n                        return value !== eventHandler;\n                    }));\n                }\n            }\n        };\n    }\n};\n\n\n\nexports.BeanManager = BeanManager;","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global Platform, console */\n\"use strict\";\n\nrequire('./polyfills.js');\nvar Map = require('../bower_components/core.js/library/fn/map');\nvar opendolphin = require('../libsrc/opendolphin.js');\n\nvar utils = require('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\nvar UNKNOWN = 0,\n    BASIC_TYPE = 1,\n    DOLPHIN_BEAN = 2;\n\nvar blocked = null;\n\nfunction fromDolphin(classRepository, type, value) {\n    return ! exists(value)? null\n        : type === DOLPHIN_BEAN? classRepository.beanFromDolphin.get(value) : value;\n}\n\nfunction toDolphin(classRepository, value) {\n    return typeof value === 'object' && value !== null? classRepository.beanToDolphin.get(value) : value;\n}\n\nfunction sendListAdd(dolphin, modelId, propertyName, pos, element) {\n    var attributes = [\n        dolphin.attribute('@@@ SOURCE_SYSTEM @@@', null, 'client'),\n        dolphin.attribute('source', null, modelId),\n        dolphin.attribute('attribute', null, propertyName),\n        dolphin.attribute('pos', null, pos),\n        dolphin.attribute('element', null, element)\n    ];\n    dolphin.presentationModel.apply(dolphin, [null, '@@@ LIST_ADD @@@'].concat(attributes));\n}\n\nfunction sendListRemove(dolphin, modelId, propertyName, from, to) {\n    var attributes = [\n        dolphin.attribute('@@@ SOURCE_SYSTEM @@@', null, 'client'),\n        dolphin.attribute('source', null, modelId),\n        dolphin.attribute('attribute', null, propertyName),\n        dolphin.attribute('from', null, from),\n        dolphin.attribute('to', null, to)\n    ];\n    dolphin.presentationModel.apply(dolphin, [null, '@@@ LIST_DEL @@@'].concat(attributes));\n}\n\nfunction validateList(classRepository, type, bean, propertyName) {\n    var list = bean[propertyName];\n    if (!exists(list)) {\n        classRepository.propertyUpdateHandlers.forEach(function(handler) {\n            try {\n                handler(type, bean, propertyName, [], undefined);\n            } catch(e) {\n                console.warn('An exception occurred while calling an onBeanUpdate-handler', e);\n            }\n        });\n    }\n}\n\nfunction block(bean, propertyName) {\n    if (exists(blocked)) {\n        throw new Error('Trying to create a block while another block exists');\n    }\n    blocked = {\n        bean: bean,\n        propertyName: propertyName\n    };\n}\n\nfunction isBlocked(bean, propertyName) {\n    return exists(blocked) && blocked.bean === bean && blocked.propertyName === propertyName;\n}\n\nfunction unblock() {\n    blocked = null;\n}\n\n\nfunction ClassRepository(dolphin) {\n    checkParam(dolphin, 'dolphin');\n\n    this.dolphin = dolphin;\n    this.classes = new Map();\n    this.beanFromDolphin = new Map();\n    this.beanToDolphin = new Map();\n    this.classInfos = new Map();\n    this.beanAddedHandlers = [];\n    this.beanRemovedHandlers = [];\n    this.propertyUpdateHandlers = [];\n    this.arrayUpdateHandlers = [];\n}\n\n\nClassRepository.prototype.notifyBeanChange = function(bean, propertyName, newValue) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n\n    var modelId = this.beanToDolphin.get(bean);\n    if (exists(modelId)) {\n        var model = this.dolphin.findPresentationModelById(modelId);\n        if (exists(model)) {\n            var classInfo = this.classes.get(model.presentationModelType);\n            var type = classInfo[propertyName];\n            var attribute = model.findAttributeByPropertyName(propertyName);\n            if (exists(type) && exists(attribute)) {\n                var oldValue = attribute.getValue();\n                attribute.setValue(toDolphin(this, newValue));\n                return fromDolphin(this, type, oldValue);\n            }\n        }\n    }\n};\n\n\nClassRepository.prototype.notifyArrayChange = function(bean, propertyName, index, count, removedElements) {\n    checkParam(bean, 'bean');\n    checkParam(propertyName, 'propertyName');\n    checkParam(index, 'index');\n    checkParam(count, 'count');\n    checkParam(removedElements, 'removedElements');\n\n    if (isBlocked(bean, propertyName)) {\n        return;\n    }\n    var modelId = this.beanToDolphin.get(bean);\n    var array = bean[propertyName];\n    if (exists(modelId) && exists(array)) {\n        if (Array.isArray(removedElements) && removedElements.length > 0) {\n            sendListRemove(this.dolphin, modelId, propertyName, index, index + removedElements.length);\n        }\n        for (var i = index; i < index + count; i++) {\n            sendListAdd(this.dolphin, modelId, propertyName, i, toDolphin(this, array[i]));\n        }\n    }\n};\n\n\nClassRepository.prototype.onBeanAdded = function(handler) {\n    checkParam(handler, 'handler');\n    this.beanAddedHandlers.push(handler);\n};\n\n\nClassRepository.prototype.onBeanRemoved = function(handler) {\n    checkParam(handler, 'handler');\n    this.beanRemovedHandlers.push(handler);\n};\n\n\nClassRepository.prototype.onBeanUpdate = function(handler) {\n    checkParam(handler, 'handler');\n    this.propertyUpdateHandlers.push(handler);\n};\n\n\nClassRepository.prototype.onArrayUpdate = function(handler) {\n    checkParam(handler, 'handler');\n    this.arrayUpdateHandlers.push(handler);\n};\n\n\nClassRepository.prototype.registerClass = function (model) {\n    checkParam(model, 'model');\n\n    if (this.classes.has(model.id)) {\n        return;\n    }\n\n    var classInfo = {};\n    model.attributes.filter(function(attribute) {\n        return attribute.propertyName.search(/^@@@ /) < 0;\n    }).forEach(function (attribute) {\n        classInfo[attribute.propertyName] = UNKNOWN;\n\n        attribute.onValueChange(function (event) {\n            classInfo[attribute.propertyName] = event.newValue;\n        });\n    });\n    this.classes.set(model.id, classInfo);\n};\n\n\nClassRepository.prototype.unregisterClass = function (model) {\n    checkParam(model, 'model');\n\n    this.classes['delete'](model.id);\n};\n\n\nClassRepository.prototype.load = function (model) {\n    checkParam(model, 'model');\n\n    var self = this;\n    var classInfo = this.classes.get(model.presentationModelType);\n    var bean = {};\n    model.attributes.filter(function (attribute) {\n        return (attribute.tag === opendolphin.Tag.value()) && (attribute.propertyName.search(/^@@@ /) < 0);\n    }).forEach(function (attribute) {\n        bean[attribute.propertyName] = null;\n        attribute.onValueChange(function (event) {\n            if (event.oldValue !== event.newValue) {\n                var oldValue = fromDolphin(self, classInfo[attribute.propertyName], event.oldValue);\n                var newValue = fromDolphin(self, classInfo[attribute.propertyName], event.newValue);\n                self.propertyUpdateHandlers.forEach(function(handler) {\n                    try {\n                        handler(model.presentationModelType, bean, attribute.propertyName, newValue, oldValue);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onBeanUpdate-handler', e);\n                    }\n                });\n            }\n        });\n    });\n    this.beanFromDolphin.set(model.id, bean);\n    this.beanToDolphin.set(bean, model.id);\n    this.classInfos.set(model.id, classInfo);\n    this.beanAddedHandlers.forEach(function(handler) {\n        try {\n            handler(model.presentationModelType, bean);\n        } catch(e) {\n            console.warn('An exception occurred while calling an onBeanAdded-handler', e);\n        }\n    });\n    return bean;\n};\n\n\nClassRepository.prototype.unload = function(model) {\n    checkParam(model, 'model');\n\n    var bean = this.beanFromDolphin.get(model.id);\n    this.beanFromDolphin['delete'](model.id);\n    this.beanToDolphin['delete'](bean);\n    this.classInfos['delete'](model.id);\n    if (exists(bean)) {\n        this.beanRemovedHandlers.forEach(function(handler) {\n            try {\n                handler(model.presentationModelType, bean);\n            } catch(e) {\n                console.warn('An exception occurred while calling an onBeanRemoved-handler', e);\n            }\n        });\n    }\n    return bean;\n};\n\n\nClassRepository.prototype.addListEntry = function(model) {\n    checkParam(model, 'model');\n\n    var source = model.findAttributeByPropertyName('source');\n    var attribute = model.findAttributeByPropertyName('attribute');\n    var pos = model.findAttributeByPropertyName('pos');\n    var element = model.findAttributeByPropertyName('element');\n\n    if (exists(source) && exists(attribute) && exists(pos) && exists(element)) {\n        var classInfo = this.classInfos.get(source.value);\n        var bean = this.beanFromDolphin.get(source.value);\n        if (exists(bean) && exists(classInfo)) {\n            var type = model.presentationModelType;\n            var entry = fromDolphin(this, classInfo[attribute.value], element.value);\n            validateList(this, type, bean, attribute.value);\n            try {\n                block(bean, attribute.value);\n                this.arrayUpdateHandlers.forEach(function (handler) {\n                    try {\n                        handler(type, bean, attribute.value, pos.value, 0, entry);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onArrayUpdate-handler', e);\n                    }\n                });\n            } finally {\n                unblock();\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n        }\n    } else {\n        throw new Error(\"Invalid list modification update received\");\n    }\n};\n\n\nClassRepository.prototype.delListEntry = function(model) {\n    checkParam(model, 'model');\n\n    var source = model.findAttributeByPropertyName('source');\n    var attribute = model.findAttributeByPropertyName('attribute');\n    var from = model.findAttributeByPropertyName('from');\n    var to = model.findAttributeByPropertyName('to');\n\n    if (exists(source) && exists(attribute) && exists(from) && exists(to)) {\n        var bean = this.beanFromDolphin.get(source.value);\n        if (exists(bean)) {\n            var type = model.presentationModelType;\n            validateList(this, type, bean, attribute.value);\n            try {\n                block(bean, attribute.value);\n                this.arrayUpdateHandlers.forEach(function (handler) {\n                    try {\n                        handler(type, bean, attribute.value, from.value, to.value - from.value);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onArrayUpdate-handler', e);\n                    }\n                });\n            } finally {\n                unblock();\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n        }\n    } else {\n        throw new Error(\"Invalid list modification update received\");\n    }\n};\n\n\nClassRepository.prototype.setListEntry = function(model) {\n    checkParam(model, 'model');\n\n    var source = model.findAttributeByPropertyName('source');\n    var attribute = model.findAttributeByPropertyName('attribute');\n    var pos = model.findAttributeByPropertyName('pos');\n    var element = model.findAttributeByPropertyName('element');\n\n    if (exists(source) && exists(attribute) && exists(pos) && exists(element)) {\n        var classInfo = this.classInfos.get(source.value);\n        var bean = this.beanFromDolphin.get(source.value);\n        if (exists(bean) && exists(classInfo)) {\n            var type = model.presentationModelType;\n            var entry = fromDolphin(this, classInfo[attribute.value], element.value);\n            validateList(this, type, bean, attribute.value);\n            try {\n                block(bean, attribute.value);\n                this.arrayUpdateHandlers.forEach(function (handler) {\n                    try {\n                        handler(type, bean, attribute.value, pos.value, 1, entry);\n                    } catch(e) {\n                        console.warn('An exception occurred while calling an onArrayUpdate-handler', e);\n                    }\n                });\n            } finally {\n                unblock();\n            }\n        } else {\n            throw new Error(\"Invalid list modification update received. Source bean unknown.\");\n        }\n    }else {\n        throw new Error(\"Invalid list modification update received\");\n    }\n};\n\n\nClassRepository.prototype.mapParamToDolphin = function(param) {\n    if (!exists(param)) {\n        return {value: param, type: UNKNOWN};\n    }\n    var type = typeof param;\n    if (type === 'object') {\n        var value = this.beanToDolphin.get(param);\n        if (exists(value)) {\n            return {value: value, type: DOLPHIN_BEAN};\n        }\n        throw new TypeError(\"Only managed Dolphin Beans can be used\");\n    }\n    if (type === 'string' || type === 'number' || type === 'boolean') {\n        return {value: param, type: BASIC_TYPE};\n    }\n    throw new TypeError(\"Only managed Dolphin Beans and primitive types can be used\");\n};\n\n\nClassRepository.prototype.mapDolphinToBean = function(value, type) {\n    return fromDolphin(this, type, value);\n};\n\n\n\nexports.ClassRepository = ClassRepository;\nexports.UNKNOWN = UNKNOWN;\nexports.BASIC_TYPE = BASIC_TYPE;\nexports.DOLPHIN_BEAN = DOLPHIN_BEAN;\n","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\nrequire('./polyfills.js');\nvar checkParam = require('./utils.js').checkParam;\n\nvar DOLPHIN_PLATFORM_PREFIX = 'dolphin_platform_intern_';\nvar INIT_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'initClientContext';\nvar DISCONNECT_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'disconnectClientContext';\n\nfunction ClientContext(dolphin, beanManager, controllerManager, connector) {\n    checkParam(dolphin, 'dolphin');\n    checkParam(beanManager, 'beanManager');\n    checkParam(controllerManager, 'controllerManager');\n    checkParam(connector, 'connector');\n\n    this.dolphin = dolphin;\n    this.beanManager = beanManager;\n    this._controllerManager = controllerManager;\n    this._connector = connector;\n\n    this._connector.invoke(INIT_COMMAND_NAME);\n}\n\n\nClientContext.prototype.createController = function(name) {\n    checkParam(name, 'name');\n\n    return this._controllerManager.createController(name);\n};\n\n\nClientContext.prototype.disconnect = function() {\n    // TODO: Implement ClientContext.disconnect [DP-46]\n    this.dolphin.stopPushListening();\n    this._connector.invoke(DISCONNECT_COMMAND_NAME);\n    this.dolphin = null;\n    this.beanManager = null;\n    this._controllerManager = null;\n    this._connector = null;\n};\n\n\nexports.ClientContext = ClientContext;","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\nrequire('./polyfills.js');\nvar Promise = require('../bower_components/core.js/library/fn/promise');\nvar opendolphin = require('../libsrc/opendolphin.js');\nvar utils = require('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\n\nvar DOLPHIN_PLATFORM_PREFIX = 'dolphin_platform_intern_';\nvar POLL_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'longPoll';\nvar RELEASE_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'release';\n\nvar DOLPHIN_BEAN = '@@@ DOLPHIN_BEAN @@@';\nvar ACTION_CALL_BEAN = '@@@ CONTROLLER_ACTION_CALL_BEAN @@@';\nvar HIGHLANDER_BEAN = '@@@ HIGHLANDER_BEAN @@@';\nvar DOLPHIN_LIST_ADD = '@@@ LIST_ADD @@@';\nvar DOLPHIN_LIST_DEL = '@@@ LIST_DEL @@@';\nvar DOLPHIN_LIST_SET = '@@@ LIST_SET @@@';\nvar SOURCE_SYSTEM = '@@@ SOURCE_SYSTEM @@@';\nvar SOURCE_SYSTEM_CLIENT = 'client';\nvar SOURCE_SYSTEM_SERVER = 'server';\n\n\n\nvar initializer;\n\nfunction Connector(url, dolphin, classRepository, config) {\n    checkParam(url, 'url');\n    checkParam(dolphin, 'dolphin');\n    checkParam(classRepository, 'classRepository');\n\n    var self = this;\n    this.dolphin = dolphin;\n    this.classRepository = classRepository;\n    this.highlanderPMResolver = function() {};\n    this.highlanderPMPromise = new Promise(function(resolve) {\n        self.highlanderPMResolver = resolve;\n    });\n\n    dolphin.getClientModelStore().onModelStoreChange(function (event) {\n        var model = event.clientPresentationModel;\n        var sourceSystem = model.findAttributeByPropertyName(SOURCE_SYSTEM);\n        if (exists(sourceSystem) && sourceSystem.value === SOURCE_SYSTEM_SERVER) {\n            if (event.eventType === opendolphin.Type.ADDED) {\n                self.onModelAdded(model);\n            } else if (event.eventType === opendolphin.Type.REMOVED) {\n                self.onModelRemoved(model);\n            }\n        }\n    });\n\n    if (!exists(config) || !exists(config.serverPush) || config.serverPush === true) {\n        setTimeout(function() {\n            dolphin.startPushListening(POLL_COMMAND_NAME, RELEASE_COMMAND_NAME);\n        }, 500);\n    }\n\n    initializer = new Promise(function(resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.withCredentials = true;\n\n        req.onload = function() {\n            if (req.status === 200) {\n                resolve();\n            }\n            else {\n                reject(Error(req.statusText));\n            }\n        };\n\n        req.onerror = function() {\n            reject(Error(\"Network Error\"));\n        };\n\n        req.open('POST', url + 'invalidate?');\n        req.send();\n    });\n}\n\n\nConnector.prototype.onModelAdded = function(model) {\n    checkParam(model, 'model');\n\n    var type = model.presentationModelType;\n    switch (type) {\n        case ACTION_CALL_BEAN:\n            // ignore\n            break;\n        case DOLPHIN_BEAN:\n            this.classRepository.registerClass(model);\n            break;\n        case HIGHLANDER_BEAN:\n            this.highlanderPMResolver(model);\n            break;\n        case DOLPHIN_LIST_ADD:\n            this.classRepository.addListEntry(model);\n            this.dolphin.deletePresentationModel(model);\n            break;\n        case DOLPHIN_LIST_DEL:\n            this.classRepository.delListEntry(model);\n            this.dolphin.deletePresentationModel(model);\n            break;\n        case DOLPHIN_LIST_SET:\n            this.classRepository.setListEntry(model);\n            this.dolphin.deletePresentationModel(model);\n            break;\n        default:\n            this.classRepository.load(model);\n            break;\n    }\n};\n\n\nConnector.prototype.onModelRemoved = function(model) {\n    checkParam(model, 'model');\n\n    var type = model.presentationModelType;\n    switch (type) {\n        case DOLPHIN_BEAN:\n            this.classRepository.unregisterClass(model);\n            break;\n        case DOLPHIN_LIST_ADD:\n        case DOLPHIN_LIST_DEL:\n        case DOLPHIN_LIST_SET:\n            // do nothing\n            break;\n        default:\n            this.classRepository.unload(model);\n            break;\n    }\n};\n\n\nConnector.prototype.invoke = function(command) {\n    checkParam(command, 'command');\n\n    var dolphin = this.dolphin;\n    return new Promise(function(resolve) {\n        initializer.then(function () {\n            dolphin.send(command, {\n                onFinished: function() {\n                    resolve();\n                }\n            });\n        });\n    });\n};\n\n\nConnector.prototype.getHighlanderPM = function() {\n    return this.highlanderPMPromise;\n};\n\n\n\nexports.Connector = Connector;\nexports.SOURCE_SYSTEM = SOURCE_SYSTEM;\nexports.SOURCE_SYSTEM_CLIENT = SOURCE_SYSTEM_CLIENT;\nexports.SOURCE_SYSTEM_SERVER = SOURCE_SYSTEM_SERVER;\nexports.ACTION_CALL_BEAN = ACTION_CALL_BEAN;\n","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\nrequire('./polyfills.js');\nvar Promise = require('../bower_components/core.js/library/fn/promise');\nvar utils = require('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\n\nvar ControllerProxy = require('./controllerproxy.js').ControllerProxy;\n\nvar DOLPHIN_BEAN_TYPE = require('./classrepo.js').DOLPHIN_BEAN;\n\nvar SOURCE_SYSTEM = require('./connector.js').SOURCE_SYSTEM;\nvar SOURCE_SYSTEM_CLIENT = require('./connector.js').SOURCE_SYSTEM_CLIENT;\nvar ACTION_CALL_BEAN = require('./connector.js').ACTION_CALL_BEAN;\n\nvar DOLPHIN_PLATFORM_PREFIX = 'dolphin_platform_intern_';\nvar REGISTER_CONTROLLER_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'registerController';\nvar CALL_CONTROLLER_ACTION_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'callControllerAction';\nvar DESTROY_CONTROLLER_COMMAND_NAME = DOLPHIN_PLATFORM_PREFIX + 'destroyController';\n\nvar CONTROLLER_NAME = 'controllerName';\nvar CONTROLLER_ID = 'controllerId';\nvar MODEL = 'model';\nvar ACTION_NAME = 'actionName';\nvar ERROR_CODE = 'errorCode';\nvar PARAM_PREFIX = '_';\n\n\nfunction ControllerManager(dolphin, classRepository, connector) {\n    checkParam(dolphin, 'dolphin');\n    checkParam(classRepository, 'classRepository');\n    checkParam(connector, 'connector');\n\n    this.dolphin = dolphin;\n    this.classRepository = classRepository;\n    this.connector = connector;\n}\n\n\nControllerManager.prototype.createController = function(name) {\n    checkParam(name, 'name');\n\n    var self = this;\n    var controllerId, modelId, model;\n    return new Promise(function(resolve) {\n        self.connector.getHighlanderPM().then(function (highlanderPM) {\n            highlanderPM.findAttributeByPropertyName(CONTROLLER_NAME).setValue(name);\n            self.connector.invoke(REGISTER_CONTROLLER_COMMAND_NAME).then(function() {\n                controllerId = highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).getValue();\n                modelId = highlanderPM.findAttributeByPropertyName(MODEL).getValue();\n                model = self.classRepository.mapDolphinToBean(modelId, DOLPHIN_BEAN_TYPE);\n                resolve(new ControllerProxy(controllerId, model, self));\n            });\n        });\n    });\n};\n\n\nControllerManager.prototype.invokeAction = function(controllerId, actionName, params) {\n    checkParam(controllerId, 'controllerId');\n    checkParam(actionName, 'actionName');\n\n    var self = this;\n    return new Promise(function(resolve, reject) {\n\n        var attributes = [\n            self.dolphin.attribute(SOURCE_SYSTEM, null, SOURCE_SYSTEM_CLIENT),\n            self.dolphin.attribute(CONTROLLER_ID, null, controllerId),\n            self.dolphin.attribute(ACTION_NAME, null, actionName),\n            self.dolphin.attribute(ERROR_CODE)\n        ];\n\n        if (exists(params)) {\n            for (var prop in params) {\n                if (params.hasOwnProperty(prop)) {\n                    var param = self.classRepository.mapParamToDolphin(params[prop]);\n                    attributes.push(self.dolphin.attribute(PARAM_PREFIX + prop, null, param.value, 'VALUE'));\n                    attributes.push(self.dolphin.attribute(PARAM_PREFIX + prop, null, param.type, 'VALUE_TYPE'));\n                }\n            }\n        }\n\n        var pm = self.dolphin.presentationModel.apply(self.dolphin, [null, ACTION_CALL_BEAN].concat(attributes));\n\n        self.connector.invoke(CALL_CONTROLLER_ACTION_COMMAND_NAME, params).then(function() {\n            var isError = pm.findAttributeByPropertyName(ERROR_CODE).getValue();\n            if (isError) {\n                reject(new Error(\"ControllerAction caused an error\"));\n            } else {\n                resolve();\n            }\n            self.dolphin.deletePresentationModel(pm);\n        });\n    });\n};\n\n\nControllerManager.prototype.destroyController = function(controllerId) {\n    checkParam(controllerId, 'controllerId');\n\n    var self = this;\n    return new Promise(function(resolve) {\n        self.connector.getHighlanderPM().then(function (highlanderPM) {\n            highlanderPM.findAttributeByPropertyName(CONTROLLER_ID).setValue(controllerId);\n            self.connector.invoke(DESTROY_CONTROLLER_COMMAND_NAME).then(resolve);\n        });\n    });\n};\n\n\n\nexports.ControllerManager = ControllerManager;\n","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\nrequire('./polyfills.js');\nvar checkParam = require('./utils.js').checkParam;\n\n\n\nfunction ControllerProxy(controllerId, model, manager) {\n    checkParam(controllerId, 'controllerId');\n    checkParam(model, 'model');\n    checkParam(manager, 'manager');\n\n    this.controllerId = controllerId;\n    this.model = model;\n    this.manager = manager;\n    this.destroyed = false;\n}\n\n\nControllerProxy.prototype.invoke = function(name, params) {\n    checkParam(name, 'name');\n\n    if (this.destroyed) {\n        throw new Error('The controller was already destroyed');\n    }\n    return this.manager.invokeAction(this.controllerId, name, params);\n};\n\n\nControllerProxy.prototype.destroy = function() {\n    if (this.destroyed) {\n        throw new Error('The controller was already destroyed');\n    }\n    this.destroyed = true;\n    return this.manager.destroyController(this);\n};\n\n\n\nexports.ControllerProxy = ControllerProxy;\n","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n/* global console */\n\"use strict\";\n\nrequire('./polyfills.js');\nvar opendolphin = require('../libsrc/opendolphin.js');\n\nvar utils = require('./utils.js');\nvar exists = utils.exists;\nvar checkParam = utils.checkParam;\nvar Connector = require('./connector.js').Connector;\nvar BeanManager = require('./beanmanager.js').BeanManager;\nvar ClassRepository = require('./classrepo.js').ClassRepository;\nvar ControllerManager = require('./controllermanager.js').ControllerManager;\nvar ClientContext = require('./clientcontext.js').ClientContext;\n\nexports.connect = function(url, config) {\n    checkParam(url, 'url');\n\n    var builder = opendolphin.makeDolphin().url(url).reset(false).slackMS(4).supportCORS(true);\n    if (exists(config) && exists(config.errorHandler)) {\n        builder.errorHandler(config.errorHandler);\n    }\n    var dolphin = builder.build();\n\n    var classRepository = new ClassRepository(dolphin);\n    var beanManager = new BeanManager(classRepository);\n    var connector = new Connector(url, dolphin, classRepository, config);\n    var controllerManager = new ControllerManager(dolphin, classRepository, connector);\n\n    return new ClientContext(dolphin, beanManager, controllerManager, connector);\n};\n","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n ////////////////////\n// Array.forEach()\n////////////////////\nif (!Array.prototype.forEach) {\n\n    Array.prototype.forEach = function(callback, thisArg) {\n\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(' this is null or not defined');\n        }\n\n        // 1. Let O be the result of calling ToObject passing the |this| value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get internal method of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If IsCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + ' is not a function');\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n\n            var kValue;\n\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n\n                // i. Let kValue be the result of calling the Get internal method of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Call the Call internal method of callback with T as the this value and\n                // argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n}\n\n\n\n////////////////////\n// Array.filter()\n////////////////////\nif (!Array.prototype.filter) {\n    Array.prototype.filter = function(fun/*, thisArg*/) {\n        'use strict';\n\n        if (this === void 0 || this === null) {\n            throw new TypeError();\n        }\n\n        var t = Object(this);\n        var len = t.length >>> 0;\n        if (typeof fun !== 'function') {\n            throw new TypeError();\n        }\n\n        var res = [];\n        var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\n        for (var i = 0; i < len; i++) {\n            if (i in t) {\n                var val = t[i];\n\n                // NOTE: Technically this should Object.defineProperty at\n                //       the next index, as push can be affected by\n                //       properties on Object.prototype and Array.prototype.\n                //       But that method's new, and collisions should be\n                //       rare, so use the more-compatible alternative.\n                if (fun.call(thisArg, val, i, t)) {\n                    res.push(val);\n                }\n            }\n        }\n\n        return res;\n    };\n}","/* Copyright 2015 Canoo Engineering AG.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browserify: true */\n\"use strict\";\n\nvar exists = function(object) {\n    return typeof object !== 'undefined' && object !== null;\n};\n\nmodule.exports.exists = exists;\n\nmodule.exports.checkParam = function(param, name) {\n    if (!exists(param)) {\n        throw new Error('The parameter ' + name + ' is mandatory');\n    }\n};\n"],"sourceRoot":"/source/"}